#include "constraints.hpp"
std::string create_model(){
using namespace constrained_based_networks;
auto pool = Pool::getInstance();
new DataService("Dev::Bus::CAN::ClientInSrv");
new DataService("Dev::Bus::CAN::BusSrv");
new DataService("Localization::HoughSrv");
new DataService("Dev::Bus::CAN::BusOutSrv");
new DataService("Base::GroundDistanceSrv");
new DataService("Base::DVLSrv");
new DataService("Base::VelocitySrv");
new DataService("Base::PoseDeltaSrv");
new DataService("Base::RelativePoseSrv");
new DataService("Base::GlobalPoseSrv");
new DataService("Base::TransformationSrv");
new DataService("Dev::Bus::CAN::BusInSrv");
new DataService("Base::PoseSrv");
new DataService("Base::OrientationWithZSrv");
new DataService("Dev::Bus::CAN::BusBaseSrv");
new DataService("Base::ZProviderSrv");
new DataService("Dev::Bus::CAN");
new DataService("Base::OrientationSrv");
new DataService("Base::PositionSrv");
new DataService("Base::RotationSrv");
new DataService("Dev::Sensors::DepthReaderAvalon");
new DataService("Base::WorldYPositionXVelocityControllerSrv");
new DataService("Base::WorldZRollPitchYawSrv");
new DataService("Base::WorldXYVelocityControllerSrv");
new DataService("Base::WorldXYZPositionControllerSrv");
new DataService("Base::WorldXYPositionControllerSrv");
new DataService("Base::WorldXYZRollPitchYawControllerSrv");
new DataService("Base::WorldXYZRollPitchYawControlledSystemSrv");
new DataService("Dev::Sensors::KVH::DSP3000");
new DataService("Base::SonarImageProviderSrv");
new DataService("Dev::Profiling");
new DataService("Dev::Echosounder");
new DataService("Dev::Micron");
new DataService("Dev::Sensors::BlueView");
new DataService("Dev::Sensors::Cameras::Vrmagic");
new DataService("Dev::Actuators::Dynamixel");
new DataService("Dev::Actuators::PTU");
new DataService("Dev::Sensors::TimestamperDev");
new DataService("Dev::Sensors::Cameras::USB");
new DataService("Dev::Sensors::Cameras::Prosilica");
new DataService("Dev::Sensors::Cameras::Firewire");
new DataService("Dev::Sensors::XsensAHRS");
new DataService("Dev::Sensors::Hokuyo");
new DataService("Dev::Sensors::GPS");
new DataService("Base::PointcloudProviderSrv");
new DataService("Base::SonarScanProviderSrv");
new DataService("Dev::Controldev::Mouse3D");
new DataService("Dev::Controldev::Joystick");
new DataService("Base::LaserRangeFinderSrv");
new DataService("Base::DistanceImageProviderSrv");
new DataService("Base::StereoPairProviderSrv");
new DataService("Dev::Sensors::Hbridge");
new DataService("Base::ImageProviderSrv");
new DataService("Base::CalibratedIMUSensorsSrv");
new DataService("Base::CompensatedIMUSensorsSrv");
new DataService("Dev::Actuators::Hbridge");
new DataService("Base::IMUSensorsSrv");
new DataService("Base::ImageConsumerSrv");
new DataService("Base::RawCommandControlledSystemSrv");
new DataService("Base::TimestampInputSrv");
new DataService("Base::TimestamperSrv");
new DataService("Base::RawCommandControllerSrv");
new DataService("Base::RawCommandCommandConsumerSrv");
new DataService("Base::AUVRelativeMotionControlledSystemSrv");
new DataService("Base::AUVRelativeMotionControllerSrv");
new DataService("Base::AUVRelativeMotionCommandConsumerSrv");
new DataService("Base::AUVMotionControlledSystemSrv");
new DataService("Base::AUVMotionControllerSrv");
new DataService("Base::AUVMotionCommandConsumerSrv");
new DataService("Dev::Bus::CAN::ClientSrv");
new DataService("Base::JointsControlledSystemSrv");
new DataService("Base::JointsControllerSrv");
new DataService("Dev::Bus::CAN::ClientOutSrv");
new DataService("Base::JointsCommandSrv");
new DataService("Base::JointsStatusSrv");
new DataService("Base::JointsCommandConsumerSrv");
new DataService("Base::ControlledSystemSrv");
new DataService("Base::ControllerSrv");
new DataService("Base::MapSrv");
new DataService("Base::OrientationToCorrectSrv");
new DataService("Auv::StructuredLightPairSrv");
new DataService("Auv::SoundSourceDirectionSrv");
new DataService("Auv::ModemConnectionSrv");
new DataService("WallServoing::WallOrientationSrv");
new DataService("Dev::SystemStatus");
new DataService("Dev::ASVModem");
new DataService("Dev::Sensors::Modem");
new DataService("Dev::Sensors::Battery");
new DataService("Dev::Actuators::Lights");
{
auto t = new Task("UwParticleLocalization::Task");
(void)t;
t->addEvent("above_surface");
t->addEvent("invalid_values");
t->addEvent("localizing");
t->addEvent("no_hough");
t->addEvent("no_joints_no_dvl");
t->addEvent("no_orientation");
t->addEvent("no_sonar");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","position_covariance_threshold","10.0");
t->addConfFileProperty("default","advanced_motion_model","false");
t->addConfFileProperty("default","aggregator_max_latency","0.1");
t->addConfFileProperty("default","avg_particle_position","true");
t->addConfFileProperty("default","buoy_cam_position","{data => [0.7, 0.0, 0.0]}");
t->addConfFileProperty("default","buoy_cam_rotation","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","buoy_covariance","1.0");
t->addConfFileProperty("default","buoy_importance","0.5");
t->addConfFileProperty("default","debug","true");
t->addConfFileProperty("default","echosounder_samples_period","0.01");
t->addConfFileProperty("default","effective_sample_size_threshold","0.8");
t->addConfFileProperty("default","filter_zeros","true");
t->addConfFileProperty("default","gps_covarianz","1.0");
t->addConfFileProperty("default","gps_importance","1.0");
t->addConfFileProperty("default","gps_interspersal_ratio","0.01");
t->addConfFileProperty("default","gps_pose_samples_period","0.1");
t->addConfFileProperty("default","gps_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","hough_interspersal_ratio","0.01");
t->addConfFileProperty("default","hough_timeout","20.0");
t->addConfFileProperty("default","hough_timeout_interspersal","0.0");
t->addConfFileProperty("default","init_position","[0.0, 0.0, 0.0]");
t->addConfFileProperty("default","init_sample_rejection","10");
t->addConfFileProperty("default","init_variance","[24.0, 20.0, 1.0]");
t->addConfFileProperty("default","joint_names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("default","laser_samples_period","0.01");
t->addConfFileProperty("default","max_velocity_drift","0.15");
t->addConfFileProperty("default","minimum_depth","-0.3");
t->addConfFileProperty("default","minimum_perceptions","3");
t->addConfFileProperty("default","obstacle_samples_period","0.1");
t->addConfFileProperty("default","orientation_offset","0.0");
t->addConfFileProperty("default","orientation_samples_period","0.01");
t->addConfFileProperty("default","param_TCM","[0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("default","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_floating","true");
t->addConfFileProperty("default","param_length","1.0");
t->addConfFileProperty("default","param_linDamp","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.681775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_linDampNeg","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.226193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_mass","160.0");
t->addConfFileProperty("default","param_radius","0.1");
t->addConfFileProperty("default","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_thrusterCoefficient","[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("default","param_thrusterVoltage","33.0");
t->addConfFileProperty("default","particle_number","200");
t->addConfFileProperty("default","perception_history_number","8");
t->addConfFileProperty("default","pipeline_covariance","1.0");
t->addConfFileProperty("default","pipeline_importance","0.5");
t->addConfFileProperty("default","pipeline_position","{data => [-0.7, 0.0, -2.0]}");
t->addConfFileProperty("default","pipeline_samples_period","0.1");
t->addConfFileProperty("default","pure_random_motion","false");
t->addConfFileProperty("default","reset_timeout","10.0");
t->addConfFileProperty("default","sonar_covariance","0.5");
t->addConfFileProperty("default","sonar_covariance_corner_factor","1.0");
t->addConfFileProperty("default","sonar_covariance_reflection_factor","1.0");
t->addConfFileProperty("default","sonar_importance","1.0");
t->addConfFileProperty("default","sonar_maximum_distance","30.0");
t->addConfFileProperty("default","sonar_minimum_distance","1.0");
t->addConfFileProperty("default","sonar_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","sonar_vertical_angle","0.52");
t->addConfFileProperty("default","speed_samples_period","0.01");
t->addConfFileProperty("default","static_motion_covariance","[0.25, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("default","stream_aligner_status_period","1.0");
t->addConfFileProperty("default","thruster_samples_period","0.01");
t->addConfFileProperty("default","use_best_feature_only","true");
t->addConfFileProperty("default","use_markov","true");
t->addConfFileProperty("default","utm_relative_angle","0.0");
t->addConfFileProperty("default","yaml_map","/home/goldhoorn/dev-avalon-21/auv_avalon/orogen/uw_particle_localization/maps/testhalle.yml");
t->addConfFileProperty("simulation","yaml_map","/home/matthias/dev/avalon/orogen/uw_particle_localization/maps/nurc.yml");
t->addConfFileProperty("sim_nurc","advanced_motion_model","false");
t->addConfFileProperty("sim_nurc","aggregator_max_latency","0.1");
t->addConfFileProperty("sim_nurc","avg_particle_position","true");
t->addConfFileProperty("sim_nurc","buoy_cam_position","{data => [0.7, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","buoy_cam_rotation","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","buoy_covariance","1.0");
t->addConfFileProperty("sim_nurc","buoy_importance","0.5");
t->addConfFileProperty("sim_nurc","debug","true");
t->addConfFileProperty("sim_nurc","echosounder_samples_period","0.01");
t->addConfFileProperty("sim_nurc","effective_sample_size_threshold","0.8");
t->addConfFileProperty("sim_nurc","filter_zeros","true");
t->addConfFileProperty("sim_nurc","gps_covarianz","1.0");
t->addConfFileProperty("sim_nurc","gps_importance","1.0");
t->addConfFileProperty("sim_nurc","gps_interspersal_ratio","0.01");
t->addConfFileProperty("sim_nurc","gps_pose_samples_period","0.1");
t->addConfFileProperty("sim_nurc","gps_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","hough_interspersal_ratio","0.01");
t->addConfFileProperty("sim_nurc","hough_timeout","20.0");
t->addConfFileProperty("sim_nurc","hough_timeout_interspersal","0.0");
t->addConfFileProperty("sim_nurc","init_position","[-30.0, 25.0, 0.0]");
t->addConfFileProperty("sim_nurc","init_sample_rejection","10");
t->addConfFileProperty("sim_nurc","init_variance","[60.0, 50.0, 1.0]");
t->addConfFileProperty("sim_nurc","joint_names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("sim_nurc","laser_samples_period","0.01");
t->addConfFileProperty("sim_nurc","max_velocity_drift","0.1");
t->addConfFileProperty("sim_nurc","minimum_depth","-0.3");
t->addConfFileProperty("sim_nurc","minimum_perceptions","3");
t->addConfFileProperty("sim_nurc","obstacle_samples_period","0.1");
t->addConfFileProperty("sim_nurc","orientation_offset","0.0");
t->addConfFileProperty("sim_nurc","orientation_samples_period","0.01");
t->addConfFileProperty("sim_nurc","param_TCM","[0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("sim_nurc","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_floating","true");
t->addConfFileProperty("sim_nurc","param_length","1.0");
t->addConfFileProperty("sim_nurc","param_linDamp","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_linDampNeg","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_mass","50.0");
t->addConfFileProperty("sim_nurc","param_radius","0.1");
t->addConfFileProperty("sim_nurc","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_thrusterCoefficient","[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("sim_nurc","param_thrusterVoltage","33.0");
t->addConfFileProperty("sim_nurc","particle_number","500");
t->addConfFileProperty("sim_nurc","perception_history_number","8");
t->addConfFileProperty("sim_nurc","pipeline_covariance","1.0");
t->addConfFileProperty("sim_nurc","pipeline_importance","0.5");
t->addConfFileProperty("sim_nurc","pipeline_position","{data => [-0.7, 0.0, -2.0]}");
t->addConfFileProperty("sim_nurc","pipeline_samples_period","0.1");
t->addConfFileProperty("sim_nurc","pure_random_motion","false");
t->addConfFileProperty("sim_nurc","reset_timeout","10.0");
t->addConfFileProperty("sim_nurc","sonar_covariance","0.5");
t->addConfFileProperty("sim_nurc","sonar_covariance_corner_factor","1.0");
t->addConfFileProperty("sim_nurc","sonar_covariance_reflection_factor","1.0");
t->addConfFileProperty("sim_nurc","sonar_importance","1.0");
t->addConfFileProperty("sim_nurc","sonar_maximum_distance","50.0");
t->addConfFileProperty("sim_nurc","sonar_minimum_distance","1.0");
t->addConfFileProperty("sim_nurc","sonar_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","sonar_vertical_angle","0.52");
t->addConfFileProperty("sim_nurc","speed_samples_period","0.01");
t->addConfFileProperty("sim_nurc","static_motion_covariance","[0.2, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("sim_nurc","stream_aligner_status_period","1.0");
t->addConfFileProperty("sim_nurc","thruster_samples_period","0.01");
t->addConfFileProperty("sim_nurc","use_best_feature_only","true");
t->addConfFileProperty("sim_nurc","use_markov","true");
t->addConfFileProperty("sim_nurc","utm_relative_angle","0.0");
t->addConfFileProperty("sim_nurc","yaml_map","/home/goldhoorn/dev-avalon-21/auv_avalon/orogen/uw_particle_localization/maps/nurc.yml");
t->addConfFileProperty("dagon","position_covariance_threshold","10.0");
t->addConfFileProperty("dagon","advanced_motion_model","false");
t->addConfFileProperty("dagon","aggregator_max_latency","0.1");
t->addConfFileProperty("dagon","avg_particle_position","true");
t->addConfFileProperty("dagon","buoy_cam_position","{data => [0.7, 0.0, 0.0]}");
t->addConfFileProperty("dagon","buoy_cam_rotation","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","buoy_covariance","1.0");
t->addConfFileProperty("dagon","buoy_importance","0.5");
t->addConfFileProperty("dagon","debug","true");
t->addConfFileProperty("dagon","echosounder_samples_period","0.01");
t->addConfFileProperty("dagon","effective_sample_size_threshold","0.8");
t->addConfFileProperty("dagon","filter_zeros","true");
t->addConfFileProperty("dagon","gps_covarianz","1.0");
t->addConfFileProperty("dagon","gps_importance","1.0");
t->addConfFileProperty("dagon","gps_interspersal_ratio","0.01");
t->addConfFileProperty("dagon","gps_pose_samples_period","0.1");
t->addConfFileProperty("dagon","gps_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","hough_interspersal_ratio","0.01");
t->addConfFileProperty("dagon","hough_timeout","20.0");
t->addConfFileProperty("dagon","hough_timeout_interspersal","0.0");
t->addConfFileProperty("dagon","init_position","[-30.0, 25.0, 0.0]");
t->addConfFileProperty("dagon","init_sample_rejection","10");
t->addConfFileProperty("dagon","init_variance","[60.0, 50.0, 1.0]");
t->addConfFileProperty("dagon","joint_names","[dive_tail, dive_head, surge_left, surge_right, sway_tail, foo]");
t->addConfFileProperty("dagon","laser_samples_period","0.01");
t->addConfFileProperty("dagon","max_velocity_drift","0.1");
t->addConfFileProperty("dagon","minimum_depth","-0.3");
t->addConfFileProperty("dagon","minimum_perceptions","3");
t->addConfFileProperty("dagon","obstacle_samples_period","0.1");
t->addConfFileProperty("dagon","orientation_offset","0.0");
t->addConfFileProperty("dagon","orientation_samples_period","0.01");
t->addConfFileProperty("dagon","param_TCM","[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("dagon","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_floating","true");
t->addConfFileProperty("dagon","param_length","1.0");
t->addConfFileProperty("dagon","param_linDamp","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_linDampNeg","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_mass","50.0");
t->addConfFileProperty("dagon","param_radius","0.1");
t->addConfFileProperty("dagon","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_thrusterCoefficient","[0.005, 0.005, 0.02952625, 0.02952625, 0.0208693, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("dagon","param_thrusterVoltage","30.0");
t->addConfFileProperty("dagon","particle_number","500");
t->addConfFileProperty("dagon","perception_history_number","8");
t->addConfFileProperty("dagon","pipeline_covariance","1.0");
t->addConfFileProperty("dagon","pipeline_importance","0.5");
t->addConfFileProperty("dagon","pipeline_position","{data => [-0.7, 0.0, -2.0]}");
t->addConfFileProperty("dagon","pipeline_samples_period","0.1");
t->addConfFileProperty("dagon","pure_random_motion","false");
t->addConfFileProperty("dagon","reset_timeout","10.0");
t->addConfFileProperty("dagon","sonar_covariance","0.5");
t->addConfFileProperty("dagon","sonar_covariance_corner_factor","1.0");
t->addConfFileProperty("dagon","sonar_covariance_reflection_factor","1.0");
t->addConfFileProperty("dagon","sonar_importance","1.0");
t->addConfFileProperty("dagon","sonar_maximum_distance","50.0");
t->addConfFileProperty("dagon","sonar_minimum_distance","1.0");
t->addConfFileProperty("dagon","sonar_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","sonar_vertical_angle","0.52");
t->addConfFileProperty("dagon","speed_samples_period","0.01");
t->addConfFileProperty("dagon","static_motion_covariance","[0.2, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("dagon","stream_aligner_status_period","1.0");
t->addConfFileProperty("dagon","thruster_samples_period","0.01");
t->addConfFileProperty("dagon","use_best_feature_only","true");
t->addConfFileProperty("dagon","use_markov","true");
t->addConfFileProperty("dagon","utm_relative_angle","0.0");
t->addConfFileProperty("dagon","yaml_map","/home/goldhoorn/dev-avalon-21/auv_avalon/orogen/uw_particle_localization/maps/nurc.yml");
t->addConfFileProperty("slam_testhalle","echosounder_variance","0.5");
t->addConfFileProperty("slam_testhalle","feature_confidence","0.9");
t->addConfFileProperty("slam_testhalle","feature_confidence_threshold","0.3");
t->addConfFileProperty("slam_testhalle","feature_empty_cell_confidence","0.6");
t->addConfFileProperty("slam_testhalle","feature_filter_threshold","0.1");
t->addConfFileProperty("slam_testhalle","feature_grid_resolution","1.0");
t->addConfFileProperty("slam_testhalle","feature_observation_count_threshold","6");
t->addConfFileProperty("slam_testhalle","feature_observation_minimum_range","2.0");
t->addConfFileProperty("slam_testhalle","feature_observation_range","15.0");
t->addConfFileProperty("slam_testhalle","feature_output_confidence_threshold","0.5");
t->addConfFileProperty("slam_testhalle","feature_weight_reduction","0.9");
t->addConfFileProperty("slam_testhalle","single_depth_map","true");
t->addConfFileProperty("slam_testhalle","use_mapping_only","true");
t->addConfFileProperty("slam_testhalle","use_markov","true");
t->addConfFileProperty("slam_testhalle","use_slam","false");
t->addConfFileProperty("nurc","advanced_motion_model","false");
t->addConfFileProperty("nurc","aggregator_max_latency","0.5");
t->addConfFileProperty("nurc","avg_particle_position","true");
t->addConfFileProperty("nurc","buoy_cam_position","{data => [0.7, 0.0, 0.0]}");
t->addConfFileProperty("nurc","buoy_cam_rotation","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","buoy_covariance","1.0");
t->addConfFileProperty("nurc","buoy_importance","0.5");
t->addConfFileProperty("nurc","debug","true");
t->addConfFileProperty("nurc","dvl_rotation","{data => [0.0, 0.0, 0.7853981633974483]}");
t->addConfFileProperty("nurc","echosounder_samples_period","0.01");
t->addConfFileProperty("nurc","echosounder_variance","0.5");
t->addConfFileProperty("nurc","effective_sample_size_threshold","0.8");
t->addConfFileProperty("nurc","filter_zeros","true");
t->addConfFileProperty("nurc","gps_covarianz","1.0");
t->addConfFileProperty("nurc","gps_importance","1.0");
t->addConfFileProperty("nurc","gps_interspersal_ratio","0.01");
t->addConfFileProperty("nurc","gps_pose_samples_period","0.1");
t->addConfFileProperty("nurc","gps_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","hough_interspersal_ratio","0.05");
t->addConfFileProperty("nurc","hough_timeout","20.0");
t->addConfFileProperty("nurc","hough_timeout_interspersal","0.0");
t->addConfFileProperty("nurc","init_position","[-30.0, 25.0, 0.0]");
t->addConfFileProperty("nurc","init_sample_rejection","200");
t->addConfFileProperty("nurc","init_variance","[60.0, 50.0, 1.0]");
t->addConfFileProperty("nurc","joint_names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("nurc","laser_samples_period","0.01");
t->addConfFileProperty("nurc","max_velocity_drift","0.3");
t->addConfFileProperty("nurc","minimum_depth","-0.3");
t->addConfFileProperty("nurc","minimum_perceptions","3");
t->addConfFileProperty("nurc","obstacle_samples_period","0.1");
t->addConfFileProperty("nurc","orientation_offset","0.0");
t->addConfFileProperty("nurc","orientation_samples_period","0.01");
t->addConfFileProperty("nurc","param_TCM","[0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_floating","true");
t->addConfFileProperty("nurc","param_length","1.0");
t->addConfFileProperty("nurc","param_linDamp","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.681775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_linDampNeg","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.226193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_mass","160.0");
t->addConfFileProperty("nurc","param_radius","0.1");
t->addConfFileProperty("nurc","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc","param_thrusterCoefficient","[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc","param_thrusterVoltage","33.0");
t->addConfFileProperty("nurc","particle_number","500");
t->addConfFileProperty("nurc","perception_history_number","8");
t->addConfFileProperty("nurc","pipeline_covariance","1.0");
t->addConfFileProperty("nurc","pipeline_importance","0.5");
t->addConfFileProperty("nurc","pipeline_position","{data => [-0.7, 0.0, -2.0]}");
t->addConfFileProperty("nurc","pipeline_samples_period","0.1");
t->addConfFileProperty("nurc","position_covariance_threshold","1.0");
t->addConfFileProperty("nurc","pure_random_motion","false");
t->addConfFileProperty("nurc","reset_timeout","10.0");
t->addConfFileProperty("nurc","single_depth_map","true");
t->addConfFileProperty("nurc","sonar_covariance","1.0");
t->addConfFileProperty("nurc","sonar_covariance_corner_factor","1.0");
t->addConfFileProperty("nurc","sonar_covariance_reflection_factor","1.0");
t->addConfFileProperty("nurc","sonar_importance","1.0");
t->addConfFileProperty("nurc","sonar_maximum_distance","40.0");
t->addConfFileProperty("nurc","sonar_minimum_distance","2.0");
t->addConfFileProperty("nurc","sonar_position","{data => [0.6, 0.0, 0.0]}");
t->addConfFileProperty("nurc","sonar_vertical_angle","0.52");
t->addConfFileProperty("nurc","speed_samples_period","0.01");
t->addConfFileProperty("nurc","speed_samples_timeout","1.0");
t->addConfFileProperty("nurc","static_motion_covariance","[0.25, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc","static_speed_covariance","[0.25, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc","stream_aligner_status_period","1.0");
t->addConfFileProperty("nurc","thruster_samples_period","0.01");
t->addConfFileProperty("nurc","use_best_feature_only","true");
t->addConfFileProperty("nurc","use_markov","true");
t->addConfFileProperty("nurc","utm_relative_angle","0.0");
t->addConfFileProperty("nurc","yaml_depth_map","");
t->addConfFileProperty("nurc","yaml_depth_output_map","");
t->addConfFileProperty("nurc","yaml_map","/home/goldhoorn/dev-avalon-21/auv_avalon/orogen/uw_particle_localization/maps/nurc.yml");
t->addConfFileProperty("nurc_dagon","advanced_motion_model","true");
t->addConfFileProperty("nurc_dagon","aggregator_max_latency","0.5");
t->addConfFileProperty("nurc_dagon","avg_particle_position","true");
t->addConfFileProperty("nurc_dagon","buoy_cam_position","{data => [0.7, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","buoy_cam_rotation","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","buoy_covariance","1.0");
t->addConfFileProperty("nurc_dagon","buoy_importance","0.5");
t->addConfFileProperty("nurc_dagon","debug","true");
t->addConfFileProperty("nurc_dagon","echosounder_samples_period","0.01");
t->addConfFileProperty("nurc_dagon","effective_sample_size_threshold","0.8");
t->addConfFileProperty("nurc_dagon","filter_zeros","true");
t->addConfFileProperty("nurc_dagon","gps_covarianz","1.0");
t->addConfFileProperty("nurc_dagon","gps_importance","1.0");
t->addConfFileProperty("nurc_dagon","gps_interspersal_ratio","0.01");
t->addConfFileProperty("nurc_dagon","gps_pose_samples_period","0.1");
t->addConfFileProperty("nurc_dagon","gps_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","hough_interspersal_ratio","0.01");
t->addConfFileProperty("nurc_dagon","hough_timeout","20.0");
t->addConfFileProperty("nurc_dagon","hough_timeout_interspersal","0.0");
t->addConfFileProperty("nurc_dagon","init_position","[0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc_dagon","init_sample_rejection","10");
t->addConfFileProperty("nurc_dagon","init_variance","[24.0, 20.0, 1.0]");
t->addConfFileProperty("nurc_dagon","joint_names","[dive_tail, dive_head, surge_left, surge_right, sway_tail, foo]");
t->addConfFileProperty("nurc_dagon","laser_samples_period","0.01");
t->addConfFileProperty("nurc_dagon","max_velocity_drift","0.1");
t->addConfFileProperty("nurc_dagon","minimum_depth","-0.3");
t->addConfFileProperty("nurc_dagon","minimum_perceptions","3");
t->addConfFileProperty("nurc_dagon","obstacle_samples_period","0.1");
t->addConfFileProperty("nurc_dagon","orientation_offset","0.0");
t->addConfFileProperty("nurc_dagon","orientation_samples_period","0.01");
t->addConfFileProperty("nurc_dagon","param_TCM","[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc_dagon","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_floating","true");
t->addConfFileProperty("nurc_dagon","param_length","1.0");
t->addConfFileProperty("nurc_dagon","param_linDamp","{rows => 6, cols => 6, data => [10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_linDampNeg","{rows => 6, cols => 6, data => [25.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_mass","120.0");
t->addConfFileProperty("nurc_dagon","param_radius","0.1");
t->addConfFileProperty("nurc_dagon","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","param_thrusterCoefficient","[0.005, 0.005, 0.007, 0.007, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc_dagon","param_thrusterVoltage","30.0");
t->addConfFileProperty("nurc_dagon","particle_number","500");
t->addConfFileProperty("nurc_dagon","perception_history_number","8");
t->addConfFileProperty("nurc_dagon","pipeline_covariance","1.0");
t->addConfFileProperty("nurc_dagon","pipeline_importance","0.5");
t->addConfFileProperty("nurc_dagon","pipeline_position","{data => [-0.7, 0.0, -2.0]}");
t->addConfFileProperty("nurc_dagon","pipeline_samples_period","0.1");
t->addConfFileProperty("nurc_dagon","pure_random_motion","false");
t->addConfFileProperty("nurc_dagon","reset_timeout","10.0");
t->addConfFileProperty("nurc_dagon","sonar_covariance","0.5");
t->addConfFileProperty("nurc_dagon","sonar_covariance_corner_factor","1.0");
t->addConfFileProperty("nurc_dagon","sonar_covariance_reflection_factor","1.0");
t->addConfFileProperty("nurc_dagon","sonar_importance","1.0");
t->addConfFileProperty("nurc_dagon","sonar_maximum_distance","50.0");
t->addConfFileProperty("nurc_dagon","sonar_minimum_distance","1.5");
t->addConfFileProperty("nurc_dagon","sonar_position","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("nurc_dagon","sonar_vertical_angle","0.52");
t->addConfFileProperty("nurc_dagon","speed_samples_period","0.01");
t->addConfFileProperty("nurc_dagon","static_motion_covariance","[0.2, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc_dagon","static_speed_covariance","[0.01, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("nurc_dagon","stream_aligner_status_period","1.0");
t->addConfFileProperty("nurc_dagon","thruster_samples_period","0.01");
t->addConfFileProperty("nurc_dagon","use_best_feature_only","true");
t->addConfFileProperty("nurc_dagon","use_markov","true");
t->addConfFileProperty("nurc_dagon","utm_relative_angle","0.0");
t->addConfFileProperty("nurc_dagon","yaml_map","/home/goldhoorn/dev-avalon-21/auv_avalon/orogen/uw_particle_localization/maps/nurc.yml");
	t->addProperty("debug", ConfigurationModel::BOOL);
	t->addProperty("particle_number", ConfigurationModel::INT);
	t->addProperty("minimum_depth", ConfigurationModel::DOUBLE);
	t->addProperty("hough_interspersal_ratio", ConfigurationModel::DOUBLE);
	t->addProperty("hough_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("hough_timeout_interspersal", ConfigurationModel::DOUBLE);
	t->addProperty("effective_sample_size_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("reset_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("speed_samples_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("minimum_perceptions", ConfigurationModel::INT);
	t->addProperty("yaml_map", ConfigurationModel::STRING);
	t->addProperty("yaml_depth_map", ConfigurationModel::STRING);
	t->addProperty("yaml_depth_output_map", ConfigurationModel::STRING);
	t->addProperty("sonar_maximum_distance", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_minimum_distance", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_covariance", ConfigurationModel::DOUBLE);
	t->addProperty("pipeline_covariance", ConfigurationModel::DOUBLE);
	t->addProperty("buoy_covariance", ConfigurationModel::DOUBLE);
	t->addProperty("pure_random_motion", ConfigurationModel::BOOL);
	t->addProperty("sonar_importance", ConfigurationModel::DOUBLE);
	t->addProperty("pipeline_importance", ConfigurationModel::DOUBLE);
	t->addProperty("buoy_importance", ConfigurationModel::DOUBLE);
	t->addProperty("perception_history_number", ConfigurationModel::INT);
	t->addProperty("init_sample_rejection", ConfigurationModel::INT);
	t->addProperty("orientation_offset", ConfigurationModel::DOUBLE);
	t->addProperty("filter_zeros", ConfigurationModel::BOOL);
	t->addProperty("use_markov", ConfigurationModel::BOOL);
	t->addProperty("avg_particle_position", ConfigurationModel::BOOL);
	t->addProperty("use_best_feature_only", ConfigurationModel::BOOL);
	t->addProperty("utm_relative_angle", ConfigurationModel::DOUBLE);
	t->addProperty("gps_covarianz", ConfigurationModel::DOUBLE);
	t->addProperty("gps_importance", ConfigurationModel::DOUBLE);
	t->addProperty("gps_interspersal_ratio", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_vertical_angle", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_covariance_reflection_factor", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_covariance_corner_factor", ConfigurationModel::DOUBLE);
	t->addProperty("position_covariance_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("advanced_motion_model", ConfigurationModel::BOOL);
	t->addProperty("max_velocity_drift", ConfigurationModel::DOUBLE);
	t->addProperty("param_length", ConfigurationModel::DOUBLE);
	t->addProperty("param_radius", ConfigurationModel::DOUBLE);
	t->addProperty("param_mass", ConfigurationModel::DOUBLE);
	t->addProperty("param_thrusterVoltage", ConfigurationModel::DOUBLE);
	t->addProperty("param_floating", ConfigurationModel::BOOL);
	t->addProperty("use_slam", ConfigurationModel::BOOL);
	t->addProperty("use_mapping_only", ConfigurationModel::BOOL);
	t->addProperty("single_depth_map", ConfigurationModel::BOOL);
	t->addProperty("echosounder_variance", ConfigurationModel::DOUBLE);
	t->addProperty("feature_weight_reduction", ConfigurationModel::DOUBLE);
	t->addProperty("feature_observation_range", ConfigurationModel::DOUBLE);
	t->addProperty("feature_observation_minimum_range", ConfigurationModel::DOUBLE);
	t->addProperty("feature_grid_resolution", ConfigurationModel::DOUBLE);
	t->addProperty("feature_filter_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("feature_confidence", ConfigurationModel::DOUBLE);
	t->addProperty("feature_empty_cell_confidence", ConfigurationModel::DOUBLE);
	t->addProperty("feature_confidence_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("feature_output_confidence_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("feature_observation_count_threshold", ConfigurationModel::INT);
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("laser_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("speed_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("thruster_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("pipeline_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("gps_pose_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("echosounder_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("obstacle_samples_period", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Buoy::Survey");
(void)t;
t->addEvent("angle_arrived");
t->addEvent("buoy_arrived");
t->addEvent("buoy_detected");
t->addEvent("buoy_lost");
t->addEvent("buoy_search");
t->addEvent("cutting");
t->addEvent("cutting_error");
t->addEvent("cutting_success");
t->addEvent("moving_to_cutting_distance");
t->addEvent("re_searching_buoy");
t->addEvent("strafe_error");
t->addEvent("strafe_finished");
t->addEvent("strafe_to_angle");
t->addEvent("strafing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","buoy_depth","-1.55");
t->addConfFileProperty("default","cutting_hight","-0.25");
t->addConfFileProperty("default","cutting_time","53");
t->addConfFileProperty("default","cutting_wait_time","60");
t->addConfFileProperty("default","good_x","0.3");
t->addConfFileProperty("default","good_y_z","0.2");
t->addConfFileProperty("default","headingFactor","1.0");
t->addConfFileProperty("default","headingModulation","0.0");
t->addConfFileProperty("default","lost_timeout","17");
t->addConfFileProperty("default","maxX","0.2");
t->addConfFileProperty("default","max_buoy_distance","1.2");
t->addConfFileProperty("default","steps","5");
t->addConfFileProperty("default","strafe_angle","0.95");
t->addConfFileProperty("default","strafe_around","true");
t->addConfFileProperty("default","strafe_intensity","0.8");
t->addConfFileProperty("simulation","buoy_depth","-1.55");
t->addConfFileProperty("simulation","strafe_intensity","0.2");
t->addConfFileProperty("simulation","lost_timeout","60");
	t->addProperty("max_buoy_distance", ConfigurationModel::DOUBLE);
	t->addProperty("strafe_intensity", ConfigurationModel::DOUBLE);
	t->addProperty("steps", ConfigurationModel::INT);
	t->addProperty("lost_timeout", ConfigurationModel::INT);
	t->addProperty("good_y_z", ConfigurationModel::DOUBLE);
	t->addProperty("good_x", ConfigurationModel::DOUBLE);
	t->addProperty("buoy_depth", ConfigurationModel::DOUBLE);
	t->addProperty("headingFactor", ConfigurationModel::DOUBLE);
	t->addProperty("headingModulation", ConfigurationModel::DOUBLE);
	t->addProperty("maxX", ConfigurationModel::DOUBLE);
	t->addProperty("cutting_time", ConfigurationModel::INT);
	t->addProperty("cutting_hight", ConfigurationModel::DOUBLE);
	t->addProperty("strafe_angle", ConfigurationModel::DOUBLE);
	t->addProperty("strafe_around", ConfigurationModel::BOOL);
	t->addProperty("cutting_wait_time", ConfigurationModel::INT);
	t->addProperty("z_offset", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("WallServoing::SonarServoing");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("wall_distance", ConfigurationModel::DOUBLE);
	t->addProperty("fixed_depth", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_speed", ConfigurationModel::DOUBLE);
	t->addProperty("exploration_speed", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Dynamixel::Task");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","ccw_margin","1");
t->addConfFileProperty("default","ccw_slope","32");
t->addConfFileProperty("default","cw_margin","1");
t->addConfFileProperty("default","cw_slope","32");
t->addConfFileProperty("default","device","/dev/ttyS3");
t->addConfFileProperty("default","lowerFrameName","lower_dynamixel");
t->addConfFileProperty("default","lower_sweep_angle","0.0");
t->addConfFileProperty("default","mode","POSITION");
t->addConfFileProperty("default","moving_speed","0.0");
t->addConfFileProperty("default","punch","32");
t->addConfFileProperty("default","servo_id","1");
t->addConfFileProperty("default","torque_limit","512");
t->addConfFileProperty("default","upperFrameName","upper_dynamixel");
t->addConfFileProperty("default","upper_sweep_angle","0.0");
t->addConfFileProperty("default","zero_offset","0.0");
t->addFullfillment("Dev::Actuators::Dynamixel");
t->addFullfillment("Base::TransformationSrv");
	t->addProperty("zero_offset", ConfigurationModel::DOUBLE);
	t->addProperty("lower_sweep_angle", ConfigurationModel::DOUBLE);
	t->addProperty("upper_sweep_angle", ConfigurationModel::DOUBLE);
	t->addProperty("moving_speed", ConfigurationModel::DOUBLE);
	t->addProperty("upper_frame", ConfigurationModel::STRING);
	t->addProperty("lower_frame", ConfigurationModel::STRING);
	t->addProperty("device", ConfigurationModel::STRING);
	t->addProperty("servo_id", ConfigurationModel::INT);
	t->addProperty("cw_slope", ConfigurationModel::INT);
	t->addProperty("cw_margin", ConfigurationModel::INT);
	t->addProperty("ccw_margin", ConfigurationModel::INT);
	t->addProperty("ccw_slope", ConfigurationModel::INT);
	t->addProperty("punch", ConfigurationModel::INT);
	t->addProperty("torque_limit", ConfigurationModel::INT);
	t->addProperty("upperFrameName", ConfigurationModel::STRING);
	t->addProperty("lowerFrameName", ConfigurationModel::STRING);
}
{
auto t = new Task("WallServoing::WallServoing");
(void)t;
t->addEvent("corner");
t->addEvent("get_initial_wall_search_direction");
t->addEvent("initial_wall_search");
t->addEvent("leaving_corner");
t->addEvent("leaving_get_initial_wall_search_direction");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("servoing_direction", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_depth", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_distance", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_speed", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_factor", ConfigurationModel::DOUBLE);
	t->addProperty("correction_speed", ConfigurationModel::DOUBLE);
	t->addProperty("correction_factor", ConfigurationModel::DOUBLE);
	t->addProperty("search_direction", ConfigurationModel::DOUBLE);
	t->addProperty("direction_clockwise", ConfigurationModel::BOOL);
}
{
auto t = new Task("PipelineInspection::ColorFilter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("green_threshold", ConfigurationModel::INT);
	t->addProperty("diff_threshold", ConfigurationModel::INT);
}
{
auto t = new Task("SonarFeatureDetector::Task");
(void)t;
t->addEvent("building_map");
t->addEvent("not_enough_targets");
t->addEvent("reached_target");
t->addEvent("servoing_finished");
t->addEvent("target_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","confidence_weight","1.0");
t->addConfFileProperty("default","filter_border_structures","true");
t->addConfFileProperty("default","map_origin","{data => [60.0, 0.0]}");
t->addConfFileProperty("default","map_span","{data => [60.0, 50.0]}");
t->addConfFileProperty("default","minimum_object_cells","2");
t->addConfFileProperty("default","minimum_wall_distance","3.0");
t->addConfFileProperty("default","optimal_object_size","2.0");
	t->addProperty("minimum_wall_distance", ConfigurationModel::DOUBLE);
	t->addProperty("filter_border_structures", ConfigurationModel::BOOL);
	t->addProperty("optimal_object_size", ConfigurationModel::DOUBLE);
	t->addProperty("minimum_object_cells", ConfigurationModel::INT);
	t->addProperty("minimum_number_of_targets", ConfigurationModel::INT);
	t->addProperty("confidence_weight", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_depth", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Canbus::InterfaceTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallServoing::WallDetector");
(void)t;
t->addEvent("wall_found");
t->addEvent("wall_searching");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("wall_direction", ConfigurationModel::DOUBLE);
	t->addProperty("opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("fading_out_factor", ConfigurationModel::DOUBLE);
	t->addProperty("use_motion_model", ConfigurationModel::BOOL);
	t->addProperty("wall_estimation_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("offset", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Transformer::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("PipelineInspection::Inspection");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","buffer_size","50");
t->addConfFileProperty("default","cameraOrientation","{im => [0.0, 0.0, 0.7071067811865476], re => 0.7071067811865476}");
t->addConfFileProperty("default","cameraPosition","{data => [2.0, 0.0, 0.0]}");
t->addConfFileProperty("default","debug","true");
t->addConfFileProperty("default","ground_color","{data => [1.0, 1.0, 1.0]}");
t->addConfFileProperty("default","invert_z","true");
t->addConfFileProperty("default","laserNorm","{data => [0.7038453156522361, 0.0, 0.7103532724176078]}");
t->addConfFileProperty("default","laserPosition","{data => [0.0, 0.0, -0.1]}");
t->addConfFileProperty("default","laser_left_boundary","0.4");
t->addConfFileProperty("default","laser_right_boundary","0.4");
t->addConfFileProperty("default","matcher_iterations","1500");
t->addConfFileProperty("default","matcher_parameter_tolerance","-0.001");
t->addConfFileProperty("default","matcher_pipe_up","true");
t->addConfFileProperty("default","matcher_value_tolerance","-0.001");
t->addConfFileProperty("default","matcher_variance_threshold","1.0");
t->addConfFileProperty("default","max_pipe_angle","1.5");
t->addConfFileProperty("default","min_pipe_confidence","0.2");
t->addConfFileProperty("default","minimizer","GN_DIRECT_L");
t->addConfFileProperty("default","minimizer2","LN_NELDERMEAD");
t->addConfFileProperty("default","movement_factor","1.0");
t->addConfFileProperty("default","overflooding_color","{data => [0.0, 1.0, 1.0]}");
t->addConfFileProperty("default","pipe_color","{data => [1.0, 1.0, 1.0]}");
t->addConfFileProperty("default","pipe_min_radius","0.02");
t->addConfFileProperty("default","pipe_radius_h","0.09");
t->addConfFileProperty("default","pipe_radius_v","0.14");
t->addConfFileProperty("default","pipe_tolerance_h","0.5");
t->addConfFileProperty("default","pipe_tolerance_v","0.3");
t->addConfFileProperty("default","underflooding_color","{data => [1.0, 0.0, 0.0]}");
t->addConfFileProperty("default","use_second_minimizer","true");
t->addConfFileProperty("default","z_offset","2.0");
t->addConfFileProperty("default","no_motion","true");
	t->addProperty("invert_z", ConfigurationModel::BOOL);
	t->addProperty("laser_left_boundary", ConfigurationModel::DOUBLE);
	t->addProperty("laser_right_boundary", ConfigurationModel::DOUBLE);
	t->addProperty("max_pipe_angle", ConfigurationModel::DOUBLE);
	t->addProperty("min_pipe_confidence", ConfigurationModel::DOUBLE);
	t->addProperty("buffer_size", ConfigurationModel::INT);
	t->addProperty("use_second_minimizer", ConfigurationModel::BOOL);
	t->addProperty("no_motion", ConfigurationModel::BOOL);
	t->addProperty("use_velocity", ConfigurationModel::BOOL);
	t->addProperty("relative_map", ConfigurationModel::BOOL);
	t->addProperty("matcher_parameter_tolerance", ConfigurationModel::DOUBLE);
	t->addProperty("matcher_value_tolerance", ConfigurationModel::DOUBLE);
	t->addProperty("matcher_iterations", ConfigurationModel::INT);
	t->addProperty("matcher_pipe_up", ConfigurationModel::BOOL);
	t->addProperty("matcher_variance_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("z_offset", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_radius_h", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_radius_v", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_tolerance_h", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_tolerance_v", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_min_radius", ConfigurationModel::DOUBLE);
	t->addProperty("movement_factor", ConfigurationModel::DOUBLE);
	t->addProperty("debug", ConfigurationModel::BOOL);
}
{
auto t = new Task("Canbus::Task");
(void)t;
t->addEvent("can_error");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","baudRate","br125");
t->addConfFileProperty("default","checkBusOkInterval","100");
t->addConfFileProperty("default","device","");
t->addConfFileProperty("default","deviceType","SOCKET");
t->addConfFileProperty("default","statsInterval","1000");
t->addConfFileProperty("can0","device","can0");
t->addConfFileProperty("can1","device","can1");
t->addFullfillment("Dev::Bus::CAN");
t->addFullfillment("Dev::Bus::CAN::BusInSrv");
t->addFullfillment("Dev::Bus::CAN::BusBaseSrv");
	t->addProperty("device", ConfigurationModel::STRING);
	t->addProperty("checkBusOkInterval", ConfigurationModel::INT);
	t->addProperty("statsInterval", ConfigurationModel::INT);
}
{
auto t = new Task("PipelineInspection::LaserSimulation");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("variance", ConfigurationModel::DOUBLE);
	t->addProperty("line_height", ConfigurationModel::DOUBLE);
	t->addProperty("line_length", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_height", ConfigurationModel::DOUBLE);
	t->addProperty("pipe_width", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Logger::Logger");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("file", ConfigurationModel::STRING);
	t->addProperty("overwrite_existing_files", ConfigurationModel::BOOL);
}
{
auto t = new Task("DepthReader::Task");
(void)t;
t->addEvent("water_ingress");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","can_id","1088");
t->addConfFileProperty("default","externalPressureFactor","1600000.0");
t->addConfFileProperty("default","filter_param_external_pressure","8");
t->addConfFileProperty("default","filter_param_internal_pressure","4");
t->addConfFileProperty("default","filter_param_temperature","4");
t->addConfFileProperty("default","filter_param_water","4");
t->addConfFileProperty("default","internalPressureFactor","152166.666666667");
t->addConfFileProperty("default","internalPressureOffset","10555.555555556");
t->addConfFileProperty("default","temperatureFactor","330.0");
t->addConfFileProperty("default","temperatureOffset","-60.0");
t->addConfFileProperty("default","smooth_factor","0.7");
t->addFullfillment("Dev::Sensors::DepthReaderAvalon");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
t->addFullfillment("Base::ZProviderSrv");
	t->addProperty("can_id", ConfigurationModel::INT);
	t->addProperty("filter_param_internal_pressure", ConfigurationModel::INT);
	t->addProperty("filter_param_temperature", ConfigurationModel::INT);
	t->addProperty("filter_param_water", ConfigurationModel::INT);
	t->addProperty("filter_param_external_pressure", ConfigurationModel::INT);
	t->addProperty("externalPressureFactor", ConfigurationModel::DOUBLE);
	t->addProperty("internalPressureFactor", ConfigurationModel::DOUBLE);
	t->addProperty("internalPressureOffset", ConfigurationModel::DOUBLE);
	t->addProperty("temperatureFactor", ConfigurationModel::DOUBLE);
	t->addProperty("temperatureOffset", ConfigurationModel::DOUBLE);
	t->addProperty("smooth_factor", ConfigurationModel::DOUBLE);
	t->addProperty("covariance_depth", ConfigurationModel::DOUBLE);
	t->addProperty("covariance_depth_velocity", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("WallOrientationCorrection::OrientationInMap");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","map_frame","map");
t->addConfFileProperty("default","world_frame","world_orientation");
t->addConfFileProperty("default","orientation_in_world_period","0.01");
t->addConfFileProperty("default","transformer_max_latency","0.2");
t->addConfFileProperty("default","transformer_status_period","1.0");
t->addConfFileProperty("halle","map_frame","map_halle");
t->addConfFileProperty("sauce","map_frame","map_sauce");
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_in_world_period", ConfigurationModel::DOUBLE);
	t->addProperty("map_frame", ConfigurationModel::STRING);
	t->addProperty("world_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("WallOrientationCorrection::Task");
(void)t;
t->addEvent("estimate_wall_orientation");
t->addEvent("missing_transformation");
t->addEvent("valid_wall_fix");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","ransac_max_distance","0.3");
t->addConfFileProperty("default","ransac_min_inlier","0.5");
t->addConfFileProperty("default","wall_angle_sigma","0.1");
t->addConfFileProperty("default","wall_candidate_count","3");
t->addConfFileProperty("default","wall_distance_sigma","0.2");
t->addConfFileProperty("default","initial_wall_direction","{rad => 0.0}");
t->addConfFileProperty("default","left_opening_angle","{rad => 1.1}");
t->addConfFileProperty("default","right_opening_angle","{rad => 1.1}");
t->addConfFileProperty("default","body_frame","body");
t->addConfFileProperty("default","odometry_frame","local_orientation");
t->addConfFileProperty("default","sonar_frame","sonar");
t->addConfFileProperty("default","target_frame","world_orientation");
t->addConfFileProperty("default","wall_frame","reference_wall_sauce");
t->addConfFileProperty("default","world_frame","world_orientation");
t->addConfFileProperty("default","orientation_samples_period","0.01");
t->addConfFileProperty("default","sonarbeam_feature_period","0.1");
t->addConfFileProperty("default","transformer_max_latency","0.5");
t->addConfFileProperty("default","transformer_status_period","1.0");
t->addConfFileProperty("wall_left","initial_wall_direction","{rad => 1.57}");
t->addConfFileProperty("wall_left","left_opening_angle","{rad => 1.1}");
t->addConfFileProperty("wall_left","right_opening_angle","{rad => 1.1}");
t->addConfFileProperty("wall_right","initial_wall_direction","{rad => -1.57}");
t->addConfFileProperty("wall_right","left_opening_angle","{rad => 1.1}");
t->addConfFileProperty("wall_right","right_opening_angle","{rad => 1.1}");
	t->addProperty("ransac_min_inlier", ConfigurationModel::DOUBLE);
	t->addProperty("ransac_max_distance", ConfigurationModel::DOUBLE);
	t->addProperty("wall_distance_sigma", ConfigurationModel::DOUBLE);
	t->addProperty("wall_angle_sigma", ConfigurationModel::DOUBLE);
	t->addProperty("wall_candidate_count", ConfigurationModel::INT);
	t->addProperty("target_frame", ConfigurationModel::STRING);
	t->addProperty("enable_debug", ConfigurationModel::BOOL);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("sonarbeam_feature_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
	t->addProperty("odometry_frame", ConfigurationModel::STRING);
	t->addProperty("wall_frame", ConfigurationModel::STRING);
	t->addProperty("world_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("StructuredLight::Calibration");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("laser_scan_period", ConfigurationModel::DOUBLE);
	t->addProperty("calibration_period", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("StructuredLight::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("display_diff", ConfigurationModel::BOOL);
	t->addProperty("debug_level", ConfigurationModel::INT);
}
{
auto t = new Task("AuvControl::OptimalHeadingController");
(void)t;
t->addEvent("wait_for_orientation_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default","keep_position_on_exception","true");
t->addConfFileProperty("default","optimal_heading","0.0");
t->addConfFileProperty("default","optimal_heading_distance","999.0");
t->addConfFileProperty("default","timeout_cascade","1.0");
t->addConfFileProperty("default","timeout_in","1.0");
t->addConfFileProperty("no_xy","expected_inputs","{linear => [false, false, true], angular => [true, true, true]}");
t->addConfFileProperty("no_xyz","expected_inputs","{linear => [false, false, false], angular => [true, true, true]}");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
	t->addProperty("optimal_heading", ConfigurationModel::DOUBLE);
	t->addProperty("optimal_heading_distance", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("FogKvh::Dsp3000Task");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","port","/dev/ttyS3");
t->addConfFileProperty("default","timeout","100");
t->addFullfillment("Dev::Sensors::KVH::DSP3000");
t->addFullfillment("Base::RotationSrv");
	t->addProperty("timeout", ConfigurationModel::INT);
	t->addProperty("port", ConfigurationModel::STRING);
}
{
auto t = new Task("AuvControl::MotionCommand2DConverter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("RawControlCommandConverter::Position");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::WaypointNavigator");
(void)t;
t->addEvent("following_waypoints");
t->addEvent("keep_waypoint");
t->addEvent("pose_sample_missing");
t->addEvent("wait_for_waypoints");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::ConstantCommandGroundAvoidance");
(void)t;
t->addEvent("invalid_depth_reading");
t->addEvent("invalid_negative_altimeter_reading");
t->addEvent("invalid_target_depth_config");
t->addEvent("no_altimeter_reading");
t->addEvent("no_depth_reading");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","cmd","{time => {microseconds => 0}, linear => {data => [NaN, NaN, NaN]}, angular => {data => [NaN, NaN, NaN]}}");
t->addConfFileProperty("default","minimal_ground_distance","0.75");
t->addConfFileProperty("default","use_as_constant_task","true");
t->addConfFileProperty("avoid","use_as_constant_task","false");
	t->addProperty("use_as_constant_task", ConfigurationModel::BOOL);
	t->addProperty("minimal_ground_distance", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("RawControlCommandConverter::Movement");
(void)t;
t->addEvent("got_pose_without_depth");
t->addEvent("should_do_ground_following_without_ground_distance");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","diveScale","10.0");
t->addConfFileProperty("default","turnScale","0.4");
t->addConfFileProperty("default","delta_depth_control","false");
	t->addProperty("diveScale", ConfigurationModel::DOUBLE);
	t->addProperty("turnScale", ConfigurationModel::DOUBLE);
	t->addProperty("absolute_heading", ConfigurationModel::BOOL);
	t->addProperty("do_ground_following", ConfigurationModel::BOOL);
	t->addProperty("delta_depth_control", ConfigurationModel::BOOL);
}
{
auto t = new Task("AuvControl::ConstantCommandGroundFollower");
(void)t;
t->addEvent("invalid_depth_reading");
t->addEvent("invalid_negative_altimeter_reading");
t->addEvent("invalid_target_depth_config");
t->addEvent("no_altimeter_reading");
t->addEvent("no_depth_reading");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("use_as_constant_task", ConfigurationModel::BOOL);
}
{
auto t = new Task("AuvControl::ConstantCommand");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","cmd","{time => {microseconds => 0}, linear => {data => [NaN, NaN, NaN]}, angular => {data => [NaN, NaN, NaN]}}");
t->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto t = new Task("SonarFeatureEstimator::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","best_values_size","100");
t->addConfFileProperty("default","derivative_history_length","3");
t->addConfFileProperty("default","enable_debug_output","false");
t->addConfFileProperty("default","feature_threshold","0.6");
t->addConfFileProperty("default","plain_length","0.1");
t->addConfFileProperty("default","plain_threshold","0.9");
t->addConfFileProperty("default","proportional_value_threshold","0.5");
t->addConfFileProperty("default","signal_balancing","0.2");
t->addConfFileProperty("default","signal_threshold","1.5");
t->addConfFileProperty("default","enforce_line_rate","0.5");
t->addConfFileProperty("default","minimum_enforce_line_value","1.0");
t->addConfFileProperty("default","enforce_line_beam_covariance","0.2");
t->addConfFileProperty("default","avalon_boundary_box_size","1.2");
t->addConfFileProperty("wall_servoing","feature_threshold","0.7");
t->addConfFileProperty("simulation","derivative_history_length","1");
	t->addProperty("proportional_value_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("signal_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("derivative_history_length", ConfigurationModel::INT);
	t->addProperty("feature_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("best_values_size", ConfigurationModel::INT);
	t->addProperty("signal_balancing", ConfigurationModel::DOUBLE);
	t->addProperty("plain_length", ConfigurationModel::DOUBLE);
	t->addProperty("plain_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("enforce_line_rate", ConfigurationModel::DOUBLE);
	t->addProperty("minimum_enforce_line_value", ConfigurationModel::DOUBLE);
	t->addProperty("enforce_line_beam_covariance", ConfigurationModel::DOUBLE);
	t->addProperty("avalon_boundary_box_size", ConfigurationModel::DOUBLE);
	t->addProperty("enable_debug_output", ConfigurationModel::BOOL);
}
{
auto t = new Task("SonarTritech::Profiling");
(void)t;
t->addEvent("invalid_configuration");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("baudrate", ConfigurationModel::INT);
	t->addProperty("read_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("write_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("configure_timeout", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("SonarBlueview::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","fluidType","0");
t->addConfFileProperty("default","gain","2.0");
t->addConfFileProperty("default","hostname","192.168.128.16");
t->addConfFileProperty("default","imageRes","4");
t->addConfFileProperty("default","maxRange","30.0");
t->addConfFileProperty("default","minRange","1.0");
t->addConfFileProperty("default","port","1149");
t->addConfFileProperty("default","rangeRes","0.0");
t->addConfFileProperty("default","soundSpeed","1536");
t->addConfFileProperty("default","tvgSlope","0.0");
t->addConfFileProperty("default","tx","1");
t->addFullfillment("Dev::Sensors::BlueView");
t->addFullfillment("Base::ImageProviderSrv");
	t->addProperty("hostname", ConfigurationModel::STRING);
	t->addProperty("port", ConfigurationModel::INT);
	t->addProperty("minRange", ConfigurationModel::DOUBLE);
	t->addProperty("maxRange", ConfigurationModel::DOUBLE);
	t->addProperty("gain", ConfigurationModel::DOUBLE);
	t->addProperty("tvgSlope", ConfigurationModel::DOUBLE);
	t->addProperty("rangeRes", ConfigurationModel::DOUBLE);
	t->addProperty("fluidType", ConfigurationModel::INT);
	t->addProperty("soundSpeed", ConfigurationModel::INT);
	t->addProperty("imageRes", ConfigurationModel::INT);
	t->addProperty("tx", ConfigurationModel::INT);
}
{
auto t = new Task("SonarTritech::Echosounder");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","baudrate","115200");
t->addConfFileProperty("default","echo_sounder_timeout","1000.0");
t->addConfFileProperty("default","ground_frame","echosounder_frame");
t->addConfFileProperty("default","port","/dev/ttyS0");
t->addFullfillment("Dev::Echosounder");
t->addFullfillment("Base::GroundDistanceSrv");
	t->addProperty("ground_frame", ConfigurationModel::STRING);
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("baudrate", ConfigurationModel::INT);
	t->addProperty("echo_sounder_timeout", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AuvControl::AccelerationController");
(void)t;
t->addEvent("invalid_name_in_limits");
t->addEvent("wrong_size_of_controlmodes");
t->addEvent("wrong_size_of_limits");
t->addEvent("wrong_size_of_names");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","control_modes","[]");
t->addConfFileProperty("default","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default","keep_position_on_exception","true");
t->addConfFileProperty("default","limits","{names => [right, left, dive, pitch, strave, yaw], elements => [{min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -0.5}, max => {position => NaN, speed => NaN, effort => NaN, raw => 0.5}}]}");
t->addConfFileProperty("default","matrix","{rows => 6, cols => 6, data => [0.0, 0.0, -0.35, 0.0, -0.75, 0.0, 0.0, 0.0, -0.75, 0.0, 0.25, 0.0, -0.63, 0.0, 0.0, 0.0, 0.0, 0.0, 0.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.15, 0.0, 0.0, 0.0, 0.75, 0.0, 0.75, 0.0, 0.0, 0.0, 0.6]}");
t->addConfFileProperty("default","timeout_cascade","1.0");
t->addConfFileProperty("default","timeout_in","1.0");
t->addConfFileProperty("default","names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("default_simulation","control_modes","[]");
t->addConfFileProperty("default_simulation","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default_simulation","keep_position_on_exception","true");
t->addConfFileProperty("default_simulation","limits","{names => [right, left, dive, pitch, strave, yaw], elements => [{min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}, {min => {position => NaN, speed => NaN, effort => NaN, raw => -1.0}, max => {position => NaN, speed => NaN, effort => NaN, raw => 1.0}}]}");
t->addConfFileProperty("default_simulation","matrix","{rows => 6, cols => 6, data => [0.0, 0.0, 0.02, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.1, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]}");
t->addConfFileProperty("default_simulation","timeout_cascade","1.0");
t->addConfFileProperty("default_simulation","timeout_in","1.0");
t->addConfFileProperty("default_simulation","names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("cutoff","limits","{names => [right, left, dive, pitch, strave, yaw], elements => [{min => {raw => 0.0}, max => {raw => 0.0}}, {min => {raw => 0.0}, max => {raw => 0.0}}, {min => {raw => 0.0}, max => {raw => 0.0}}, {min => {raw => 0.0}, max => {raw => 0.0}}, {min => {raw => 0.0}, max => {raw => 0.0}}, {min => {raw => 0.0}, max => {raw => 0.0}}]}");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
}
{
auto t = new Task("SonarTritech::Micron");
(void)t;
t->addEvent("invalid_configuration");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","config","{left_limit => {rad => 0.05}, right_limit => {rad => -0.05}, angular_resolution => {rad => 0.05}, max_distance => 60.0, min_distance => 0.25, resolution => 0.1, invert => false, speed_of_sound => 1539.0, gain => 0.9, low_resolution => false, continous => true}");
t->addConfFileProperty("default","port","/dev/ttyS1");
t->addConfFileProperty("default","read_timeout","0.5");
t->addConfFileProperty("default","write_timeout","0.1");
t->addConfFileProperty("default","configure_timeout","10.0");
t->addConfFileProperty("default","echo_sounder_timeout","0.0");
t->addConfFileProperty("maritime_hall","config","{continous => true, gain => 0.5, max_distance => 30.0, resolution => 0.1}");
t->addConfFileProperty("studiobad","config","{continous => true, gain => 0.5, max_distance => 15.0, resolution => 0.1}");
t->addConfFileProperty("wall_front","config","{continous => false, gain => 0.2, max_distance => 10.0, resolution => 0.1, left_limit => {rad => 1.01}, right_limit => {rad => -1.01}}");
t->addConfFileProperty("wall_front_far","config","{continous => false, gain => 0.8, max_distance => 25.0, resolution => 0.1, left_limit => {rad => 0.393}, right_limit => {rad => -0.393}}");
t->addConfFileProperty("wall_left","config","{continous => false, gain => 0.2, max_distance => 10.0, resolution => 0.1, left_limit => {rad => 2.67}, right_limit => {rad => 0.0}}");
t->addConfFileProperty("wall_right","config","{continous => false, gain => 0.2, max_distance => 10.0, resolution => 0.1, left_limit => {rad => 0.0}, right_limit => {rad => -2.67}}");
t->addConfFileProperty("dual_wall_servoing","config","{continous => false, gain => 0.2, max_distance => 10.0, resolution => 0.1, left_limit => {rad => 0.094}, right_limit => {rad => -1.67}}");
t->addConfFileProperty("straight_front","config","{continous => false, gain => 0.9, max_distance => 60.0, resolution => 0.1, left_limit => {rad => 0.05}, right_limit => {rad => -0.05}}");
t->addConfFileProperty("asv_search","config","{continous => false, gain => 0.55, max_distance => 20.0, resolution => 0.1, left_limit => {rad => 0.7853}, right_limit => {rad => -0.7853}}");
t->addConfFileProperty("new_wall_servoing_right","config","{continous => false, gain => 0.5, max_distance => 30.0, resolution => 0.1, left_limit => {rad => 0.7}, right_limit => {rad => -2.3}}");
t->addConfFileProperty("structure_servoing_front","config","{continous => false, gain => 0.2, max_distance => 6.0, resolution => 0.1, left_limit => {rad => 1.01}, right_limit => {rad => -1.01}}");
t->addConfFileProperty("default_rear","config","{left_limit => {rad => 3.141592653589793}, right_limit => {rad => 3.141592653589793}, angular_resolution => {rad => 0.08726646259971647}, max_distance => 15.0, min_distance => 0.25, resolution => 0.1, speed_of_sound => 1500.0, gain => 0.2, low_resolution => false, continous => true}");
t->addConfFileProperty("default_rear","port","/dev/ttyS5");
t->addConfFileProperty("default_rear","read_timeout","0.5");
t->addConfFileProperty("default_rear","write_timeout","0.1");
t->addConfFileProperty("default_rear","configure_timeout","10.0");
t->addConfFileProperty("default_rear","echo_sounder_timeout","0.5");
t->addConfFileProperty("sonar_rear_ground","config","{continous => false, max_distance => 20.0, resolution => 0.1, left_limit => {rad => 1.96349540849362}, right_limit => {rad => 1.17809724509617}}");
t->addConfFileProperty("sonar_rear_ground","port","/dev/ttyS5");
t->addConfFileProperty("sonar_rear_right","config","{gain => 0.2, continous => false, max_distance => 10.0, resolution => 0.1, left_limit => {rad => 0.094}, right_limit => {rad => -0.094}}");
t->addConfFileProperty("sonar_rear_right","port","/dev/ttyS5");
t->addConfFileProperty("straight_rear","config","{gain => 0.9, continous => false, max_distance => 60.0, resolution => 0.1, left_limit => {rad => 0.0}, right_limit => {rad => -0.2}}");
t->addConfFileProperty("straight_rear","port","/dev/ttyS5");
t->addFullfillment("Dev::Micron");
t->addFullfillment("Base::GroundDistanceSrv");
t->addFullfillment("Base::SonarScanProviderSrv");
	t->addProperty("ground_frame", ConfigurationModel::STRING);
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("baudrate", ConfigurationModel::INT);
	t->addProperty("read_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("write_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("configure_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("echo_sounder_timeout", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("FrameDemultiplexer::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("used_sequences", ConfigurationModel::INT);
}
{
auto t = new Task("AuvControl::AlignedToBody");
(void)t;
t->addEvent("orientation_sample_invalid");
t->addEvent("wait_for_orientation_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default","keep_position_on_exception","true");
t->addConfFileProperty("default","timeout_cascade","1.0");
t->addConfFileProperty("default","timeout_in","1.0");
t->addConfFileProperty("default","timeout_orientation","1.0");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
	t->addProperty("timeout_orientation", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Interfaces::ActuatorCommandWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::WorldToAligned");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default","keep_position_on_exception","true");
t->addConfFileProperty("default","nan_on_keep_position","true");
t->addConfFileProperty("default","position_control","true");
t->addConfFileProperty("default","timeout_cascade","1.0");
t->addConfFileProperty("default","timeout_in","1.0");
t->addConfFileProperty("no_xy","expected_inputs","{linear => [false, false, true], angular => [true, true, true]}");
t->addConfFileProperty("no_xyz","expected_inputs","{linear => [false, false, false], angular => [true, true, true]}");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
	t->addProperty("position_control", ConfigurationModel::BOOL);
}
{
auto t = new Task("CameraUnicap::CameraTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","width","648");
t->addConfFileProperty("default","height","468");
t->addConfFileProperty("default","fps","5");
t->addConfFileProperty("default","whitebalance_mode","auto");
t->addConfFileProperty("default","gain","2");
t->addConfFileProperty("default","exposure","2");
t->addConfFileProperty("default","trigger_mode","fixed");
t->addConfFileProperty("default","binning","4");
t->addConfFileProperty("default","output_format","rgb3");
t->addConfFileProperty("left_unicap_camera","camera_id","2");
t->addConfFileProperty("right_unicap_camera","camera_id","1");
	t->addProperty("camera_id", ConfigurationModel::INT);
	t->addProperty("width", ConfigurationModel::INT);
	t->addProperty("height", ConfigurationModel::INT);
	t->addProperty("output_format", ConfigurationModel::STRING);
	t->addProperty("frame_buffer_size", ConfigurationModel::INT);
	t->addProperty("fps", ConfigurationModel::INT);
	t->addProperty("whitebalance_mode", ConfigurationModel::STRING);
	t->addProperty("whitebalance_blue", ConfigurationModel::INT);
	t->addProperty("whitebalance_red", ConfigurationModel::INT);
	t->addProperty("gain", ConfigurationModel::INT);
	t->addProperty("exposure", ConfigurationModel::INT);
	t->addProperty("trigger_mode", ConfigurationModel::STRING);
	t->addProperty("binning", ConfigurationModel::INT);
}
{
auto t = new Task("AuvControl::PIDController");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("unsure_pose_sample");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("default","keep_position_on_exception","true");
t->addConfFileProperty("default","nan_on_keep_position","true");
t->addConfFileProperty("default","timeout_cascade","1.0");
t->addConfFileProperty("default","timeout_in","1.0");
t->addConfFileProperty("default","world_frame","false");
t->addConfFileProperty("dummy","expected_inputs","{linear => [true, true, true], angular => [true, true, true]}");
t->addConfFileProperty("dummy","keep_position_on_exception","true");
t->addConfFileProperty("dummy","nan_on_keep_position","true");
t->addConfFileProperty("dummy","timeout_cascade","1.0");
t->addConfFileProperty("dummy","timeout_in","1.0");
t->addConfFileProperty("dummy","world_frame","false");
t->addConfFileProperty("no_xy","expected_inputs","{linear => [false, false, true], angular => [true, true, true]}");
t->addConfFileProperty("position_parallel","position_control","true");
t->addConfFileProperty("position_parallel","use_parallel_pid_settings","true");
t->addConfFileProperty("position_parallel","parallel_pid_settings","{linear => [{Ts => 0.01, Kp => 0.1, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.65, YMax => 0.65}, {Ts => 0.01, Kp => 0.1, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.13, YMax => 0.13}, {Ts => 0.01, Kp => 0.2, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.18, YMax => 0.3}], angular => [{Ts => 0.01, Kp => 0.0, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.0, YMax => 0.0}, {Ts => 0.01, Kp => 0.5, Ki => 0.5, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.2, YMax => 0.2}, {Ts => 0.01, Kp => 0.7, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.6, YMax => 0.6}]}");
t->addConfFileProperty("velocity_parallel","position_control","false");
t->addConfFileProperty("velocity_parallel","use_parallel_pid_settings","true");
t->addConfFileProperty("velocity_parallel","parallel_pid_settings","{linear => [{Ts => 0.01, Kp => 7.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 7.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 7.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}], angular => [{Ts => 0.01, Kp => 0.0, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 7.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 7.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}]}");
t->addConfFileProperty("position_simulation_parallel","position_control","true");
t->addConfFileProperty("position_simulation_parallel","use_parallel_pid_settings","true");
t->addConfFileProperty("position_simulation_parallel","parallel_pid_settings","{linear => [{Ts => 0.01, Kp => 0.3, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.98, YMax => 0.98}, {Ts => 0.01, Kp => 0.5, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.163, YMax => 0.163}, {Ts => 0.01, Kp => 0.5, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.13, YMax => 0.2}], angular => [{Ts => 0.01, Kp => 0.0, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.0, YMax => 0.0}, {Ts => 0.01, Kp => 2.0, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.1, YMax => 0.1}, {Ts => 0.01, Kp => 0.5, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -0.25, YMax => 0.25}]}");
t->addConfFileProperty("velocity_simulation_parallel","position_control","false");
t->addConfFileProperty("velocity_simulation_parallel","use_parallel_pid_settings","true");
t->addConfFileProperty("velocity_simulation_parallel","parallel_pid_settings","{linear => [{Ts => 0.01, Kp => 18.0, Ki => 15.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 15.0, Ki => 4.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 70.0, Ki => 20.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}], angular => [{Ts => 0.01, Kp => 0.0, Ki => 0.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => -1.0, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 5.0, Ki => 2.0, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}, {Ts => 0.01, Kp => 9.4, Ki => 4.27, Kd => 0.0, N => 0.0, B => 1.0, Tt => 0.01, YMin => -1.0, YMax => 1.0}]}");
t->addConfFileProperty("no_x","expected_inputs","{linear => [false, true, true], angular => [true, true, true]}");
t->addConfFileProperty("no_y","expected_inputs","{linear => [true, false, true], angular => [true, true, true]}");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
	t->addProperty("use_parallel_pid_settings", ConfigurationModel::BOOL);
	t->addProperty("variance_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("position_control", ConfigurationModel::BOOL);
	t->addProperty("world_frame", ConfigurationModel::BOOL);
}
{
auto t = new Task("PoseEstimation::VehiclePoseEstimator");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("max_time_delta", ConfigurationModel::DOUBLE);
	t->addProperty("target_frame", ConfigurationModel::STRING);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("velocity_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("imu_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("PoseEstimation::HighDelayPoseEstimator");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("max_time_delta", ConfigurationModel::DOUBLE);
	t->addProperty("target_frame", ConfigurationModel::STRING);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("pose_samples_slow_period", ConfigurationModel::DOUBLE);
	t->addProperty("xy_position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("xy_map_frame", ConfigurationModel::STRING);
	t->addProperty("target_map_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("PoseEstimation::UWPoseEstimator");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","body_frame","body");
t->addConfFileProperty("default","imu_frame","imu");
t->addConfFileProperty("default","lbl_frame","lbl");
t->addConfFileProperty("default","dvl_frame","dvl");
t->addConfFileProperty("default","pressure_sensor_frame","pressure_sensor");
t->addConfFileProperty("default","target_frame","world");
t->addConfFileProperty("default","transformer_max_latency","0.1");
t->addConfFileProperty("default","transformer_status_period","1.0");
t->addConfFileProperty("default","model_velocity_samples_period","0.01");
t->addConfFileProperty("default","dvl_velocity_samples_period","0.083");
t->addConfFileProperty("default","orientation_samples_period","0.01");
t->addConfFileProperty("default","lbl_position_samples_period","0.01");
t->addConfFileProperty("default","xy_position_samples_period","0.01");
t->addConfFileProperty("default","depth_samples_period","0.0625");
t->addConfFileProperty("default","filter_type","EKF");
t->addConfFileProperty("default","max_time_delta","2.0");
t->addConfFileProperty("default","initial_state","{position => {data => [-10.0, 22.0, 0.0]}}");
t->addConfFileProperty("avalon","lbl_frame","body");
t->addConfFileProperty("avalon","dvl_frame","body");
t->addConfFileProperty("dagon","lbl_frame","body");
t->addConfFileProperty("sauce","target_frame","map_sauce");
t->addConfFileProperty("halle","target_frame","map_halle");
	t->addProperty("max_time_delta", ConfigurationModel::DOUBLE);
	t->addProperty("target_frame", ConfigurationModel::STRING);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("depth_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("dvl_velocity_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("model_velocity_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("lbl_position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("xy_position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("gps_position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("xyz_position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("imu_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
	t->addProperty("pressure_sensor_frame", ConfigurationModel::STRING);
	t->addProperty("dvl_frame", ConfigurationModel::STRING);
	t->addProperty("lbl_frame", ConfigurationModel::STRING);
	t->addProperty("gps_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("SonarWallHough::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","angleDelta","0.0");
t->addConfFileProperty("default","anglesPerBin","2");
t->addConfFileProperty("default","avalonSonarPose","0.5");
t->addConfFileProperty("default","basinHeight","20.0");
t->addConfFileProperty("default","basinWidth","23.0");
t->addConfFileProperty("default","continous_write","false");
t->addConfFileProperty("default","correctToFirstPosition","true");
t->addConfFileProperty("default","distancesPerBin","4");
t->addConfFileProperty("default","filterThreshold","50");
t->addConfFileProperty("default","gain","10");
t->addConfFileProperty("default","maxDistance","500");
t->addConfFileProperty("default","minDistance","1.0");
t->addConfFileProperty("default","minLineVotesRatio","0.05");
t->addConfFileProperty("default","sensorAngularResolution","1.8");
t->addConfFileProperty("default","show_debug","true");
t->addConfFileProperty("default","usePositionSamples","false");
t->addConfFileProperty("default","withMinimumFilter","true");
t->addConfFileProperty("default","ignoreOrientation","true");
t->addConfFileProperty("default","sensorAngularTolerance","10.0");
t->addConfFileProperty("default_old","angleDelta","0.0");
t->addConfFileProperty("default_old","anglesPerBin","2");
t->addConfFileProperty("default_old","basinHeight","50.0");
t->addConfFileProperty("default_old","basinWidth","120.0");
t->addConfFileProperty("default_old","distancesPerBin","4");
t->addConfFileProperty("default_old","filterThreshold","50");
t->addConfFileProperty("default_old","maxDistance","600");
t->addConfFileProperty("default_old","minDistance","10.0");
t->addConfFileProperty("default_old","minLineVotesRatio","0.1");
t->addConfFileProperty("default_old","sensorAngularResolution","2.5");
t->addConfFileProperty("default_old","withMinimumFilter","true");
t->addConfFileProperty("default_old","continous_write","false");
t->addConfFileProperty("default_old","show_debug","true");
t->addConfFileProperty("simulation","basinHeight","50.0");
t->addConfFileProperty("simulation","basinWidth","120.0");
t->addConfFileProperty("simulation","maxDistance","400");
t->addConfFileProperty("simulation","minDistance","2.5");
t->addConfFileProperty("simulation","withMinimumFilter","false");
t->addConfFileProperty("sauce","angleDelta","0.0");
t->addConfFileProperty("sauce","anglesPerBin","2");
t->addConfFileProperty("sauce","avalonSonarPose","0.5");
t->addConfFileProperty("sauce","basinHeight","50.0");
t->addConfFileProperty("sauce","basinWidth","120.0");
t->addConfFileProperty("sauce","continous_write","false");
t->addConfFileProperty("sauce","correctToFirstPosition","true");
t->addConfFileProperty("sauce","distancesPerBin","4");
t->addConfFileProperty("sauce","filterThreshold","50");
t->addConfFileProperty("sauce","gain","8");
t->addConfFileProperty("sauce","ignoreOrientation","true");
t->addConfFileProperty("sauce","maxDistance","600");
t->addConfFileProperty("sauce","minDistance","2.5");
t->addConfFileProperty("sauce","minLineVotesRatio","0.1");
t->addConfFileProperty("sauce","origin_translation","{data => [-60.0, 25.0, 0.0]}");
t->addConfFileProperty("sauce","pos_covar","1.5");
t->addConfFileProperty("sauce","sensorAngularResolution","1.8");
t->addConfFileProperty("sauce","sensorAngularTolerance","10.0");
t->addConfFileProperty("sauce","show_debug","true");
t->addConfFileProperty("sauce","usePositionSamples","true");
t->addConfFileProperty("sauce","withMinimumFilter","false");
	t->addProperty("sensorAngularResolution", ConfigurationModel::DOUBLE);
	t->addProperty("sensorAngularTolerance", ConfigurationModel::DOUBLE);
	t->addProperty("anglesPerBin", ConfigurationModel::INT);
	t->addProperty("maxDistance", ConfigurationModel::INT);
	t->addProperty("filterThreshold", ConfigurationModel::INT);
	t->addProperty("withMinimumFilter", ConfigurationModel::BOOL);
	t->addProperty("minDistance", ConfigurationModel::DOUBLE);
	t->addProperty("distancesPerBin", ConfigurationModel::INT);
	t->addProperty("minLineVotesRatio", ConfigurationModel::DOUBLE);
	t->addProperty("angleDelta", ConfigurationModel::DOUBLE);
	t->addProperty("basinHeight", ConfigurationModel::DOUBLE);
	t->addProperty("basinWidth", ConfigurationModel::DOUBLE);
	t->addProperty("gain", ConfigurationModel::INT);
	t->addProperty("show_debug", ConfigurationModel::BOOL);
	t->addProperty("continous_write", ConfigurationModel::BOOL);
	t->addProperty("usePositionSamples", ConfigurationModel::BOOL);
	t->addProperty("correctToFirstPosition", ConfigurationModel::BOOL);
	t->addProperty("avalonSonarPose", ConfigurationModel::DOUBLE);
	t->addProperty("ignoreOrientation", ConfigurationModel::BOOL);
	t->addProperty("pos_covar", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("PoseEstimation::BaseTask");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("max_time_delta", ConfigurationModel::DOUBLE);
	t->addProperty("target_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("AuvControl::BasePIDController");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("unsure_pose_sample");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
	t->addProperty("use_parallel_pid_settings", ConfigurationModel::BOOL);
	t->addProperty("variance_threshold", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AuvHelper::DepthAndOrientationFusion");
(void)t;
t->addEvent("got_invalid_depth");
t->addEvent("got_invalid_orientation");
t->addEvent("waiting_for_depth");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","aggregator_max_latency","0.5");
t->addConfFileProperty("default","depth_samples_period","0.01");
t->addConfFileProperty("default","heading_offset","0.0");
t->addConfFileProperty("default","orientation_samples_period","0.01");
t->addConfFileProperty("default","stream_aligner_status_period","1.0");
t->addConfFileProperty("default","use_initial_heading","false");
t->addConfFileProperty("default","ground_distance_period","0.01");
t->addConfFileProperty("default","depth_correction_buffer_size","100");
t->addConfFileProperty("default","ground_depth","-8.2");
	t->addProperty("heading_offset", ConfigurationModel::DOUBLE);
	t->addProperty("use_initial_heading", ConfigurationModel::BOOL);
	t->addProperty("depth_correction_buffer_size", ConfigurationModel::INT);
	t->addProperty("minimum_buffer_size", ConfigurationModel::INT);
	t->addProperty("ground_depth", ConfigurationModel::DOUBLE);
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("depth_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("ground_distance_period", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("XsensImu::Task");
(void)t;
t->addEvent("driver_error");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","max_timeouts","0");
t->addConfFileProperty("default","port","/dev/ttyS2");
t->addConfFileProperty("default","scenario","human");
t->addConfFileProperty("default","timeout","100");
t->addFullfillment("Dev::Sensors::XsensAHRS");
t->addFullfillment("Base::CalibratedIMUSensorsSrv");
t->addFullfillment("Base::IMUSensorsSrv");
t->addFullfillment("Base::OrientationSrv");
t->addFullfillment("Base::TimestampInputSrv");
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("timeout", ConfigurationModel::INT);
	t->addProperty("scenario", ConfigurationModel::STRING);
	t->addProperty("imu_frame", ConfigurationModel::STRING);
	t->addProperty("world_frame", ConfigurationModel::STRING);
	t->addProperty("max_timeouts", ConfigurationModel::INT);
}
{
auto t = new Task("Controldev::Remote");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
t->addFullfillment("Dev::Controldev::Joystick");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Controldev::GenericRawToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("maxSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("maxRotationSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("translation_axis_deadzone", ConfigurationModel::DOUBLE);
	t->addProperty("rotation_axis_deadzone", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Controldev::RawWheelToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("minSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("maxSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("maxRotationSpeed", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AuvControl::Base");
(void)t;
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("keep_position_on_exception", ConfigurationModel::BOOL);
	t->addProperty("nan_on_keep_position", ConfigurationModel::BOOL);
	t->addProperty("timeout_in", ConfigurationModel::DOUBLE);
	t->addProperty("timeout_cascade", ConfigurationModel::DOUBLE);
	t->addProperty("safe_mode", ConfigurationModel::BOOL);
}
{
auto t = new Task("Controldev::RawJoystickToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("minSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("maxSpeed", ConfigurationModel::DOUBLE);
	t->addProperty("maxRotationSpeed", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Controldev::SliderboxTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("device", ConfigurationModel::STRING);
}
{
auto t = new Task("Controldev::SteeringWheelTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::Mouse3DTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Controldev::Mouse3D");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Controldev::JoyPadTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("device", ConfigurationModel::STRING);
}
{
auto t = new Task("RTT::TaskContext");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::JoystickTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Controldev::Joystick");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("device", ConfigurationModel::STRING);
}
{
auto t = new Task("Controldev::GenericTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Hbridge::CommandWriter");
(void)t;
t->addEvent("bad_input");
t->addEvent("configuration_failed");
t->addEvent("error");
t->addEvent("io_error");
t->addEvent("mode_change_while_running");
t->addEvent("overheat_board");
t->addEvent("overheat_motor");
t->addEvent("over_current");
t->addEvent("protocol_error");
t->addEvent("sensor_failure");
t->addEvent("timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","comTimeout","{microseconds => 1000000}");
t->addConfFileProperty("default","configuration","[{actuator => {name => left, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}, {actuator => {name => right, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}, {actuator => {name => dive, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}, {actuator => {name => pitch, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}, {actuator => {name => strave, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}, {actuator => {name => yaw, maxPWM => 10000, openCircuit => 0, maxMotorTemp => 0, maxBoardTemp => 80, maxCurrent => 3000, maxCurrentCount => 220, timeout => 8000, pwmStepPerMs => 20, controllerInputEncoder => INTERNAL}}]");
t->addFullfillment("Dev::Actuators::Hbridge");
t->addFullfillment("Dev::Bus::CAN::ClientSrv");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
	t->addProperty("comTimeout", ConfigurationModel::INT);
}
{
auto t = new Task("AvalonControl::MotionFeedbackTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","config_value","");
	t->addProperty("config_value", ConfigurationModel::STRING);
}
{
auto t = new Task("AuvRelPosController::Task");
(void)t;
t->addEvent("invalid_position_command");
t->addEvent("timeout");
t->addEvent("waiting_for_position_command");
t->addEvent("waiting_for_valid_bodystate");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","controller_x","{Tt => 0.0, K => 0.5, YMax => 0.8, B => 0.0, N => 0.0, YMin => -0.8, Td => 1.0, Ts => 0.01, Ti => 0.0}");
t->addConfFileProperty("default","controller_y","{Tt => 0.0, K => 0.8, YMax => 0.8, B => 0.0, N => 0.0, YMin => -0.8, Td => 2.0, Ts => 0.01, Ti => 0.0}");
t->addConfFileProperty("default","rel_heading","true");
t->addConfFileProperty("default","rel_z","false");
t->addConfFileProperty("default","timeout","0.0");
t->addConfFileProperty("default","valid_timespan","2.0");
t->addConfFileProperty("absolute_heading","rel_heading","false");
t->addConfFileProperty("relative_heading","rel_heading","true");
t->addFullfillment("Base::AUVRelativeMotionControlledSystemSrv");
t->addFullfillment("Base::AUVRelativeMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("timeout", ConfigurationModel::DOUBLE);
	t->addProperty("valid_timespan", ConfigurationModel::DOUBLE);
	t->addProperty("rel_z", ConfigurationModel::BOOL);
	t->addProperty("rel_heading", ConfigurationModel::BOOL);
}
{
auto t = new Task("OrientationEstimator::BaseEstimator");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","latitude","0.926478944");
t->addConfFileProperty("default","longitude","0.153588974");
t->addConfFileProperty("default","magnetic_declination","0.023561944");
t->addConfFileProperty("default","magnetic_declination_mode","1");
t->addConfFileProperty("default","altitude","12.0");
t->addConfFileProperty("default","dip_angle","1.187696556");
t->addConfFileProperty("default","use_initial_heading","false");
t->addConfFileProperty("default","initial_heading","0.0");
t->addConfFileProperty("default","substract_earth_rotation","true");
t->addConfFileProperty("default","gbiasof","{data => [6.8990327155863e-310, 6.8990327155864e-310, 0.0]}");
t->addConfFileProperty("default","orientation_cov","{data => [0.0035, 0.0, 0.0, 0.0, 0.0035, 0.0, 0.0, 0.0, 3.5e-05]}");
t->addConfFileProperty("default","angular_velocity_cov","{data => [4.76e-05, 0.0, 0.0, 0.0, 5.21e-05, 0.0, 0.0, 0.0, 1.74e-08]}");
t->addConfFileProperty("default","aggregator_max_latency","0.3");
t->addConfFileProperty("default","stream_aligner_status_period","1.0");
t->addConfFileProperty("default","imu_orientation_period","0.01");
t->addConfFileProperty("default","fog_samples_period","0.01");
t->addConfFileProperty("avalon","gbiasof","{data => [-0.0116145, -0.00151598, 3.33985e-05]}");
t->addConfFileProperty("dagon","gbiasof","{data => [-0.00661489, -0.00159815, -1.80834e-05]}");
t->addConfFileProperty("unknown_heading","substract_earth_rotation","false");
t->addConfFileProperty("unknown_heading","use_initial_heading","false");
t->addConfFileProperty("halle","use_initial_heading","true");
t->addConfFileProperty("halle","initial_heading","-2.03");
t->addConfFileProperty("sauce","use_initial_heading","true");
t->addConfFileProperty("sauce","initial_heading","0.0");
t->addConfFileProperty("Bremen","latitude","0.926978312");
t->addConfFileProperty("Bremen","longitude","0.154608945");
t->addConfFileProperty("Bremen","altitude","12.0");
t->addConfFileProperty("Bremen","magnetic_declination","0.03098929");
t->addConfFileProperty("Bremen","magnetic_declination_mode","1");
t->addConfFileProperty("Bremen","dip_angle","1.187778974");
t->addConfFileProperty("ESTEC","latitude","0.911367");
t->addConfFileProperty("ESTEC","longitude","0.07709999");
t->addConfFileProperty("ESTEC","altitude","0.0");
t->addConfFileProperty("ESTEC","magnetic_declination","0.006690428");
t->addConfFileProperty("ESTEC","magnetic_declination_mode","1");
t->addConfFileProperty("ESTEC","dip_angle","0.00663");
t->addConfFileProperty("sauce14","latitude","0.76961941");
t->addConfFileProperty("sauce14","longitude","0.172172367");
t->addConfFileProperty("sauce14","altitude","0.0");
t->addConfFileProperty("sauce14","magnetic_declination","0.037233685");
t->addConfFileProperty("sauce14","magnetic_declination_mode","1");
t->addConfFileProperty("sauce14","dip_angle","1.051037276");
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("imu_orientation_period", ConfigurationModel::DOUBLE);
	t->addProperty("fog_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("latitude", ConfigurationModel::DOUBLE);
	t->addProperty("longitude", ConfigurationModel::DOUBLE);
	t->addProperty("altitude", ConfigurationModel::DOUBLE);
	t->addProperty("magnetic_declination", ConfigurationModel::DOUBLE);
	t->addProperty("magnetic_declination_mode", ConfigurationModel::INT);
	t->addProperty("dip_angle", ConfigurationModel::DOUBLE);
	t->addProperty("use_initial_heading", ConfigurationModel::BOOL);
	t->addProperty("initial_heading", ConfigurationModel::DOUBLE);
	t->addProperty("substract_earth_rotation", ConfigurationModel::BOOL);
}
{
auto t = new Task("WallServoing::DualSonarServoing");
(void)t;
t->addEvent("detected_corner");
t->addEvent("misconfiguration");
t->addEvent("searching_wall");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","exploration_speed","0.2");
t->addConfFileProperty("default","fixed_depth","-2.0");
t->addConfFileProperty("default","opening_angle","0.09");
t->addConfFileProperty("default","servoing_speed","0.25");
t->addConfFileProperty("default","wall_distance","3.0");
	t->addProperty("wall_distance", ConfigurationModel::DOUBLE);
	t->addProperty("fixed_depth", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_speed", ConfigurationModel::DOUBLE);
	t->addProperty("exploration_speed", ConfigurationModel::DOUBLE);
	t->addProperty("opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("enable_debug_output", ConfigurationModel::BOOL);
}
{
auto t = new Task("WallServoing::SingleSonarServoing");
(void)t;
t->addEvent("alignment_complete");
t->addEvent("checking_wall");
t->addEvent("detected_corner");
t->addEvent("lost_wall");
t->addEvent("misconfiguration");
t->addEvent("origin_alignment");
t->addEvent("searching_wall");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","enable_debug_output","true");
t->addConfFileProperty("default","exploration_speed","0.1");
t->addConfFileProperty("default","fading_out_factor","0.01");
t->addConfFileProperty("default","fixed_depth","-1.45");
t->addConfFileProperty("default","servoing_wall_direction","0.0");
t->addConfFileProperty("default","initial_wall_direction","0.0");
t->addConfFileProperty("default","minimal_wall_distance","0.75");
t->addConfFileProperty("default","servoing_speed","0.0");
t->addConfFileProperty("default","wall_distance","4.4");
t->addConfFileProperty("default","left_opening_angle","0.785");
t->addConfFileProperty("default","right_opening_angle","0.785");
t->addConfFileProperty("default","wait_until_start","3.0");
t->addConfFileProperty("default","right_front_angle","0.0");
t->addConfFileProperty("default","left_front_angle","0.0");
t->addConfFileProperty("default","use_front_distance","false");
t->addConfFileProperty("simulation","fading_out_factor","0.01");
t->addConfFileProperty("wall_front","servoing_wall_direction","0.0");
t->addConfFileProperty("wall_front","servoing_speed","0.0");
t->addConfFileProperty("wall_front","left_opening_angle","0.393");
t->addConfFileProperty("wall_front","right_opening_angle","0.393");
t->addConfFileProperty("wall_front","wall_distance","5.0");
t->addConfFileProperty("wall_front_left","servoing_wall_direction","-0.4");
t->addConfFileProperty("wall_front_left","servoing_speed","0.5");
t->addConfFileProperty("wall_front_left","left_opening_angle","1.01");
t->addConfFileProperty("wall_front_left","right_opening_angle","0.785");
t->addConfFileProperty("wall_front_right","servoing_wall_direction","0.4");
t->addConfFileProperty("wall_front_right","servoing_speed","-0.5");
t->addConfFileProperty("wall_front_right","left_opening_angle","0.785");
t->addConfFileProperty("wall_front_right","right_opening_angle","1.01");
t->addConfFileProperty("wall_left","servoing_wall_direction","1.57");
t->addConfFileProperty("wall_left","initial_wall_direction","1.57");
t->addConfFileProperty("wall_left","servoing_speed","-0.8");
t->addConfFileProperty("wall_left","left_opening_angle","1.1");
t->addConfFileProperty("wall_left","right_opening_angle","1.57");
t->addConfFileProperty("wall_right","servoing_wall_direction","-1.57");
t->addConfFileProperty("wall_right","initial_wall_direction","-1.57");
t->addConfFileProperty("wall_right","servoing_speed","0.4");
t->addConfFileProperty("wall_right","left_opening_angle","1.57");
t->addConfFileProperty("wall_right","right_opening_angle","1.1");
t->addConfFileProperty("hold_wall_right","initial_wall_direction","-1.57");
t->addConfFileProperty("hold_wall_right","servoing_wall_direction","-1.57");
t->addConfFileProperty("hold_wall_right","servoing_speed","0.0");
t->addConfFileProperty("hold_wall_right","left_opening_angle","1.1");
t->addConfFileProperty("hold_wall_right","right_opening_angle","1.1");
t->addConfFileProperty("hold_wall_right","wall_distance","5.0");
	t->addProperty("wall_distance", ConfigurationModel::DOUBLE);
	t->addProperty("fixed_depth", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_speed", ConfigurationModel::DOUBLE);
	t->addProperty("exploration_speed", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_wall_direction", ConfigurationModel::DOUBLE);
	t->addProperty("initial_wall_direction", ConfigurationModel::DOUBLE);
	t->addProperty("minimal_wall_distance", ConfigurationModel::DOUBLE);
	t->addProperty("left_opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("right_opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("fading_out_factor", ConfigurationModel::DOUBLE);
	t->addProperty("wait_until_start", ConfigurationModel::DOUBLE);
	t->addProperty("use_motion_model", ConfigurationModel::BOOL);
	t->addProperty("check_distance_threshold", ConfigurationModel::DOUBLE);
	t->addProperty("use_front_distance", ConfigurationModel::BOOL);
	t->addProperty("left_front_angle", ConfigurationModel::DOUBLE);
	t->addProperty("right_front_angle", ConfigurationModel::DOUBLE);
	t->addProperty("enable_debug_output", ConfigurationModel::BOOL);
}
{
auto t = new Task("Interfaces::Servo");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("zero_offset", ConfigurationModel::DOUBLE);
	t->addProperty("lower_sweep_angle", ConfigurationModel::DOUBLE);
	t->addProperty("upper_sweep_angle", ConfigurationModel::DOUBLE);
	t->addProperty("moving_speed", ConfigurationModel::DOUBLE);
	t->addProperty("upper_frame", ConfigurationModel::STRING);
	t->addProperty("lower_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("Buoy::Detector");
(void)t;
t->addEvent("buoy_found");
t->addEvent("no_buoy_found");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","buoy_radius","0.2");
t->addConfFileProperty("default","buoy_timeout","20");
t->addConfFileProperty("default","debug","true");
t->addConfFileProperty("default","debug_gui","true");
t->addConfFileProperty("default","filter_timeout","1.5");
t->addConfFileProperty("default","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("default","hHoughEdgeThreshold","30");
t->addConfFileProperty("default","hSmooth","75");
t->addConfFileProperty("default","hValueMax","255");
t->addConfFileProperty("default","hValueMin","25");
t->addConfFileProperty("default","houghMaxCircle","150");
t->addConfFileProperty("default","houghMinCircle","20");
t->addConfFileProperty("default","hough_debug_h","false");
t->addConfFileProperty("default","hough_debug_s","false");
t->addConfFileProperty("default","hough_debug_v","false");
t->addConfFileProperty("default","hsv_gray","0");
t->addConfFileProperty("default","roi_height","3.0");
t->addConfFileProperty("default","roi_width","3.0");
t->addConfFileProperty("default","roi_x","0.0");
t->addConfFileProperty("default","roi_y","0.2");
t->addConfFileProperty("default","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("default","sHoughEdgeThreshold","30");
t->addConfFileProperty("default","sSmooth","75");
t->addConfFileProperty("default","sValueMax","255");
t->addConfFileProperty("default","sValueMin","45");
t->addConfFileProperty("default","use_h","true");
t->addConfFileProperty("default","use_s","true");
t->addConfFileProperty("default","use_v","false");
t->addConfFileProperty("default","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("default","vHoughEdgeThreshold","19");
t->addConfFileProperty("default","vSmooth","23");
t->addConfFileProperty("default","vValueMax","255");
t->addConfFileProperty("default","vValueMin","200");
t->addConfFileProperty("simulation","buoy_radius","0.05");
t->addConfFileProperty("simulation","buoy_timeout","20");
t->addConfFileProperty("simulation","debug","true");
t->addConfFileProperty("simulation","debug_gui","true");
t->addConfFileProperty("simulation","filter_timeout","1.5");
t->addConfFileProperty("simulation","hHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","hHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","hSmooth","17");
t->addConfFileProperty("simulation","hValueMax","255");
t->addConfFileProperty("simulation","hValueMin","55");
t->addConfFileProperty("simulation","houghMaxCircle","55");
t->addConfFileProperty("simulation","houghMinCircle","10");
t->addConfFileProperty("simulation","hough_debug_h","false");
t->addConfFileProperty("simulation","hough_debug_s","false");
t->addConfFileProperty("simulation","hough_debug_v","false");
t->addConfFileProperty("simulation","hsv_gray","0");
t->addConfFileProperty("simulation","roi_height","3.0");
t->addConfFileProperty("simulation","roi_width","3.0");
t->addConfFileProperty("simulation","roi_x","0.0");
t->addConfFileProperty("simulation","roi_y","0.2");
t->addConfFileProperty("simulation","sHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","sHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","sSmooth","17");
t->addConfFileProperty("simulation","sValueMax","255");
t->addConfFileProperty("simulation","sValueMin","153");
t->addConfFileProperty("simulation","use_h","true");
t->addConfFileProperty("simulation","use_s","false");
t->addConfFileProperty("simulation","use_v","false");
t->addConfFileProperty("simulation","vHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","vHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","vSmooth","13");
t->addConfFileProperty("simulation","vValueMax","255");
t->addConfFileProperty("simulation","vValueMin","200");
t->addConfFileProperty("bottom_orange","buoy_radius","0.2");
t->addConfFileProperty("bottom_orange","buoy_timeout","20");
t->addConfFileProperty("bottom_orange","debug","false");
t->addConfFileProperty("bottom_orange","debug_gui","false");
t->addConfFileProperty("bottom_orange","filter_timeout","1.5");
t->addConfFileProperty("bottom_orange","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_orange","hHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_orange","hSmooth","40");
t->addConfFileProperty("bottom_orange","hValueMax","70");
t->addConfFileProperty("bottom_orange","hValueMin","1");
t->addConfFileProperty("bottom_orange","houghMaxCircle","150");
t->addConfFileProperty("bottom_orange","houghMinCircle","15");
t->addConfFileProperty("bottom_orange","hough_debug_h","false");
t->addConfFileProperty("bottom_orange","hough_debug_s","false");
t->addConfFileProperty("bottom_orange","hough_debug_v","false");
t->addConfFileProperty("bottom_orange","hsv_gray","0");
t->addConfFileProperty("bottom_orange","roi_height","3.0");
t->addConfFileProperty("bottom_orange","roi_width","3.0");
t->addConfFileProperty("bottom_orange","roi_x","0.0");
t->addConfFileProperty("bottom_orange","roi_y","0.2");
t->addConfFileProperty("bottom_orange","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_orange","sHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_orange","sSmooth","75");
t->addConfFileProperty("bottom_orange","sValueMax","255");
t->addConfFileProperty("bottom_orange","sValueMin","30");
t->addConfFileProperty("bottom_orange","use_h","true");
t->addConfFileProperty("bottom_orange","use_s","false");
t->addConfFileProperty("bottom_orange","use_v","false");
t->addConfFileProperty("bottom_orange","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("bottom_orange","vHoughEdgeThreshold","19");
t->addConfFileProperty("bottom_orange","vSmooth","75");
t->addConfFileProperty("bottom_orange","vValueMax","255");
t->addConfFileProperty("bottom_orange","vValueMin","220");
t->addConfFileProperty("bottom_orange","buoy_color","ORANGE");
t->addConfFileProperty("bottom_white","buoy_radius","0.2");
t->addConfFileProperty("bottom_white","buoy_timeout","20");
t->addConfFileProperty("bottom_white","debug","true");
t->addConfFileProperty("bottom_white","debug_gui","true");
t->addConfFileProperty("bottom_white","filter_timeout","1.5");
t->addConfFileProperty("bottom_white","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_white","hHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_white","hSmooth","40");
t->addConfFileProperty("bottom_white","hValueMax","255");
t->addConfFileProperty("bottom_white","hValueMin","15");
t->addConfFileProperty("bottom_white","houghMaxCircle","150");
t->addConfFileProperty("bottom_white","houghMinCircle","20");
t->addConfFileProperty("bottom_white","hough_debug_h","false");
t->addConfFileProperty("bottom_white","hough_debug_s","false");
t->addConfFileProperty("bottom_white","hough_debug_v","false");
t->addConfFileProperty("bottom_white","hsv_gray","0");
t->addConfFileProperty("bottom_white","roi_height","3.0");
t->addConfFileProperty("bottom_white","roi_width","3.0");
t->addConfFileProperty("bottom_white","roi_x","0.0");
t->addConfFileProperty("bottom_white","roi_y","0.2");
t->addConfFileProperty("bottom_white","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_white","sHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_white","sSmooth","41");
t->addConfFileProperty("bottom_white","sValueMax","255");
t->addConfFileProperty("bottom_white","sValueMin","50");
t->addConfFileProperty("bottom_white","use_h","false");
t->addConfFileProperty("bottom_white","use_s","true");
t->addConfFileProperty("bottom_white","use_v","true");
t->addConfFileProperty("bottom_white","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("bottom_white","vHoughEdgeThreshold","19");
t->addConfFileProperty("bottom_white","vSmooth","41");
t->addConfFileProperty("bottom_white","vValueMax","255");
t->addConfFileProperty("bottom_white","vValueMin","210");
t->addConfFileProperty("bottom_white","buoy_color","WHITE");
	t->addProperty("buoy_radius", ConfigurationModel::DOUBLE);
	t->addProperty("hHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("sHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("vHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("hHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("sHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("vHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("houghMinCircle", ConfigurationModel::INT);
	t->addProperty("houghMaxCircle", ConfigurationModel::INT);
	t->addProperty("hValueMin", ConfigurationModel::INT);
	t->addProperty("sValueMin", ConfigurationModel::INT);
	t->addProperty("vValueMin", ConfigurationModel::INT);
	t->addProperty("hValueMax", ConfigurationModel::INT);
	t->addProperty("vValueMax", ConfigurationModel::INT);
	t->addProperty("sValueMax", ConfigurationModel::INT);
	t->addProperty("hSmooth", ConfigurationModel::INT);
	t->addProperty("sSmooth", ConfigurationModel::INT);
	t->addProperty("vSmooth", ConfigurationModel::INT);
	t->addProperty("debug_gui", ConfigurationModel::BOOL);
	t->addProperty("buoy_timeout", ConfigurationModel::INT);
	t->addProperty("filter_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("roi_x", ConfigurationModel::DOUBLE);
	t->addProperty("roi_y", ConfigurationModel::DOUBLE);
	t->addProperty("roi_width", ConfigurationModel::DOUBLE);
	t->addProperty("roi_height", ConfigurationModel::DOUBLE);
	t->addProperty("debug", ConfigurationModel::BOOL);
	t->addProperty("hsv_gray", ConfigurationModel::INT);
	t->addProperty("hough_debug_h", ConfigurationModel::BOOL);
	t->addProperty("hough_debug_s", ConfigurationModel::BOOL);
	t->addProperty("hough_debug_v", ConfigurationModel::BOOL);
	t->addProperty("use_h", ConfigurationModel::BOOL);
	t->addProperty("use_s", ConfigurationModel::BOOL);
	t->addProperty("use_v", ConfigurationModel::BOOL);
	t->addProperty("buoys_buffer_size", ConfigurationModel::INT);
	t->addProperty("buoys_buffer_size_min", ConfigurationModel::INT);
	t->addProperty("startvalidation", ConfigurationModel::INT);
	t->addProperty("mindist", ConfigurationModel::INT);
}
{
auto t = new Task("AvalonControl::TrajectoryFollower");
(void)t;
t->addEvent("align_at_end");
t->addEvent("cannot_find_closed_point");
t->addEvent("reached_end");
t->addEvent("waiting_for_pose");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","final_heading","NaN");
t->addConfFileProperty("default","geometrical_resolution","0.1");
t->addConfFileProperty("default","max_spline_jump_distance","1.0");
t->addConfFileProperty("default","step_width","0.5");
t->addConfFileProperty("default","timeout_at_end_before_mark_end_reached","10.0");
t->addConfFileProperty("default","use_zero_heading","false");
t->addConfFileProperty("hall_square","trajectory","{speed => 1.0, spline => {geometric_resolution => 0.1, dimension => 3, curve_order => 3, kind => POLYNOMIAL_BSPLINE, knots => [0.0, 0.0, 0.0, 21.402295979079504, 38.89508823891228, 38.89508823891228, 38.89508823891228], vertices => [6.0, 4.0, -5.0, -14.092692070806969, 10.488859875419607, 2.6141634687526523, -4.85338528528596, -8.726471397007122, -10.50961038305679, 6.0, -4.0, -4.0]}}");
t->addConfFileProperty("hall_cool","trajectory","{speed => 0.0, spline => {geometric_resolution => 0.1, dimension => 3, curve_order => 3, kind => POLYNOMIAL_BSPLINE, knots => [0.0, 0.0, 0.0, 11.129727453672533, 18.63621260436668, 24.5324501655617, 35.23557061347258, 35.23557061347258, 35.23557061347258], vertices => [0.0, 0.0, -5.0, 6.606085650125402, 7.875698666175182, -7.63787470315513, -0.05324269401373716, -4.895347123529618, -1.2248929545147373, -7.550125892585407, -3.21439401481242, -3.1982435293540887, -3.237618872249391, 8.041208784471431, -6.625858046181266, 0.0, 0.0, -1.0]}}");
t->addConfFileProperty("circle","deny_reverse","true");
t->addConfFileProperty("circle","final_heading","NaN");
t->addConfFileProperty("circle","geometrical_resolution","0.1");
t->addConfFileProperty("circle","loop_spline","false");
t->addConfFileProperty("circle","max_spline_jump_distance","3.0");
t->addConfFileProperty("circle","step_width","0.1");
t->addConfFileProperty("circle","use_zero_heading","false");
t->addConfFileProperty("circle","trajectory","{speed => 6.9071029307976e-310, spline => {geometric_resolution => 0.1, dimension => 3, curve_order => 3, kind => POLYNOMIAL_BSPLINE, knots => [0.0, 0.0, 0.0, 0.030099422453229024, 0.05049423230404379, 0.07137215263721405, 0.09290837622425922, 0.11526272511688622, 0.13857829047747894, 0.16298132591487638, 0.18858204436586257, 0.21547596335336527, 0.2437455068626484, 0.27346165757786056, 0.30468553197666626, 0.33746981102758333, 0.37185999989088503, 0.4078955147049893, 0.4456106078942634, 0.48503514949670046, 0.5261952837477343, 0.5691139795446262, 0.6138114916780044, 0.6603057475648803, 0.7086126720371543, 0.758746460721728, 0.8107198107710194, 0.8645441161831984, 0.9202296336765023, 0.9777856240248703, 1.0372204728921557, 1.0985417944894138, 1.161756520797201, 1.2268709786190288, 1.2938909563434784, 1.362821761974687, 1.43366827373065, 1.5064349842951268, 1.5811260396332192, 1.657745273135759, 1.736296235737739, 1.816782222556601, 1.8992062965135004, 1.98357130933166, 2.0698799202482117, 2.158134612727453, 2.2483377094226755, 2.34049138559934, 2.4345976812032006, 2.53065851173226, 2.6286756780504232, 2.7286508752627263, 2.8305857007566457, 2.9344816615008167, 3.0403401806811736, 3.1481626037447104, 3.2579502039126345, 3.3697041872173665, 3.483425697111482, 3.599115818691171, 3.716775582571973, 3.83640596845032, 3.9580079083807496, 4.081582289795413, 4.207129958289642, 4.334651720194879, 4.46414834495799, 4.595620567344133, 4.729069089478514, 4.864494582740916, 5.001897689525463, 5.141279024876937, 5.282639178013806, 5.425978713747211, 5.571298173804296, 5.718598078063458, 5.8678789257084505, 6.019141196307604, 6.1723853508239035, 6.327611832561146, 6.4848210680509695, 6.6440134678850775, 6.805189427496689, 6.968349327894865, 7.133493536355051, 7.3006224070689445, 7.469736281756507, 7.6408354902427265, 7.8139203510015225, 7.988991171669028, 8.166048249528268, 8.345091871967142, 8.526122316911415, 8.709139853234372, 8.894144741144583, 9.08113723255321, 9.270117571422098, 9.461085994093846, 9.654042729604972, 9.848987999983201, 10.045922020529815, 10.244845000087969, 10.445757141297783, 10.648658640839013, 10.85354968966196, 11.060430473207388, 11.269301171615954, 11.480161959927848, 11.693013008273116, 11.907854482053207, 12.124686542114251, 12.343509344912459, 12.56432304267211, 12.787127783536505, 13.01192371171227, 13.238710967607345, 13.467489687962983, 13.6982600059801, 13.931022051440202, 14.165775950821232, 14.40252182740856, 14.641259801401336, 14.881989990014482, 15.124712507576493, 15.369427465623293, 15.616134972988286, 15.864835135888848, 16.115528058009353, 16.368213840580957, 16.622892582458263, 16.879564380193038, 17.138229328105083, 17.39888751835037, 17.661539040986682, 17.926183984036683, 18.192822433548745, 18.46145447365545, 18.732080186629954, 19.004699652940324, 19.279312951301893, 19.555920158727716, 19.834521350577248, 20.115116600603294, 20.3977059809973, 20.682289562433056, 20.968867414108892, 21.257439603788413, 21.54800619783986, 21.840567261274096, 22.135122857781333, 22.431673049766626, 22.730217898384183, 23.030757463570534, 23.333291804076595, 23.637820977498723, 23.944345040308725, 24.25286404788293, 24.56337805453029, 24.875887113519624, 25.190391277105977, 25.50689059655617, 25.825385122173508, 26.145874903321804, 26.468359988448544, 26.792840425107453, 27.11931625998031, 27.447787538898098, 27.778254306861566, 28.110716608061125, 28.445174485896175, 28.781627982993868, 29.12007714122727, 29.460522001733064, 29.802962604928695, 30.147398990529016, 30.49383119756248, 30.84225926438681, 31.192683228704343, 31.545103127576805, 31.89951899743975, 32.255930874116586, 32.61433879283217, 32.974742788226095, 33.337142894365556, 33.70153914475788, 34.06793157236274, 34.43632020960396, 34.80670508838115, 35.17908624008086, 35.55346369558755, 35.92983748529423, 36.308207639112794, 36.68857418648419, 37.07093715638817, 37.455296577352904, 37.84165247746431, 38.230004884375134, 38.6203538253138, 39.01269932709306, 39.40704141611836, 39.80338011839612, 40.20171545954166, 40.60204746478705, 41.00437615898866, 41.408701566634626, 41.815023711852035, 42.22334261841405, 42.63365830974672, 43.04597080893578, 43.4602801387331, 43.876586321563195, 44.29488937952945, 44.715189334420145, 45.1374862077145, 45.561780020588444, 45.98807079392031, 46.41635854829638, 46.8466433040163, 47.27892508109838, 47.71320389928475, 48.149479778046455, 48.58775273658833, 49.02802279385389, 49.470289968530025, 49.91455427905157, 50.36081574360589, 50.80907438013725, 51.259330206351095, 51.71158323971835, 52.16583349747944, 52.62208099664841, 53.08032575401681, 53.540567786157624, 54.00280710942896, 54.46704373997778, 54.93327769374358, 55.401508986461835, 55.87173763366751, 56.34396365069844, 56.81818705269866, 57.29440785462164, 57.7726260712335, 58.25284171711607, 58.73505480666999, 59.21926535411768, 59.70547337350627, 60.19367887871047, 60.68388188343536, 61.176082401219205, 61.67028044543603, 62.16647602929841, 62.66466916585995, 63.164859868017864, 63.667048148515484, 64.17123401994463, 64.67741749474808, 65.18559858522185, 65.69577730351756, 66.20795366164458, 66.72212767147235, 67.2382993447325, 67.75646869302093, 68.2766357278, 68.79880046040046, 69.32296290202353, 69.84912306374285, 70.37728095650637, 70.9074365911383, 71.43958997834098, 71.97374112869656, 72.50989005266902, 73.0480367606057, 73.5881812627392, 74.13032356918896, 74.67446368996296, 75.22060163495937, 75.7687374139681, 76.31887103667239, 76.87100251265045, 77.42513185137679, 77.98125906222387, 78.53938415446343, 79.09950713726809, 79.66162801971262, 80.22574681077532, 80.79186351933953, 81.35997815419476, 81.93009072403822, 82.50220123747593, 83.07630970302407, 83.65241612911024, 84.23052052407465, 84.81062289617131, 85.39272325356927, 85.97682160435372, 86.56291795652719, 87.15101231801063, 87.74110469664453, 88.33319510019001, 88.92728353632988, 89.52337001266969, 90.42099631164207, 90.42099631164207, 90.42099631164207], vertices => [-21.0, 26.0, -2.0, -20.984770551116746, 26.000027288596527, -2.0, -20.960509127185713, 26.007521852851664, -2.0, -20.942279877470895, 26.017394447106646, -2.0, -20.92582812455398, 26.03092735558546, -2.0, -20.91169898891772, 26.047839350282434, -2.0000000000000004, -20.90039096593319, 26.067780558401854, -1.9999999999999993, -20.892354327053557, 26.090337535668745, -2.0, -20.887983198862308, 26.11503975112383, -2.0, -20.887609402438947, 26.141366396685488, -1.9999999999999993, -20.891496629849723, 26.168753886997205, -2.0, -20.899835375334856, 26.196604061197405, -2.0000000000000004, -20.912738737186206, 26.224293055121, -2.0, -20.930239240339585, 26.251180739781162, -1.9999999999999998, -20.952286781769807, 26.276620588206086, -2.0, -20.978747766489974, 26.2999698167777, -1.9999999999999996, -21.009405470753617, 26.320599642849935, -2.0000000000000004, -21.043961643708283, 26.337905501577747, -2.0000000000000004, -21.08203933738384, 26.351317068710088, -1.9999999999999996, -21.12318693626375, 26.360307941330362, -2.0000000000000004, -21.16688334082926, 26.36440483479198, -1.9999999999999998, -21.21254424386111, 26.36319616137972, -2.0, -21.25952942370071, 26.356339864613574, -1.9999999999999996, -21.307150965076477, 26.34357039268821, -2.0000000000000004, -21.35468230555147, 26.32470470533591, -1.9999999999999998, -21.4013679942645, 26.29964722040122, -2.0000000000000004, -21.44643403955004, 26.268393619549784, -2.0, -21.48909871336725, 26.23103344670157, -1.9999999999999996, -21.52858367336803, 26.187751447839666, -1.9999999999999996, -21.56412525799357, 26.138827616644853, -2.0000000000000004, -21.594985806295476, 26.084635926762438, -2.0, -21.62046485229412, 26.025641748236133, -1.9999999999999996, -21.639910043655895, 25.962397962541388, -2.0000000000000004, -21.652727636309375, 25.895539807518105, -2.0000000000000004, -21.658392420323032, 25.82577850013147, -1.9999999999999996, -21.656456937905745, 25.753893701177006, -2.0, -21.6465598617117, 25.680724901589443, -2.0, -21.628433410663405, 25.60716182472124, -1.9999999999999996, -21.601909691150432, 25.53413395263736, -2.0000000000000004, -21.56692586360452, 25.46259929695501, -2.0000000000000004, -21.523528047958308, 25.39353254587684, -2.0, -21.471873896211896, 25.327912728677326, -2.0000000000000004, -21.412233776092624, 25.266710546874712, -2.0, -21.344990526415998, 25.21087552754385, -1.9999999999999998, -21.27063776204645, 25.161323158606486, -2.0, -21.189776724113766, 25.11892216840672, -1.9999999999999998, -21.103111689152684, 25.084482112391093, -1.9999999999999998, -21.01144396888732, 25.05874142824146, -2.0, -20.91566455025911, 25.042356117353105, -1.9999999999999998, -20.816745442782736, 25.03588920513161, -2.0, -20.715729817193786, 25.039801125247415, -2.0, -20.613721035417278, 25.054441163803524, -1.9999999999999998, -20.511870686937154, 25.080040088432213, -2.0000000000000004, -20.411365760492767, 25.11670407475288, -1.9999999999999998, -20.313415092493262, 25.16441002852858, -2.0, -20.219235244459448, 25.223002386405838, -2.0, -20.130035971032196, 25.29219146147983, -1.9999999999999998, -20.047005447496247, 25.371553382280464, -2.0, -19.97129543125381, 25.46053165532237, -2.0, -19.90400653515626, 25.5584403623133, -2.0, -19.84617379200239, 25.6644689836888, -2.0, -19.798752688799215, 25.777688820562474, -1.9999999999999996, -19.7626058465405, 25.89706096767798, -2.0000000000000004, -19.738490516299976, 26.021445770753083, -2.0, -19.727047055394245, 26.149613682944455, -2.0000000000000004, -19.728788538304705, 26.28025741726106, -1.9999999999999996, -19.744091646041298, 26.412005274830207, -1.9999999999999998, -19.77318896478996, 26.543435513184058, -1.9999999999999998, -19.81616281014028, 26.673091604381344, -2.0, -19.87294067708869, 26.799498219993012, -2.0, -19.943292398526047, 26.921177768928054, -2.0000000000000004, -20.026829076233287, 27.036667304904803, -2.0, -20.123003828727974, 27.144535613212184, -2.0, -20.231114379844357, 27.24340028136006, -2.0, -20.350307490917253, 27.33194455537246, -1.9999999999999998, -20.47958521811232, 27.408933782888116, -1.9999999999999996, -20.617812955043412, 27.47323124593526, -2.0000000000000004, -20.763729199588344, 27.523813190247274, -2.0, -20.915956963002106, 27.559782864264413, -2.0000000000000004, -21.073016719276396, 27.580383389478996, -1.9999999999999998, -21.23334077344468, 27.585009294456036, -1.9999999999999998, -21.39528890941241, 27.57321655760151, -1.9999999999999993, -21.557165161125994, 27.54473101843519, -2.0, -21.71723553568492, 27.499455033609536, -2.0000000000000004, -21.873746503544808, 27.437472272034224, -2.0, -22.024944059425945, 27.35905056303068, -1.9999999999999998, -22.16909314808753, 27.264642732246564, -2.0, -22.3044972418844, 27.154885381886423, -1.9999999999999996, -22.4295178520974, 27.030595594425435, -2.0, -22.542593753506146, 26.892765562121586, -2.0000000000000004, -22.642259701608413, 26.742555168073473, -2.0, -22.72716442431587, 26.581282568024104, -2.0, -22.796087674872027, 26.410412845321673, -1.9999999999999996, -22.8479561401197, 26.231544834152146, -2.0, -22.88185800803856, 26.04639622809454, -2.0, -22.89705601059686, 25.85678711196188, -2.0, -22.89299877230627, 25.66462207453275, -2.0, -22.869330311300985, 25.4718710779149, -2.0000000000000004, -22.825897558123163, 25.280549275692906, -2.0, -22.7627557775023, 25.09269598649212, -2.0, -22.680171800064134, 24.91035304195735, -2.0, -22.57862499387065, 24.73554273823341, -2.0, -22.458805929737615, 24.570245627707543, -2.0, -22.321612719142905, 24.416378392915647, -1.9999999999999998, -22.16814502896431, 24.27577204704045, -2.0000000000000004, -21.99969580298959, 24.150150705279277, -2.0, -21.81774074584699, 24.041111168504095, -2.0, -21.623925650422454, 23.950103555076357, -2.0000000000000004, -21.420051674678863, 23.878413208443494, -2.0000000000000004, -21.20805869779016, 23.827144097293793, -2.0, -20.99000690837374, 23.797203911669854, -1.9999999999999996, -20.768056799084654, 23.789291042657396, -2.0000000000000004, -20.54444776167022, 23.803883615221054, -2.0, -20.321475494537594, 23.841230723625554, -1.9999999999999993, -20.10146845073986, 23.90134599685505, -2.0, -19.88676356784085, 23.984003597747527, -2.0000000000000004, -19.67968153219941, 24.088736734434892, -2.0, -19.48250183867034, 24.214838736381367, -2.0, -19.297437912430283, 24.361366720119353, -2.0000000000000004, -19.126612562507745, 24.52714784197897, -2.0, -18.972034036563425, 24.710788106992297, -1.9999999999999998, -18.835572943499304, 24.91068367503082, -2.0, -18.718940304569134, 25.125034577408968, -1.9999999999999998, -18.623666984853415, 25.351860729967935, -1.9999999999999998, -18.55108474530956, 25.589020102342054, -1.9999999999999998, -18.502309141208837, 25.834228878004136, -2.0000000000000004, -18.47822447575266, 26.08508341607146, -2.0, -18.479470998175394, 26.339083804003806, -2.0, -18.506434513875476, 26.59365877049585, -1.9999999999999996, -18.559238550281133, 26.84619171029656, -2.0000000000000004, -18.637739196486727, 27.094047557591626, -1.9999999999999996, -18.741522707449178, 27.334600232154372, -2.0000000000000004, -18.869905934987763, 27.565260372866746, -1.9999999999999996, -19.021939618280722, 27.783503066573466, -2.0000000000000004, -19.19641453630442, 27.98689527665867, -2.0000000000000004, -19.39187049403744, 28.173122675301798, -1.9999999999999998, -19.606608083575953, 28.340015586112933, -2.0, -19.838703130910687, 28.485573749774588, -1.9999999999999998, -20.08602370932876, 28.60798963439605, -2.0, -20.346249571552836, 28.70567002445429, -2.0, -20.61689382513657, 28.777255637354465, -2.0, -20.895326649608062, 28.821638534661783, -2.0000000000000004, -21.178800829688875, 28.837977115771984, -1.9999999999999998, -21.464478856893972, 28.82570850500607, -2.0, -21.749461332196276, 28.78455816861338, -1.9999999999999998, -22.03081638545424, 28.71454662569738, -1.9999999999999996, -22.305609813161265, 28.615993146364175, -2.0000000000000004, -22.570935624962907, 28.489516361144506, -2.0000000000000004, -22.8239466814523, 28.33603173763645, -1.9999999999999996, -23.061885101113646, 28.156745913033955, -2.0, -23.282112113021057, 27.95314790440159, -2.0, -23.48213703406543, 27.72699725188081, -2.0, -23.65964505508505, 27.480309183111977, -1.9999999999999996, -23.81252352929382, 27.21533691967545, -2.0000000000000004, -23.93888646877206, 26.934551277940727, -2.0, -24.037096970410914, 26.640617747019913, -2.0000000000000004, -24.105787311449873, 26.336371255213862, -1.9999999999999998, -24.14387647644905, 26.024788863096877, -2.0, -24.150584901993334, 25.708960645902145, -2.0, -24.125446252401282, 25.392059049864862, -2.0, -24.06831606894744, 25.077307026392493, -1.9999999999999991, -23.979377166313228, 24.76794526413153, -2.0000000000000004, -23.859141682849362, 24.467198851984726, -2.0, -23.708449725427332, 24.1782437157342, -1.9999999999999998, -23.52846458483173, 23.904173177006356, -1.9999999999999998, -23.320664533435046, 23.64796498577889, -2.0, -23.08683125292917, 23.41244917641302, -1.9999999999999998, -22.82903497578519, 23.20027709227598, -1.9999999999999996, -22.549616459492906, 23.01389191541275, -2.0000000000000004, -22.251165947116483, 22.855501025489986, -2.0000000000000004, -21.93649930091862, 22.727050496461388, -1.9999999999999996, -21.60863152738984, 22.630202020225912, -2.0, -21.27074794162396, 22.566312524137796, -2.0000000000000004, -20.926173246273212, 22.536416723786477, -2.0000000000000004, -20.578338824987384, 22.54121282423305, -2.0, -20.230748572006828, 22.581051552141403, -2.0, -19.886943598180977, 22.655928668274264, -2.0, -19.55046616889807, 22.76548107496555, -2.0000000000000004, -19.22482324104522, 22.90898659677773, -1.9999999999999996, -18.91344997401548, 23.085367474977026, -2.0, -18.619673593821943, 23.293197578092386, -2.0, -18.34667798949076, 23.530713292063645, -2.0, -18.097469417046916, 23.79582801473323, -1.9999999999999998, -17.874843678582668, 24.086150141100692, -1.9999999999999996, -17.68135513215573, 24.3990043882475, -2.0000000000000004, -17.519287872688214, 24.73145627255121, -1.9999999999999998, -17.39062940475771, 25.080339517135442, -2.0, -17.29704710535708, 25.442286134822943, -2.0, -17.23986774855609, 25.81375890153432, -2.0, -17.22006033477045, 26.191085907443664, -2.0, -17.238222435310583, 26.570496848576745, -2.0000000000000004, -17.294570228352725, 26.948160700204124, -2.0, -17.388932365789646, 27.320224395591573, -1.9999999999999996, -17.520747771939785, 27.682852119641808, -2.0000000000000004, -17.68906743521039, 28.032264816874147, -2.0, -17.892560212925467, 28.364779507183965, -2.0, -18.129522628061764, 28.676848000997577, -2.0000000000000004, -18.397892595014003, 28.96509460784941, -2.0, -18.695266970166816, 29.22635243906625, -1.9999999999999998, -19.018922782419626, 29.457697916116608, -2.0, -19.365841959321692, 29.656483111194454, -2.0, -19.73273932655064, 29.82036556563583, -1.9999999999999996, -20.116093622515752, 29.94733525464816, -1.9999999999999996, -20.512181236281272, 30.035738393363076, -2.0, -20.917112346153175, 30.08429780915581, -1.9999999999999998, -21.326869108500624, 30.09212963822734, -2.0, -21.737345522006663, 30.058756140300368, -2.0, -22.144388571842292, 29.984114463587794, -2.0, -22.54384024148262, 29.86856123257498, -1.9999999999999996, -22.931579967238388, 29.712872873210948, -2.0, -23.303567102228932, 29.518241633407357, -2.0, -23.655882952594716, 29.286267300855332, -1.9999999999999996, -23.984771949317533, 29.01894466463989, -2.0000000000000004, -24.286681524114364, 28.718646811497866, -1.9999999999999998, -24.55830026748334, 28.388104391369744, -2.0, -24.79659396104141, 28.030381029674828, -2.0, -24.998839094697146, 27.64884510504472, -2.0, -25.16265350178985, 27.247138150637525, -1.9999999999999998, -25.286023771900386, 26.82914017420333, -2.0, -25.367329131353852, 26.398932226374768, -1.9999999999999996, -25.40536151520793, 25.960756577838605, -2.0, -25.39934159142869, 25.51897489375596, -2.0, -25.348930537642993, 25.078024817725403, -1.9999999999999998, -25.254237412931584, 24.642375397445825, -2.0000000000000004, -25.115822011176014, 24.216481799798196, -1.9999999999999998, -24.93469312805208, 23.804739774129285, -2.0, -24.712302220414617, 23.411440328938276, -2.0, -24.450532484069257, 23.040725088834556, -1.9999999999999996, -24.151683423289118, 22.69654279549747, -2.0, -23.818451032423372, 22.382607408421194, -2.0000000000000004, -23.453903756067877, 22.10235824851549, -2.0000000000000004, -23.061454439043054, 21.85892261024855, -2.0, -22.644828520379168, 21.65508124610697, -2.0, -22.20802876618267, 21.493237100899957, -2.0, -21.75529687421561, 21.375387643088526, -2.0, -21.291072317846574, 21.30310110615794, -2.0, -20.819948828345034, 21.27749691539587, -2.0000000000000004, -20.346628941940264, 21.29923053465236, -1.9999999999999998, -19.875877061338016, 21.36848292413802, -2.0, -19.412471500212305, 21.484954754491426, -2.0, -18.961155993336426, 21.64786547467228, -2.0, -18.52659116430729, 21.85595728218993, -2.0000000000000004, -18.11330644711627, 22.107503994254095, -1.9999999999999998, -17.7256529570481, 22.400324768143207, -2.0, -17.367757800515406, 22.731802568942637, -2.0, -17.043480302484102, 23.098907233326663, -2.0000000000000004, -16.756370614188455, 23.498222929760573, -2.0, -16.509631143002135, 23.925979768888137, -1.9999999999999996, -16.306081220801342, 24.378089273437574, -1.9999999999999998, -16.14812539715658, 24.85018337520009, -2.0000000000000004, -16.037725709497433, 25.33765656795798, -2.0, -15.976378244330485, 25.835710810085402, -2.0, -15.9650942620185, 26.339402739301697, -2.0000000000000004, -16.004386112951295, 26.84369273507374, -1.9999999999999996, -16.09425812559288, 27.34349534175008, -2.0, -16.23420259734186, 27.833730547926645, -2.0000000000000004, -16.423200967889713, 28.309375405009998, -2.0, -16.65973020231435, 28.765515460621998, -1.9999999999999998, -16.941774358040423, 29.197395480492993, -2.0000000000000004, -17.266841256569325, 29.60046893587759, -2.0, -17.6319841280809, 29.970445742300853, -2.0, -18.033828045178215, 30.303337749550796, -2.0, -18.468600911726917, 30.595501502169498, -2.0000000000000004, -18.932168724459842, 30.843677814096175, -1.9999999999999998, -19.420074779283375, 31.045027730367522, -2.0000000000000004, -19.92758245152456, 31.197164482616177, -1.9999999999999996, -20.449721140155223, 31.29818108321263, -2.0000000000000004, -20.981334930747494, 31.34667324490671, -1.9999999999999996, -21.517133500944944, 31.341757358338917, -2.0, -22.051744765920606, 31.283083308365608, -1.9999999999999998, -22.579768739941386, 31.170841961299114, -2.0, -23.09583207401845, 31.005767208395596, -2.0, -23.594642718898772, 30.789132505700238, -1.9999999999999996, -24.07104415748877, 30.522741906128473, -2.0, -24.52006865128849, 30.208915635858187, -2.0, -24.93698895158815, 29.850470323160486, -1.9999999999999998, -25.31736793801085, 29.450694043126205, -2.0, -25.65710566439543, 29.0133163957845, -2.0, -25.952483314858732, 28.54247388729248, -2.0, -26.20020360096006, 28.04267093365643, -1.9999999999999998, -26.39742716396004, 27.518736853298822, -2.0, -26.541804583914843, 26.975779258211517, -1.9999999999999998, -26.63150363942014, 26.419134292968494, -2.0, -26.66523150781486, 25.854314206077376, -2.0000000000000004, -26.64225164512763, 25.286952768644227, -1.9999999999999996, -26.562395137515068, 24.72274908076155, -2.0000000000000004, -26.42606637088388, 24.167410326116713, -1.9999999999999998, -26.23424292226234, 23.62659404981417, -2.0000000000000004, -25.98846963472111, 23.105850543125026, -2.0000000000000004, -25.690846896645173, 22.61056592169756, -2.0, -25.344013205388958, 22.145906480607263, -2.0, -24.951122153826034, 21.716764900528073, -2.0, -24.515814037651932, 21.32770886409084, -2.0, -24.042182327882617, 20.98293262164575, -2.0, -23.53473536259515, 20.686212013299155, -1.9999999999999998, -22.998353336628174, 20.440863456596894, -1.9999999999999998, -22.438242628071468, 20.249707170886012, -1.9999999999999998, -21.85987834173173, 20.11503604726967, -2.0000000000000004, -21.26899161438572, 20.038584616793855, -2.0, -20.52134435060159, 20.017255829091575, -2.0000000000000004, -20.07449130067449, 20.071810255442834, -2.0000000000000004]}}");
t->addFullfillment("Base::AUVRelativeMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
t->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
	t->addProperty("loop_spline", ConfigurationModel::BOOL);
	t->addProperty("deny_reverse", ConfigurationModel::BOOL);
	t->addProperty("use_zero_heading", ConfigurationModel::BOOL);
	t->addProperty("timeout_at_end_before_mark_end_reached", ConfigurationModel::DOUBLE);
	t->addProperty("final_heading", ConfigurationModel::DOUBLE);
	t->addProperty("step_width", ConfigurationModel::DOUBLE);
	t->addProperty("geometrical_resolution", ConfigurationModel::DOUBLE);
	t->addProperty("max_spline_jump_distance", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Buoy::Detector2");
(void)t;
t->addEvent("buoy_found");
t->addEvent("no_buoy_found");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","buoy_radius","0.2");
t->addConfFileProperty("default","buoy_timeout","20");
t->addConfFileProperty("default","debug","true");
t->addConfFileProperty("default","debug_gui","true");
t->addConfFileProperty("default","filter_timeout","1.5");
t->addConfFileProperty("default","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("default","hHoughEdgeThreshold","30");
t->addConfFileProperty("default","hSmooth","75");
t->addConfFileProperty("default","hValueMax","255");
t->addConfFileProperty("default","hValueMin","25");
t->addConfFileProperty("default","houghMaxCircle","150");
t->addConfFileProperty("default","houghMinCircle","20");
t->addConfFileProperty("default","hough_debug_h","false");
t->addConfFileProperty("default","hough_debug_s","false");
t->addConfFileProperty("default","hough_debug_v","false");
t->addConfFileProperty("default","hsv_gray","0");
t->addConfFileProperty("default","roi_height","3.0");
t->addConfFileProperty("default","roi_width","3.0");
t->addConfFileProperty("default","roi_x","0.0");
t->addConfFileProperty("default","roi_y","0.2");
t->addConfFileProperty("default","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("default","sHoughEdgeThreshold","30");
t->addConfFileProperty("default","sSmooth","75");
t->addConfFileProperty("default","sValueMax","255");
t->addConfFileProperty("default","sValueMin","45");
t->addConfFileProperty("default","use_h","true");
t->addConfFileProperty("default","use_s","true");
t->addConfFileProperty("default","use_v","false");
t->addConfFileProperty("default","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("default","vHoughEdgeThreshold","19");
t->addConfFileProperty("default","vSmooth","23");
t->addConfFileProperty("default","vValueMax","255");
t->addConfFileProperty("default","vValueMin","200");
t->addConfFileProperty("simulation","buoy_radius","0.05");
t->addConfFileProperty("simulation","buoy_timeout","20");
t->addConfFileProperty("simulation","debug","true");
t->addConfFileProperty("simulation","debug_gui","true");
t->addConfFileProperty("simulation","filter_timeout","1.5");
t->addConfFileProperty("simulation","hHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","hHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","hSmooth","17");
t->addConfFileProperty("simulation","hValueMax","255");
t->addConfFileProperty("simulation","hValueMin","55");
t->addConfFileProperty("simulation","houghMaxCircle","55");
t->addConfFileProperty("simulation","houghMinCircle","10");
t->addConfFileProperty("simulation","hough_debug_h","false");
t->addConfFileProperty("simulation","hough_debug_s","false");
t->addConfFileProperty("simulation","hough_debug_v","false");
t->addConfFileProperty("simulation","hsv_gray","0");
t->addConfFileProperty("simulation","roi_height","3.0");
t->addConfFileProperty("simulation","roi_width","3.0");
t->addConfFileProperty("simulation","roi_x","0.0");
t->addConfFileProperty("simulation","roi_y","0.2");
t->addConfFileProperty("simulation","sHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","sHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","sSmooth","17");
t->addConfFileProperty("simulation","sValueMax","255");
t->addConfFileProperty("simulation","sValueMin","153");
t->addConfFileProperty("simulation","use_h","true");
t->addConfFileProperty("simulation","use_s","false");
t->addConfFileProperty("simulation","use_v","false");
t->addConfFileProperty("simulation","vHoughAccumulatorThreshold","25");
t->addConfFileProperty("simulation","vHoughEdgeThreshold","25");
t->addConfFileProperty("simulation","vSmooth","13");
t->addConfFileProperty("simulation","vValueMax","255");
t->addConfFileProperty("simulation","vValueMin","200");
t->addConfFileProperty("bottom_orange","buoy_radius","0.2");
t->addConfFileProperty("bottom_orange","buoy_timeout","20");
t->addConfFileProperty("bottom_orange","debug","false");
t->addConfFileProperty("bottom_orange","debug_gui","false");
t->addConfFileProperty("bottom_orange","filter_timeout","1.5");
t->addConfFileProperty("bottom_orange","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_orange","hHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_orange","hSmooth","40");
t->addConfFileProperty("bottom_orange","hValueMax","70");
t->addConfFileProperty("bottom_orange","hValueMin","1");
t->addConfFileProperty("bottom_orange","houghMaxCircle","150");
t->addConfFileProperty("bottom_orange","houghMinCircle","15");
t->addConfFileProperty("bottom_orange","hough_debug_h","false");
t->addConfFileProperty("bottom_orange","hough_debug_s","false");
t->addConfFileProperty("bottom_orange","hough_debug_v","false");
t->addConfFileProperty("bottom_orange","hsv_gray","0");
t->addConfFileProperty("bottom_orange","roi_height","3.0");
t->addConfFileProperty("bottom_orange","roi_width","3.0");
t->addConfFileProperty("bottom_orange","roi_x","0.0");
t->addConfFileProperty("bottom_orange","roi_y","0.2");
t->addConfFileProperty("bottom_orange","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_orange","sHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_orange","sSmooth","75");
t->addConfFileProperty("bottom_orange","sValueMax","255");
t->addConfFileProperty("bottom_orange","sValueMin","30");
t->addConfFileProperty("bottom_orange","use_h","true");
t->addConfFileProperty("bottom_orange","use_s","false");
t->addConfFileProperty("bottom_orange","use_v","false");
t->addConfFileProperty("bottom_orange","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("bottom_orange","vHoughEdgeThreshold","19");
t->addConfFileProperty("bottom_orange","vSmooth","75");
t->addConfFileProperty("bottom_orange","vValueMax","255");
t->addConfFileProperty("bottom_orange","vValueMin","220");
t->addConfFileProperty("bottom_orange","buoy_color","ORANGE");
t->addConfFileProperty("bottom_white","buoy_radius","0.2");
t->addConfFileProperty("bottom_white","buoy_timeout","20");
t->addConfFileProperty("bottom_white","debug","true");
t->addConfFileProperty("bottom_white","debug_gui","true");
t->addConfFileProperty("bottom_white","filter_timeout","1.5");
t->addConfFileProperty("bottom_white","hHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_white","hHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_white","hSmooth","40");
t->addConfFileProperty("bottom_white","hValueMax","255");
t->addConfFileProperty("bottom_white","hValueMin","15");
t->addConfFileProperty("bottom_white","houghMaxCircle","150");
t->addConfFileProperty("bottom_white","houghMinCircle","20");
t->addConfFileProperty("bottom_white","hough_debug_h","false");
t->addConfFileProperty("bottom_white","hough_debug_s","false");
t->addConfFileProperty("bottom_white","hough_debug_v","false");
t->addConfFileProperty("bottom_white","hsv_gray","0");
t->addConfFileProperty("bottom_white","roi_height","3.0");
t->addConfFileProperty("bottom_white","roi_width","3.0");
t->addConfFileProperty("bottom_white","roi_x","0.0");
t->addConfFileProperty("bottom_white","roi_y","0.2");
t->addConfFileProperty("bottom_white","sHoughAccumulatorThreshold","40");
t->addConfFileProperty("bottom_white","sHoughEdgeThreshold","30");
t->addConfFileProperty("bottom_white","sSmooth","41");
t->addConfFileProperty("bottom_white","sValueMax","255");
t->addConfFileProperty("bottom_white","sValueMin","50");
t->addConfFileProperty("bottom_white","use_h","false");
t->addConfFileProperty("bottom_white","use_s","true");
t->addConfFileProperty("bottom_white","use_v","true");
t->addConfFileProperty("bottom_white","vHoughAccumulatorThreshold","19");
t->addConfFileProperty("bottom_white","vHoughEdgeThreshold","19");
t->addConfFileProperty("bottom_white","vSmooth","41");
t->addConfFileProperty("bottom_white","vValueMax","255");
t->addConfFileProperty("bottom_white","vValueMin","210");
t->addConfFileProperty("bottom_white","buoy_color","WHITE");
	t->addProperty("buoy_radius", ConfigurationModel::DOUBLE);
	t->addProperty("hHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("sHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("vHoughAccumulatorThreshold", ConfigurationModel::INT);
	t->addProperty("hHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("sHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("vHoughEdgeThreshold", ConfigurationModel::INT);
	t->addProperty("houghMinCircle", ConfigurationModel::INT);
	t->addProperty("houghMaxCircle", ConfigurationModel::INT);
	t->addProperty("hValueMin", ConfigurationModel::INT);
	t->addProperty("sValueMin", ConfigurationModel::INT);
	t->addProperty("vValueMin", ConfigurationModel::INT);
	t->addProperty("hValueMax", ConfigurationModel::INT);
	t->addProperty("vValueMax", ConfigurationModel::INT);
	t->addProperty("sValueMax", ConfigurationModel::INT);
	t->addProperty("hSmooth", ConfigurationModel::INT);
	t->addProperty("sSmooth", ConfigurationModel::INT);
	t->addProperty("vSmooth", ConfigurationModel::INT);
	t->addProperty("debug_gui", ConfigurationModel::BOOL);
	t->addProperty("buoy_timeout", ConfigurationModel::INT);
	t->addProperty("filter_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("roi_x", ConfigurationModel::DOUBLE);
	t->addProperty("roi_y", ConfigurationModel::DOUBLE);
	t->addProperty("roi_width", ConfigurationModel::DOUBLE);
	t->addProperty("roi_height", ConfigurationModel::DOUBLE);
	t->addProperty("debug", ConfigurationModel::BOOL);
	t->addProperty("hsv_gray", ConfigurationModel::INT);
	t->addProperty("hough_debug_h", ConfigurationModel::BOOL);
	t->addProperty("hough_debug_s", ConfigurationModel::BOOL);
	t->addProperty("hough_debug_v", ConfigurationModel::BOOL);
	t->addProperty("use_h", ConfigurationModel::BOOL);
	t->addProperty("use_s", ConfigurationModel::BOOL);
	t->addProperty("use_v", ConfigurationModel::BOOL);
	t->addProperty("buoys_buffer_size", ConfigurationModel::INT);
	t->addProperty("buoys_buffer_size_min", ConfigurationModel::INT);
	t->addProperty("startvalidation", ConfigurationModel::INT);
	t->addProperty("mindist", ConfigurationModel::INT);
}
{
auto t = new Task("Hbridge::SensorReader");
(void)t;
t->addEvent("bad_input");
t->addEvent("configuration_failed");
t->addEvent("io_error");
t->addEvent("protocol_error");
t->addEvent("sensor_failure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","comTimeout","{microseconds => 500000}");
t->addConfFileProperty("default","configuration","[{name => left, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}, {name => right, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}, {name => dive, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}, {name => pitch, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}, {name => strave, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}, {name => yaw, externalTempSensor => false, statusFrequency => 1, encoder_config_intern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}, encoder_config_extern => {ticksPerTurn => 0, leapTickValue => 0, tickDivider => 1, ticksPerTurnDivided => 0, zeroPosition => 0.0, type => ENCODER_NONE}}]");
t->addConfFileProperty("default","isBusMaster","0");
t->addFullfillment("Dev::Sensors::Hbridge");
t->addFullfillment("Base::JointsStatusSrv");
t->addFullfillment("Dev::Bus::CAN::ClientSrv");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
	t->addProperty("comTimeout", ConfigurationModel::INT);
	t->addProperty("isBusMaster", ConfigurationModel::INT);
}
{
auto t = new Task("UwParticleLocalization::OrientationCorrection");
(void)t;
t->addEvent("reset");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","buffer_size","20");
t->addConfFileProperty("default","min_buffer_size","5");
	t->addProperty("buffer_size", ConfigurationModel::INT);
	t->addProperty("min_buffer_size", ConfigurationModel::INT);
}
{
auto t = new Task("Buoy::ServoingOnWall");
(void)t;
t->addEvent("aligned");
t->addEvent("buoy_servoing");
t->addEvent("passive_buoy_searching");
t->addEvent("wait_for_buoy_sample");
t->addEvent("wait_for_orientation_sample");
t->addEvent("wait_for_wall_sample");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("distance_to_buoy", ConfigurationModel::DOUBLE);
	t->addProperty("target_heading", ConfigurationModel::DOUBLE);
	t->addProperty("heading_step_size", ConfigurationModel::DOUBLE);
	t->addProperty("aligned_distance", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("StructureServoing::Task");
(void)t;
t->addEvent("no_orientation");
t->addEvent("no_structure");
t->addEvent("servoing");
t->addEvent("unsure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","average_fill","0.7");
t->addConfFileProperty("default","speed_factor","4.0");
t->addConfFileProperty("default","strave_speed","0.7");
t->addConfFileProperty("default","depth","-4.0");
t->addConfFileProperty("default","lost_threashold","0.1");
	t->addProperty("heading_speed", ConfigurationModel::DOUBLE);
	t->addProperty("strave_speed", ConfigurationModel::DOUBLE);
	t->addProperty("average_fill", ConfigurationModel::DOUBLE);
	t->addProperty("speed_factor", ConfigurationModel::DOUBLE);
	t->addProperty("lost_threashold", ConfigurationModel::DOUBLE);
	t->addProperty("lost_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("depth", ConfigurationModel::DOUBLE);
	t->addProperty("try_to_recover", ConfigurationModel::BOOL);
	t->addProperty("filter_factor", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("StructureServoing::Alignment");
(void)t;
t->addEvent("aligned");
t->addEvent("aligning");
t->addEvent("no_structure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","align_threashold","0.4");
t->addConfFileProperty("default","align_time","20.0");
t->addConfFileProperty("default","depth","-8.0");
t->addConfFileProperty("default","heading","3.14");
t->addConfFileProperty("default","lost_threashold","0.1");
t->addConfFileProperty("default","lost_timeout","5.0");
t->addConfFileProperty("default","x_factor","1.0");
t->addConfFileProperty("default","y_factor","1.0");
	t->addProperty("lost_threashold", ConfigurationModel::DOUBLE);
	t->addProperty("lost_timeout", ConfigurationModel::DOUBLE);
	t->addProperty("align_time", ConfigurationModel::DOUBLE);
	t->addProperty("align_threashold", ConfigurationModel::DOUBLE);
	t->addProperty("heading", ConfigurationModel::DOUBLE);
	t->addProperty("depth", ConfigurationModel::DOUBLE);
	t->addProperty("x_factor", ConfigurationModel::DOUBLE);
	t->addProperty("y_factor", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Syskit::ROS::Node");
(void)t;
t->addEvent("start");
t->addEvent("stop");
t->addEvent("interrupt");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("exception");
t->addEvent("fatal_error");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::RelFakeWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVRelativeMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("x", ConfigurationModel::DOUBLE);
	t->addProperty("y", ConfigurationModel::DOUBLE);
	t->addProperty("z", ConfigurationModel::DOUBLE);
	t->addProperty("heading", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AvalonControl::FakeWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("speed_x", ConfigurationModel::DOUBLE);
	t->addProperty("speed_y", ConfigurationModel::DOUBLE);
	t->addProperty("Z", ConfigurationModel::DOUBLE);
	t->addProperty("heading", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AvalonControl::MotionControlTask");
(void)t;
t->addEvent("cutoff_vector_invalid");
t->addEvent("joint_names_invalid");
t->addEvent("timeout");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","cutoff","[0.5, 0.5, 0.5, 0.5, 0.5, 0.5]");
t->addConfFileProperty("default","heading_pid","{max => 0.6, d => 0.0, p => -0.5, min => -0.6, i => 0.0}");
t->addConfFileProperty("default","pitch_pid","{max => 1.0, d => -0.8, p => -2.0, min => -1.0, i => -0.2}");
t->addConfFileProperty("default","pitch_target","0.0");
t->addConfFileProperty("default","timeout","0.0");
t->addConfFileProperty("default","x_factor","0.6");
t->addConfFileProperty("default","y_coupling_factor","-0.05");
t->addConfFileProperty("default","y_factor","1.0");
t->addConfFileProperty("default","z_coupling_factor","-0.19");
t->addConfFileProperty("default","z_pid","{max => 0.7, d => 0.0, p => 2.0, min => -0.7, i => 0.02}");
t->addConfFileProperty("default","use_min_ground_distance","true");
t->addConfFileProperty("default","min_ground_distance","0.6");
t->addConfFileProperty("default","joint_names","[yaw, dive, right, left, pitch, strave]");
t->addConfFileProperty("simulation","z_coupling_factor","0.0");
t->addConfFileProperty("simulation","y_coupling_factor","0.0");
t->addConfFileProperty("simulation","pitch_target","0.0");
t->addConfFileProperty("simulation","x_factor","1.0");
t->addConfFileProperty("simulation","timeout","0.0");
t->addConfFileProperty("simulation","y_factor","3.0");
t->addConfFileProperty("simulation","pitch_pid","{p => 0.1, i => 0.0, d => 0.0}");
t->addConfFileProperty("simulation","heading_pid","{i => 0.0, p => -0.5}");
t->addConfFileProperty("simulation","z_pid","{p => 1.0, i => 0.1}");
t->addConfFileProperty("simulation","cutoff","[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
t->addConfFileProperty("simulation","use_min_ground_distance","false");
t->addConfFileProperty("simulation","min_ground_distance","0.2");
t->addFullfillment("Base::AUVMotionControlledSystemSrv");
t->addFullfillment("Base::AUVMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::JointsControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("z_coupling_factor", ConfigurationModel::DOUBLE);
	t->addProperty("dagon_mode", ConfigurationModel::BOOL);
	t->addProperty("use_min_ground_distance", ConfigurationModel::BOOL);
	t->addProperty("min_ground_distance", ConfigurationModel::DOUBLE);
	t->addProperty("pitch_target", ConfigurationModel::DOUBLE);
	t->addProperty("y_factor", ConfigurationModel::DOUBLE);
	t->addProperty("y_coupling_factor", ConfigurationModel::DOUBLE);
	t->addProperty("x_factor", ConfigurationModel::DOUBLE);
	t->addProperty("timeout", ConfigurationModel::DOUBLE);
	t->addProperty("turn_coupling_factor", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Syskit::RubyTaskContext");
(void)t;
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("exception");
t->addEvent("fatal_error");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("LowLevelDriver::LowLevelTask");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","port","/dev/ttyS0");
	t->addProperty("longExposure", ConfigurationModel::INT);
	t->addProperty("shortExposure", ConfigurationModel::INT);
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("securityOverride", ConfigurationModel::BOOL);
}
{
auto t = new Task("HsvMosaicing::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","cols","5");
t->addConfFileProperty("default","rows","5");
t->addConfFileProperty("default","averageFilled","0.2");
	t->addProperty("cols", ConfigurationModel::INT);
	t->addProperty("rows", ConfigurationModel::INT);
	t->addProperty("averageFilled", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("AvalonControl::PositionControlTask");
(void)t;
t->addEvent("position_variance_to_high");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("waiting_for_valid_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","optimal_heading_distance","999.0");
t->addConfFileProperty("default","timeout","1.0");
t->addConfFileProperty("default","x_pid","{max => 1.0, d => 0.0, p => 0.05, min => -1.0, i => 0.0}");
t->addConfFileProperty("default","y_pid","{max => 1.0, d => 0.0, p => 0.3, min => -1.0, i => 0.0}");
t->addFullfillment("Base::AUVRelativeMotionControlledSystemSrv");
t->addFullfillment("Base::AUVRelativeMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("timeout", ConfigurationModel::DOUBLE);
	t->addProperty("optimal_heading_distance", ConfigurationModel::DOUBLE);
	t->addProperty("position_variance_threshold", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Interfaces::IMU");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("imu_frame", ConfigurationModel::STRING);
	t->addProperty("world_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("Interfaces::LaserRangeFinder");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("remission_values", ConfigurationModel::BOOL);
	t->addProperty("start_step", ConfigurationModel::INT);
	t->addProperty("end_step", ConfigurationModel::INT);
	t->addProperty("scan_skip", ConfigurationModel::INT);
	t->addProperty("merge_count", ConfigurationModel::INT);
}
{
auto t = new Task("UwParticleLocalization::FastFusion");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("velocity_timeout", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("OrientationEstimator::IKF");
(void)t;
t->addEvent("alignment_error");
t->addEvent("configuration_error");
t->addEvent("initial_alignment");
t->addEvent("initial_north_seeking");
t->addEvent("missing_transformation");
t->addEvent("nan_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","filter_configuration","{source_frame_name => orientation, target_frame_name => world, use_samples_as_theoretical_gravity => true, use_magnetometers => false, fog_type => MULTI_AXIS, initial_heading_source => INITIAL_HEADING_PARAMETER, substract_earth_rotation => false, initial_alignment_duration => 30.0, correction_frequency => 1.0}");
t->addConfFileProperty("default","initial_heading","0.0");
t->addConfFileProperty("default","transformer_max_latency","0.1");
t->addConfFileProperty("default","fog_samples_period","0.01");
t->addConfFileProperty("default","initial_orientation_period","0.01");
t->addConfFileProperty("default","imu_samples_period","0.01");
t->addConfFileProperty("default","transformer_status_period","1.0");
t->addConfFileProperty("local_initial_estimator","filter_configuration","{source_frame_name => body, target_frame_name => local_orientation, use_samples_as_theoretical_gravity => true, use_magnetometers => false, fog_type => SINGLE_AXIS, initial_heading_source => INITIAL_HEADING_PARAMETER, substract_earth_rotation => false, initial_alignment_duration => 30.0, correction_frequency => 1.0}");
t->addConfFileProperty("local_initial_estimator","initial_heading","0.0");
t->addConfFileProperty("avalon","filter_configuration","{source_frame_name => body, target_frame_name => world_orientation, use_samples_as_theoretical_gravity => true, use_magnetometers => false, fog_type => SINGLE_AXIS, initial_heading_source => INITIAL_HEADING_PARAMETER, substract_earth_rotation => true, initial_alignment_duration => 0.0, correction_frequency => 1.0}");
t->addConfFileProperty("avalon","initial_heading","0.0");
t->addConfFileProperty("dagon","filter_configuration","{source_frame_name => body, target_frame_name => world_orientation, use_samples_as_theoretical_gravity => true, use_magnetometers => false, fog_type => MULTI_AXIS, initial_heading_source => INITIAL_HEADING_PARAMETER, substract_earth_rotation => true, initial_alignment_duration => 30.0, correction_frequency => 1.0}");
t->addConfFileProperty("dagon","initial_heading","0.0");
t->addConfFileProperty("simulation","filter_configuration","{substract_earth_rotation => false}");
t->addConfFileProperty("imu_xsens","inertial_noise_imu","{bandwidth => 100.0, gbiasoff => {data => [-0.00204578, -0.00220685, 0.000797458]}, gyrorw => {data => [0.0006898864, 0.0007219069, 0.0005708627]}, gyrorrw => {data => [0.0, 0.0, 0.0]}, gbiasins => {data => [1.0e-05, 1.0e-05, 1.0e-05]}, abiasoff => {data => [9.19516e-05, 0.000178959, 0.00225158]}, accrw => {data => [0.02236, 0.02236, 0.02236]}, accrrw => {data => [0.0, 0.0, 0.0]}, abiasins => {data => [1.0e-05, 1.0e-05, 1.0e-05]}, accresolut => {data => [0.05, 0.05, 0.05]}, magrw => {data => [0.1, 0.1, 1.01]}}");
t->addConfFileProperty("imu_xsens","adaptive_config_acc_imu","{M1 => 5, M2 => 5, gamma => 0.1}");
t->addConfFileProperty("stim300_5g","adaptive_config_acc_imu","{M1 => 5, M2 => 5, gamma => 0.001}");
t->addConfFileProperty("stim300_5g","adaptive_config_acc_fog","{M1 => 10, M2 => 2, gamma => 0.003}");
t->addConfFileProperty("stim300_5g","inertial_noise_imu","{bandwidth => 33.0, gbiasoff => {data => [0.0, 0.0, 0.0]}, gyrorw => {data => [7.0e-05, 7.0e-05, 7.0e-05]}, gyrorrw => {data => [0.0, 0.0, 0.0]}, gbiasins => {data => [7.05e-06, 4.82e-06, 6.36e-06]}, abiasoff => {data => [0.0, 0.0, 0.0]}, accrw => {data => [0.0005420144, 0.0005131682, 0.0004908665]}, accrrw => {data => [0.0, 0.0, 0.0]}, abiasins => {data => [7.05e-06, 4.82e-06, 6.36e-06]}, accresolut => {data => [0.0024525, 0.0024525, 0.0024525]}, magrw => {data => [0.1, 0.1, 0.01]}}");
t->addConfFileProperty("stim300_5g","inertial_noise_fog","{bandwidth => 16.0, abiasoff => {data => [0.0, 0.0, 0.0]}, accrw => {data => [0.005019287, 0.005019287, 0.005019287]}, accrrw => {data => [0.0, 0.0, 0.0]}, abiasins => {data => [0.008292219, 0.008160451, 0.00846485]}, accresolut => {data => [0.002, 0.002, 0.002]}}");
t->addConfFileProperty("imu_kvh_1750","inertial_noise_fog","{bandwidth => 100.0, gbiasoff => {data => [0.0, 0.0, 0.0]}, gyrorw => {data => [4.37e-06, 3.34e-06, 6.03e-06]}, gyrorrw => {data => [0.0, 0.0, 0.0]}, gbiasins => {data => [5.28e-07, 1.18e-06, 6.03e-07]}, abiasoff => {data => [0.0, 0.0, 0.0]}, accrw => {data => [0.001032452, 0.001339378, 0.000973999]}, accrrw => {data => [0.0, 0.0, 0.0]}, abiasins => {data => [0.0006094821, 0.0006335726, 0.0006150693]}, accresolut => {data => [0.005886, 0.005886, 0.005886]}}");
t->addConfFileProperty("imu_kvh_1750","adaptive_config_acc_fog","{M1 => 5, M2 => 5, gamma => 0.1}");
t->addConfFileProperty("fog_kvh_DSP_3000","inertial_noise_fog","{bandwidth => 100.0, gbiasoff => {data => [0.006911825, 0.1202073, 0.0]}, gyrorw => {data => [0.0006898864, 0.0007219069, 1.32e-05]}, gyrorrw => {data => [0.0, 0.0, 0.0]}, gbiasins => {data => [2.42e-07, 2.42e-07, 2.42e-07]}}");
t->addConfFileProperty("fog_kvh_DSP_3000","adaptive_config_acc_fog","{M1 => 5, M2 => 5, gamma => 0.1}");
t->addConfFileProperty("Bremen","location","{latitude => 0.926978312, longitude => 0.154608945, altitude => 12.0, magnetic_declination => 0.03098929, magnetic_declination_mode => EAST, dip_angle => 1.187778974}");
t->addConfFileProperty("ESTEC","location","{latitude => 0.911367, longitude => 0.07709999, altitude => 0.0, magnetic_declination => 0.006690428, magnetic_declination_mode => EAST, dip_angle => 0.00663}");
t->addConfFileProperty("sauce14","location","{latitude => 0.76961941, longitude => 0.172172367, altitude => 0.0, magnetic_declination => 0.037233685, magnetic_declination_mode => EAST, dip_angle => 1.051037276}");
	t->addProperty("initial_heading", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("imu_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("fog_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("initial_orientation_period", ConfigurationModel::DOUBLE);
	t->addProperty("imu_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
	t->addProperty("fog_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("UwParticleLocalization::MotionModel");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","advanced_motion_model","false");
t->addConfFileProperty("default","joint_names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("default","param_TCM","[0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("default","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_floating","true");
t->addConfFileProperty("default","param_length","1.0");
t->addConfFileProperty("default","param_linDamp","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.681775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_linDampNeg","{rows => 6, cols => 6, data => [7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 19.226193, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_mass","37.5");
t->addConfFileProperty("default","param_radius","0.1");
t->addConfFileProperty("default","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","param_thrusterCoefficient","[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("default","param_thrusterVoltage","33.0");
t->addConfFileProperty("default","velocity_covariance","{data => [1.0, 1.0, 1.0]}");
t->addConfFileProperty("sim_nurc","advanced_motion_model","false");
t->addConfFileProperty("sim_nurc","joint_names","[pitch, dive, right, left, yaw, strave]");
t->addConfFileProperty("sim_nurc","param_TCM","[0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("sim_nurc","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_floating","true");
t->addConfFileProperty("sim_nurc","param_length","1.0");
t->addConfFileProperty("sim_nurc","param_linDamp","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_linDampNeg","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_mass","6.5");
t->addConfFileProperty("sim_nurc","param_radius","0.1");
t->addConfFileProperty("sim_nurc","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("sim_nurc","param_thrusterCoefficient","[0.005, 0.005, 0.005, 0.005, 0.005, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("sim_nurc","param_thrusterVoltage","33.0");
t->addConfFileProperty("sim_nurc","velocity_covariance","{data => [1.0, 1.0, 1.0]}");
t->addConfFileProperty("dagon","advanced_motion_model","false");
t->addConfFileProperty("dagon","joint_names","[dive_tail, dive_head, surge_left, surge_right, sway_tail, foo]");
t->addConfFileProperty("dagon","param_TCM","[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("dagon","param_centerOfBuoyancy","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_centerOfGravity","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_floating","true");
t->addConfFileProperty("dagon","param_length","1.0");
t->addConfFileProperty("dagon","param_linDamp","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_linDampNeg","{rows => 6, cols => 6, data => [8.203187564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 24.94216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_mass","50.0");
t->addConfFileProperty("dagon","param_radius","0.1");
t->addConfFileProperty("dagon","param_sqDamp","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_sqDampNeg","{rows => 6, cols => 6, data => [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}");
t->addConfFileProperty("dagon","param_thrusterCoefficient","[0.005, 0.005, 0.02952625, 0.02952625, 0.0208693, 0.005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
t->addConfFileProperty("dagon","param_thrusterVoltage","30.0");
t->addConfFileProperty("dagon","velocity_covariance","{data => [1.0, 1.0, 1.0]}");
	t->addProperty("advanced_motion_model", ConfigurationModel::BOOL);
	t->addProperty("param_length", ConfigurationModel::DOUBLE);
	t->addProperty("param_radius", ConfigurationModel::DOUBLE);
	t->addProperty("param_mass", ConfigurationModel::DOUBLE);
	t->addProperty("param_thrusterVoltage", ConfigurationModel::DOUBLE);
	t->addProperty("param_floating", ConfigurationModel::BOOL);
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("thruster_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("orientation_samples_period", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Interfaces::ActuatorSensorReader");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("OffshorePipelineDetector::SonarDetector");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("min_depth", ConfigurationModel::DOUBLE);
	t->addProperty("max_depth", ConfigurationModel::DOUBLE);
	t->addProperty("number_of_scans", ConfigurationModel::INT);
	t->addProperty("start_angle", ConfigurationModel::DOUBLE);
	t->addProperty("end_angle", ConfigurationModel::DOUBLE);
	t->addProperty("resolution", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("OffshorePipelineDetector::Task");
(void)t;
t->addEvent("align_auv");
t->addEvent("check_candidate");
t->addEvent("end_of_pipe");
t->addEvent("follow_pipe");
t->addEvent("found_pipe");
t->addEvent("lost_pipe");
t->addEvent("no_altitude_reading");
t->addEvent("no_orientation_reading");
t->addEvent("search_pipe");
t->addEvent("weak_signal");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","align_during_check","true");
t->addConfFileProperty("default","debugging","true");
t->addConfFileProperty("default","default_x","0.3");
t->addConfFileProperty("default","delta_aligning","0.785");
t->addConfFileProperty("default","depth","-6.0");
t->addConfFileProperty("default","distance_to_pipe","0.0");
t->addConfFileProperty("default","do_dynamic_aligning","true");
t->addConfFileProperty("default","end_of_pipe_offset","0.2");
t->addConfFileProperty("default","find_anisotropy","0.0");
t->addConfFileProperty("default","find_confidence","0.6");
t->addConfFileProperty("default","find_end_of_pipe","0.9");
t->addConfFileProperty("default","invert_colors","true");
t->addConfFileProperty("default","lose_confidence","0.2");
t->addConfFileProperty("default","lose_end_of_pipe","0.5");
t->addConfFileProperty("default","max_align_turn_speed_per_s","0.1");
t->addConfFileProperty("default","max_center_dist","0.4");
t->addConfFileProperty("default","max_depth","-10.0");
t->addConfFileProperty("default","max_heading","3.14");
t->addConfFileProperty("default","max_width","0.0");
t->addConfFileProperty("default","maximum_check_time","4.0");
t->addConfFileProperty("default","min_center_dist","0.1");
t->addConfFileProperty("default","min_count","10");
t->addConfFileProperty("default","min_depth","-0.2");
t->addConfFileProperty("default","min_heading","-3.14");
t->addConfFileProperty("default","min_width","0.0");
t->addConfFileProperty("default","out_of_center","0.0");
t->addConfFileProperty("default","prefered_heading","0.0");
t->addConfFileProperty("default","preffered_turn_direction","0");
t->addConfFileProperty("default","preprocessing_type","0");
t->addConfFileProperty("default","search_depth_delta","1.5");
t->addConfFileProperty("default","time_between_detection","2.0");
t->addConfFileProperty("default","use_channel","-1");
t->addConfFileProperty("default","weak_signal","0.7");
t->addConfFileProperty("default","weak_signal_x","0.15");
t->addConfFileProperty("simulation","use_channel","2");
t->addConfFileProperty("simulation","find_end_of_pipe","0.95");
t->addConfFileProperty("simulation","depth","-6.5");
	t->addProperty("depth", ConfigurationModel::DOUBLE);
	t->addProperty("min_depth", ConfigurationModel::DOUBLE);
	t->addProperty("max_depth", ConfigurationModel::DOUBLE);
	t->addProperty("distance_to_pipe", ConfigurationModel::DOUBLE);
	t->addProperty("prefered_heading", ConfigurationModel::DOUBLE);
	t->addProperty("end_of_pipe_offset", ConfigurationModel::DOUBLE);
	t->addProperty("delta_aligning", ConfigurationModel::DOUBLE);
	t->addProperty("max_center_dist", ConfigurationModel::DOUBLE);
	t->addProperty("min_center_dist", ConfigurationModel::DOUBLE);
	t->addProperty("do_dynamic_aligning", ConfigurationModel::BOOL);
	t->addProperty("preffered_turn_direction", ConfigurationModel::INT);
	t->addProperty("max_align_turn_speed_per_s", ConfigurationModel::DOUBLE);
	t->addProperty("time_between_detection", ConfigurationModel::DOUBLE);
	t->addProperty("maximum_check_time", ConfigurationModel::DOUBLE);
	t->addProperty("align_during_check", ConfigurationModel::BOOL);
	t->addProperty("default_x", ConfigurationModel::DOUBLE);
	t->addProperty("weak_signal_x", ConfigurationModel::DOUBLE);
	t->addProperty("default_distance_to_pipe", ConfigurationModel::DOUBLE);
	t->addProperty("default_fx", ConfigurationModel::DOUBLE);
	t->addProperty("default_fy", ConfigurationModel::DOUBLE);
	t->addProperty("search_depth_delta", ConfigurationModel::DOUBLE);
	t->addProperty("out_of_center", ConfigurationModel::DOUBLE);
	t->addProperty("min_count", ConfigurationModel::INT);
	t->addProperty("min_width", ConfigurationModel::DOUBLE);
	t->addProperty("max_width", ConfigurationModel::DOUBLE);
	t->addProperty("find_confidence", ConfigurationModel::DOUBLE);
	t->addProperty("lose_confidence", ConfigurationModel::DOUBLE);
	t->addProperty("find_anisotropy", ConfigurationModel::DOUBLE);
	t->addProperty("find_end_of_pipe", ConfigurationModel::DOUBLE);
	t->addProperty("lose_end_of_pipe", ConfigurationModel::DOUBLE);
	t->addProperty("weak_signal", ConfigurationModel::DOUBLE);
	t->addProperty("min_heading", ConfigurationModel::DOUBLE);
	t->addProperty("max_heading", ConfigurationModel::DOUBLE);
	t->addProperty("invert_colors", ConfigurationModel::BOOL);
	t->addProperty("use_channel", ConfigurationModel::INT);
	t->addProperty("debugging", ConfigurationModel::BOOL);
	t->addProperty("preprocessing_type", ConfigurationModel::INT);
}
{
auto t = new Task("Taskmon::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("watch_all", ConfigurationModel::BOOL);
}
{
auto t = new Task("Gps::MB500Task");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
	t->addProperty("utm_zone", ConfigurationModel::INT);
	t->addProperty("utm_north", ConfigurationModel::BOOL);
	t->addProperty("device", ConfigurationModel::STRING);
	t->addProperty("port", ConfigurationModel::STRING);
	t->addProperty("correction_port", ConfigurationModel::STRING);
	t->addProperty("period", ConfigurationModel::DOUBLE);
	t->addProperty("ntpd_shm_unit", ConfigurationModel::INT);
}
{
auto t = new Task("Gps::GPSDTask");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","hostname","localhost");
t->addConfFileProperty("default","origin","{data => [0.0, 0.0, 0.0]}");
t->addConfFileProperty("default","utm_north","true");
t->addConfFileProperty("default","utm_zone","32");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
	t->addProperty("utm_zone", ConfigurationModel::INT);
	t->addProperty("utm_north", ConfigurationModel::BOOL);
	t->addProperty("hostname", ConfigurationModel::STRING);
}
{
auto t = new Task("Gps::BaseTask");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
	t->addProperty("utm_zone", ConfigurationModel::INT);
	t->addProperty("utm_north", ConfigurationModel::BOOL);
}
{
auto t = new Task("LineScanner::Task");
(void)t;
t->addEvent("empty_image");
t->addEvent("no_laser");
t->addEvent("overexposed");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","calibration","{camLeft => {fx => 475.165, fy => 464.937, cx => 341.189, cy => 231.744, d0 => -0.182326, d1 => 0.229556, d2 => 0.0163551, d3 => -0.00182374, width => -1, height => -1, ex => NaN, ey => NaN}, camRight => {fx => 1.0, fy => 1.0, cx => 0.0, cy => 0.0, d0 => 0.0, d1 => 0.0, d2 => 0.0339155, d3 => 0.0, width => -1, height => -1, ex => NaN, ey => NaN}, extrinsic => {tx => 0.0355682, ty => 0.526439, tz => 0.00524579, rx => 0.6301, ry => -0.039252, rz => -0.0721216}}");
t->addConfFileProperty("default","colorize_interval","0.3");
t->addConfFileProperty("default","colorize_points","true");
t->addConfFileProperty("default","debug_mode","false");
t->addConfFileProperty("default","laser_width_bottom","7.0");
t->addConfFileProperty("default","laser_width_top","1.0");
t->addConfFileProperty("default","max_gap_length","5.0");
t->addConfFileProperty("default","min_segment_length","40");
t->addConfFileProperty("default","min_seperation","40");
t->addConfFileProperty("default","min_snr","10.0");
t->addConfFileProperty("default","undistort_frame","true");
t->addConfFileProperty("default","unique_solution","true");
t->addConfFileProperty("default","use_green_channel","true");
	t->addProperty("debug_mode", ConfigurationModel::BOOL);
	t->addProperty("use_green_channel", ConfigurationModel::BOOL);
	t->addProperty("unique_solution", ConfigurationModel::BOOL);
	t->addProperty("undistort_frame", ConfigurationModel::BOOL);
	t->addProperty("subpixel", ConfigurationModel::BOOL);
	t->addProperty("laser_width_top", ConfigurationModel::DOUBLE);
	t->addProperty("laser_width_bottom", ConfigurationModel::DOUBLE);
	t->addProperty("min_segment_length", ConfigurationModel::INT);
	t->addProperty("min_snr", ConfigurationModel::DOUBLE);
	t->addProperty("max_gap_length", ConfigurationModel::DOUBLE);
	t->addProperty("min_seperation", ConfigurationModel::INT);
	t->addProperty("col_step", ConfigurationModel::INT);
	t->addProperty("colorize_points", ConfigurationModel::BOOL);
	t->addProperty("colorize_interval", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Sysmon::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::SystemStatus");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("Modemdriver::Modem");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("distance_request_interval", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("Modemdriver::ModemSerial");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("distance_request_interval", ConfigurationModel::DOUBLE);
	t->addProperty("serial_device", ConfigurationModel::STRING);
}
{
auto t = new Task("Modemdriver::ModemCanbus");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::ASVModem");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
	t->addProperty("distance_request_interval", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("SonarStructureServoing::Task");
(void)t;
t->addEvent("inspecting_structure");
t->addEvent("missing_transformation");
t->addEvent("searching_structure");
t->addEvent("validating_structure");
t->addEvent("waiting_for_target_depth");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","servoing_direction","0.0");
t->addConfFileProperty("default","left_opening_angle","1.01");
t->addConfFileProperty("default","right_opening_angle","1.01");
t->addConfFileProperty("default","fixed_depth","-5.0");
t->addConfFileProperty("default","servoing_distance","2.5");
t->addConfFileProperty("default","servoing_speed","0.0");
t->addConfFileProperty("default","angular_resolution_sonar","0.019638");
t->addConfFileProperty("default","dbscan_epsilon","10.0");
t->addConfFileProperty("default","expected_structure_diameter","1.5");
t->addConfFileProperty("default","max_mahalanobis_distance","1.0");
t->addConfFileProperty("default","min_valid_cadidate_count","3");
t->addConfFileProperty("default","body_frame","body");
t->addConfFileProperty("default","odometry_frame","odometry");
t->addConfFileProperty("default","sonar_frame","sonar");
t->addConfFileProperty("default","odometry_samples_period","0.01");
t->addConfFileProperty("default","sonarbeam_feature_period","0.1");
t->addConfFileProperty("default","transformer_max_latency","0.5");
t->addConfFileProperty("default","transformer_status_period","1.0");
t->addConfFileProperty("default","enable_debug","true");
t->addConfFileProperty("simulation","fixed_depth","-10.0");
t->addConfFileProperty("move_right","servoing_speed","-0.5");
t->addConfFileProperty("move_left","servoing_speed","0.5");
	t->addProperty("servoing_direction", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_distance", ConfigurationModel::DOUBLE);
	t->addProperty("fixed_depth", ConfigurationModel::DOUBLE);
	t->addProperty("servoing_speed", ConfigurationModel::DOUBLE);
	t->addProperty("left_opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("right_opening_angle", ConfigurationModel::DOUBLE);
	t->addProperty("angular_resolution_sonar", ConfigurationModel::DOUBLE);
	t->addProperty("dbscan_epsilon", ConfigurationModel::DOUBLE);
	t->addProperty("expected_structure_diameter", ConfigurationModel::DOUBLE);
	t->addProperty("max_mahalanobis_distance", ConfigurationModel::DOUBLE);
	t->addProperty("min_valid_cadidate_count", ConfigurationModel::INT);
	t->addProperty("enable_debug", ConfigurationModel::BOOL);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("odometry_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("sonarbeam_feature_period", ConfigurationModel::DOUBLE);
	t->addProperty("sonar_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
	t->addProperty("odometry_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("ImagePreprocessing::BaseTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("calibrate", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
}
{
auto t = new Task("ImagePreprocessing::DepthImage2Pointcloud");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("aggregator_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("stream_aligner_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("color_frame_period", ConfigurationModel::DOUBLE);
	t->addProperty("frame_period", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("input_frame", ConfigurationModel::STRING);
	t->addProperty("pc_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("ImagePreprocessing::MonoTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("calibrate", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
}
{
auto t = new Task("GpsHelper::MapToGPS");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("utm_zone", ConfigurationModel::INT);
	t->addProperty("utm_north", ConfigurationModel::BOOL);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("position_samples_period", ConfigurationModel::DOUBLE);
	t->addProperty("map_frame", ConfigurationModel::STRING);
	t->addProperty("gps_utm_zone_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("ImagePreprocessing::HSVSegmentationAndBlur");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","blur","42");
t->addConfFileProperty("default","hMax","107");
t->addConfFileProperty("default","hMin","40");
t->addConfFileProperty("default","sMax","113");
t->addConfFileProperty("default","sMin","0");
t->addConfFileProperty("default","steps_per_frame","0");
t->addConfFileProperty("default","target_pixel_s","70000");
t->addConfFileProperty("default","unsetValue","0");
t->addConfFileProperty("default","vMax","256");
t->addConfFileProperty("default","vMin","134");
t->addConfFileProperty("structure","steps_per_frame","0");
t->addConfFileProperty("structure","hMin","70");
t->addConfFileProperty("structure","hMax","103");
t->addConfFileProperty("structure","sMin","40");
t->addConfFileProperty("structure","sMax","126");
t->addConfFileProperty("structure","vMin","-1");
t->addConfFileProperty("structure","vMax","256");
t->addConfFileProperty("structure","blur","42");
t->addConfFileProperty("structure_simulation","steps_per_frame","0");
t->addConfFileProperty("structure_simulation","hMin","40");
t->addConfFileProperty("structure_simulation","hMax","110");
t->addConfFileProperty("structure_simulation","sMin","40");
t->addConfFileProperty("structure_simulation","sMax","110");
t->addConfFileProperty("structure_simulation","vMin","66");
t->addConfFileProperty("structure_simulation","vMax","206");
t->addConfFileProperty("structure_simulation","blur","149");
	t->addProperty("hMin", ConfigurationModel::INT);
	t->addProperty("hMax", ConfigurationModel::INT);
	t->addProperty("vMin", ConfigurationModel::INT);
	t->addProperty("sMax", ConfigurationModel::INT);
	t->addProperty("sMin", ConfigurationModel::INT);
	t->addProperty("vMax", ConfigurationModel::INT);
	t->addProperty("blur", ConfigurationModel::INT);
	t->addProperty("unsetValue", ConfigurationModel::INT);
	t->addProperty("invert", ConfigurationModel::BOOL);
	t->addProperty("minVadapt", ConfigurationModel::INT);
	t->addProperty("maxVadapt", ConfigurationModel::INT);
	t->addProperty("target_pixel_s", ConfigurationModel::INT);
	t->addProperty("steps_per_frame", ConfigurationModel::INT);
}
{
auto t = new Task("ImagePreprocessing::StereoTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("calibrate", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
}
{
auto t = new Task("GpsHelper::WaypointNavigation");
(void)t;
t->addEvent("last_waypoint_reached");
t->addEvent("validating_gps_fix");
t->addEvent("waiting_for_gps_fix");
t->addEvent("waypoint_reached");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","min_distance_delta","30.0");
t->addConfFileProperty("default","valid_gps_fix_time","10.0");
t->addConfFileProperty("default","waypoint_radius","30.0");
t->addConfFileProperty("default","waypoints","[]");
t->addConfFileProperty("long_range_nav","waypoints","[{data => [-169.77750577195548, 25.02584568876773, -3.0]}, {data => [-518.9540244974196, 4.777934763580561, -3.0]}, {data => [-511.98275818908587, -127.80487220361829, -3.0]}, {data => [-254.6220269454643, -109.86163759976625, -3.0]}, {data => [-172.64859561109915, 21.167946573346853, -3.0]}]");
t->addConfFileProperty("short_range_nav","waypoints","[{data => [-10.0, 10.0, -1.0]}, {data => [-10.0, 20.0, -1.0]}, {data => [-20.0, 20.0, -1.0]}, {data => [-20.0, 10.0, -1.0]}]");
t->addConfFileProperty("short_range_nav","waypoint_radius","5.0");
t->addConfFileProperty("avalon_nav_test","waypoints","[{data => [-50.0, 10.0, -0.0]}, {data => [-100.0, 10.0, -0.0]}, {data => [-50.0, 10.0, -0.0]}]");
t->addConfFileProperty("avalon_nav_test","waypoint_radius","2.0");
t->addConfFileProperty("eurathlon_final","waypoints","[{data => [-253.73852352052927, -107.45975578110665, -3.0]}, {data => [-170.56619806122035, 21.711960368789732, -3.0]}, {data => [-19.978130170609802, 35.180134628899395, -2.5]}, {data => [-10.046098589431494, 26.152713438495994, -2.5]}]");
	t->addProperty("valid_gps_fix_time", ConfigurationModel::DOUBLE);
	t->addProperty("min_distance_delta", ConfigurationModel::DOUBLE);
	t->addProperty("waypoint_radius", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("BatteryWatcher::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::Battery");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("GpsHelper::GPSFaker");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("write_valid_samples", ConfigurationModel::BOOL);
}
{
auto t = new Task("ModemCan::Task");
(void)t;
t->addEvent("controlling");
t->addEvent("sended_command");
t->addEvent("waiting_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","scale","2.5");
t->addConfFileProperty("default","sendInterval","2000.0");
t->addFullfillment("Dev::Sensors::Modem");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
	t->addProperty("scale", ConfigurationModel::DOUBLE);
	t->addProperty("sendInterval", ConfigurationModel::DOUBLE);
	t->addProperty("resend_time", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("VideoStreamerVlc::Streamer{1}");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
}
{
auto t = new Task("VideoStreamerVlc::Capturer");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("VideoStreamerVlc::Streamer");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
}
{
auto t = new Task("AuvWaypointNavigator::Task");
(void)t;
t->addEvent("dynamic_navigation");
t->addEvent("keep_waypoint");
t->addEvent("no_pose_samples");
t->addEvent("static_navigation");
t->addEvent("wait_for_waypoints");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("timeout", ConfigurationModel::DOUBLE);
	t->addProperty("z_tolerance", ConfigurationModel::DOUBLE);
	t->addProperty("z_init", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("RearSonarDistanceEstimator::Task");
(void)t;
t->addEvent("timeout_depth");
t->addEvent("timeout_sonar");
t->addEvent("waiting_for_depth");
t->addEvent("waiting_for_sonar");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("sonar_timeout", ConfigurationModel::INT);
	t->addProperty("depth_timeout", ConfigurationModel::INT);
}
{
auto t = new Task("StructureReconstruction::Task");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","translation_delta","0.4");
t->addConfFileProperty("default","rotation_delta","0.15");
t->addConfFileProperty("default","time_delta","1.0");
t->addConfFileProperty("default","target_folder","/home/goldhoorn/dev-avalon-21/structure_reconstruction_out/");
t->addConfFileProperty("default","world_frame","map_halle");
t->addConfFileProperty("default","body_frame","body");
t->addConfFileProperty("default","bottom_camera_frame","bottom_camera");
t->addConfFileProperty("default","front_camera_frame","front_camera");
t->addConfFileProperty("default","front_camera_period","0.1");
t->addConfFileProperty("default","bottom_camera_period","0.1");
t->addConfFileProperty("default","transformer_max_latency","0.2");
t->addConfFileProperty("default","transformer_status_period","1.0");
	t->addProperty("target_folder", ConfigurationModel::STRING);
	t->addProperty("time_delta", ConfigurationModel::DOUBLE);
	t->addProperty("translation_delta", ConfigurationModel::DOUBLE);
	t->addProperty("rotation_delta", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_max_latency", ConfigurationModel::DOUBLE);
	t->addProperty("transformer_status_period", ConfigurationModel::DOUBLE);
	t->addProperty("front_camera_period", ConfigurationModel::DOUBLE);
	t->addProperty("bottom_camera_period", ConfigurationModel::DOUBLE);
	t->addProperty("front_camera_frame", ConfigurationModel::STRING);
	t->addProperty("body_frame", ConfigurationModel::STRING);
	t->addProperty("bottom_camera_frame", ConfigurationModel::STRING);
	t->addProperty("world_frame", ConfigurationModel::STRING);
}
{
auto t = new Task("Lights::Lights");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","device","");
t->addConfFileProperty("default","using_can","true");
t->addFullfillment("Dev::Actuators::Lights");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
	t->addProperty("device", ConfigurationModel::STRING);
	t->addProperty("using_can", ConfigurationModel::BOOL);
}
{
auto t = new Task("CameraProsilica::Task");
(void)t;
t->addEvent("cannot_start_grabbing");
t->addEvent("configure_error");
t->addEvent("no_camera");
t->addEvent("no_camera_interface");
t->addEvent("processing_error");
t->addEvent("unkown_parameter");
t->addEvent("unsupported_parameter");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addConfFileProperty("default","binning_x","1");
t->addConfFileProperty("default","binning_y","1");
t->addConfFileProperty("default","undistort","false");
t->addConfFileProperty("default","frame_buffer_size","10");
t->addConfFileProperty("default","frame_start_trigger_event","none");
t->addConfFileProperty("default","clear_buffer_if_frame_drop","false");
t->addConfFileProperty("default","disable_frame_raw","true");
t->addConfFileProperty("default","log_interval_in_sec","5");
t->addConfFileProperty("default","synchronize_time_interval","0");
t->addConfFileProperty("default","trigger_mode","fixed");
t->addConfFileProperty("default","whitebalance_auto_rate","100");
t->addConfFileProperty("default","whitebalance_auto_threshold","5");
t->addConfFileProperty("default","whitebalance_blue","100");
t->addConfFileProperty("default","whitebalance_red","100");
t->addConfFileProperty("default","mode","Master");
t->addConfFileProperty("default","whitebalance_mode","auto");
t->addConfFileProperty("default","output_format","MODE_UNDEFINED");
t->addConfFileProperty("default","camera_format","MODE_BAYER");
t->addConfFileProperty("default","resize_algorithm","BAYER_RESIZE");
t->addConfFileProperty("default","package_size","0");
t->addConfFileProperty("front_camera","camera_id","53093");
t->addConfFileProperty("front_camera","fps","15.0");
t->addConfFileProperty("front_camera","exposure","20000");
t->addConfFileProperty("front_camera","exposure_mode","auto");
t->addConfFileProperty("front_camera","gain","1");
t->addConfFileProperty("front_camera","gain_mode_auto","false");
t->addConfFileProperty("front_camera","width","2400");
t->addConfFileProperty("front_camera","height","1200");
t->addConfFileProperty("front_camera","offset_x","0");
t->addConfFileProperty("front_camera","offset_y","0");
t->addConfFileProperty("front_camera","region_x","24");
t->addConfFileProperty("front_camera","region_y","550");
t->addConfFileProperty("front_camera","scale_x","0.5");
t->addConfFileProperty("front_camera","scale_y","0.5");
t->addConfFileProperty("bottom_camera","camera_id","33186");
t->addConfFileProperty("bottom_camera","exposure","20000");
t->addConfFileProperty("bottom_camera","exposure_mode","auto");
t->addConfFileProperty("bottom_camera","fps","15.0");
t->addConfFileProperty("bottom_camera","gain","1");
t->addConfFileProperty("bottom_camera","gain_mode_auto","false");
t->addConfFileProperty("bottom_camera","width","640");
t->addConfFileProperty("bottom_camera","height","480");
t->addConfFileProperty("bottom_camera","offset_x","0");
t->addConfFileProperty("bottom_camera","offset_y","0");
t->addConfFileProperty("bottom_camera","region_x","9");
t->addConfFileProperty("bottom_camera","region_y","7");
t->addConfFileProperty("bottom_camera","scale_x","1.0");
t->addConfFileProperty("bottom_camera","scale_y","1.0");
t->addFullfillment("Dev::Sensors::Cameras::Prosilica");
t->addFullfillment("Base::ImageProviderSrv");
	t->addProperty("camera_id", ConfigurationModel::STRING);
	t->addProperty("width", ConfigurationModel::INT);
	t->addProperty("height", ConfigurationModel::INT);
	t->addProperty("fps", ConfigurationModel::DOUBLE);
	t->addProperty("frame_buffer_size", ConfigurationModel::INT);
	t->addProperty("clear_buffer_if_frame_drop", ConfigurationModel::BOOL);
	t->addProperty("disable_frame_raw", ConfigurationModel::BOOL);
	t->addProperty("log_interval_in_sec", ConfigurationModel::INT);
	t->addProperty("region_x", ConfigurationModel::INT);
	t->addProperty("region_y", ConfigurationModel::INT);
	t->addProperty("trigger_mode", ConfigurationModel::STRING);
	t->addProperty("channel_data_depth", ConfigurationModel::INT);
	t->addProperty("exposure", ConfigurationModel::INT);
	t->addProperty("exposure_mode", ConfigurationModel::STRING);
	t->addProperty("gain_mode_auto", ConfigurationModel::BOOL);
	t->addProperty("gain", ConfigurationModel::INT);
	t->addProperty("gamma", ConfigurationModel::BOOL);
	t->addProperty("acquisition_frame_count", ConfigurationModel::INT);
	t->addProperty("binning_x", ConfigurationModel::INT);
	t->addProperty("binning_y", ConfigurationModel::INT);
	t->addProperty("mode", ConfigurationModel::STRING);
	t->addProperty("synchronize_time_interval", ConfigurationModel::INT);
	t->addProperty("whitebalance_mode", ConfigurationModel::STRING);
	t->addProperty("whitebalance_blue", ConfigurationModel::INT);
	t->addProperty("whitebalance_red", ConfigurationModel::INT);
	t->addProperty("whitebalance_auto_rate", ConfigurationModel::INT);
	t->addProperty("whitebalance_auto_threshold", ConfigurationModel::INT);
	t->addProperty("frame_start_trigger_event", ConfigurationModel::STRING);
	t->addProperty("package_size", ConfigurationModel::INT);
	t->addProperty("sync_out1_mode", ConfigurationModel::STRING);
	t->addProperty("sync_out2_mode", ConfigurationModel::STRING);
	t->addProperty("undistort", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
	t->addProperty("camera_ip", ConfigurationModel::STRING);
}
{
auto t = new Task("CameraBase::Task");
(void)t;
t->addEvent("cannot_start_grabbing");
t->addEvent("configure_error");
t->addEvent("no_camera");
t->addEvent("no_camera_interface");
t->addEvent("processing_error");
t->addEvent("unkown_parameter");
t->addEvent("unsupported_parameter");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("camera_id", ConfigurationModel::STRING);
	t->addProperty("width", ConfigurationModel::INT);
	t->addProperty("height", ConfigurationModel::INT);
	t->addProperty("fps", ConfigurationModel::DOUBLE);
	t->addProperty("frame_buffer_size", ConfigurationModel::INT);
	t->addProperty("clear_buffer_if_frame_drop", ConfigurationModel::BOOL);
	t->addProperty("disable_frame_raw", ConfigurationModel::BOOL);
	t->addProperty("log_interval_in_sec", ConfigurationModel::INT);
	t->addProperty("region_x", ConfigurationModel::INT);
	t->addProperty("region_y", ConfigurationModel::INT);
	t->addProperty("trigger_mode", ConfigurationModel::STRING);
	t->addProperty("channel_data_depth", ConfigurationModel::INT);
	t->addProperty("exposure", ConfigurationModel::INT);
	t->addProperty("exposure_mode", ConfigurationModel::STRING);
	t->addProperty("gain_mode_auto", ConfigurationModel::BOOL);
	t->addProperty("gain", ConfigurationModel::INT);
	t->addProperty("gamma", ConfigurationModel::BOOL);
	t->addProperty("acquisition_frame_count", ConfigurationModel::INT);
	t->addProperty("binning_x", ConfigurationModel::INT);
	t->addProperty("binning_y", ConfigurationModel::INT);
	t->addProperty("mode", ConfigurationModel::STRING);
	t->addProperty("synchronize_time_interval", ConfigurationModel::INT);
	t->addProperty("whitebalance_mode", ConfigurationModel::STRING);
	t->addProperty("whitebalance_blue", ConfigurationModel::INT);
	t->addProperty("whitebalance_red", ConfigurationModel::INT);
	t->addProperty("whitebalance_auto_rate", ConfigurationModel::INT);
	t->addProperty("whitebalance_auto_threshold", ConfigurationModel::INT);
	t->addProperty("frame_start_trigger_event", ConfigurationModel::STRING);
	t->addProperty("package_size", ConfigurationModel::INT);
	t->addProperty("sync_out1_mode", ConfigurationModel::STRING);
	t->addProperty("sync_out2_mode", ConfigurationModel::STRING);
	t->addProperty("undistort", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
}
{
auto t = new Task("AvalonControl::MotionControlTask<Base::AUVMotionControllerSrv>");
(void)t;
t->addEvent("cutoff_vector_invalid");
t->addEvent("joint_names_invalid");
t->addEvent("timeout");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
t->addFullfillment("Base::AUVMotionControlledSystemSrv");
t->addFullfillment("Base::AUVMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::JointsControllerSrv");
t->addFullfillment("Base::ControllerSrv");
	t->addProperty("z_coupling_factor", ConfigurationModel::DOUBLE);
	t->addProperty("dagon_mode", ConfigurationModel::BOOL);
	t->addProperty("use_min_ground_distance", ConfigurationModel::BOOL);
	t->addProperty("min_ground_distance", ConfigurationModel::DOUBLE);
	t->addProperty("pitch_target", ConfigurationModel::DOUBLE);
	t->addProperty("y_factor", ConfigurationModel::DOUBLE);
	t->addProperty("y_coupling_factor", ConfigurationModel::DOUBLE);
	t->addProperty("x_factor", ConfigurationModel::DOUBLE);
	t->addProperty("timeout", ConfigurationModel::DOUBLE);
	t->addProperty("turn_coupling_factor", ConfigurationModel::DOUBLE);
}
{
auto t = new Task("CameraBase::Preprocess");
(void)t;
t->addEvent("processing_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
	t->addProperty("undistort", ConfigurationModel::BOOL);
	t->addProperty("scale_x", ConfigurationModel::DOUBLE);
	t->addProperty("scale_y", ConfigurationModel::DOUBLE);
	t->addProperty("offset_x", ConfigurationModel::INT);
	t->addProperty("offset_y", ConfigurationModel::INT);
}
{
auto c = new Composition("Localization::ParticleDetector");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("UwParticleLocalization::Task"),"main");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addChild(pool->getComponent("Base::JointsStatusSrv"),"hb");
c->addFullfillment("Localization::ParticleDetector");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::MapSrv");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::MapSrv");
}
{
auto c = new Composition("PoseAuv::PoseEstimatorCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("reset", ConfigurationModel::BOOL);
c->addChild(pool->getComponent("PoseEstimation::UWPoseEstimator"),"pose_estimator");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("Base::VelocitySrv"),"model");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("PoseAuv::PoseEstimatorCmp");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
}
{
auto c = new Composition("PoseAuv::PoseEstimatorBlindCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("reset", ConfigurationModel::BOOL);
c->addChild(pool->getComponent("PoseEstimation::UWPoseEstimator"),"pose_estimator");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("Base::VelocitySrv"),"model");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("PoseAuv::PoseEstimatorBlindCmp");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
}
{
auto c = new Composition("AuvControl::MotionControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::MotionControlTask"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"pose");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"dist");
c->addFullfillment("AuvControl::MotionControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Pipeline::Detector_new");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("speed_x", ConfigurationModel::DOUBLE);
	c->addProperty("turn_dir", ConfigurationModel::INT);
c->addChild(pool->getComponent("OffshorePipelineDetector::Task"),"offshorePipelineDetector");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Pipeline::Detector_new");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("Buoy::DetectorCmp2");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector2"),"detector");
c->addFullfillment("Buoy::DetectorCmp2");
}
{
auto c = new Composition("Buoy::DetectorCmp");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
}
{
auto c = new Composition("Pipeline::Detector");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("speed_x", ConfigurationModel::DOUBLE);
	c->addProperty("turn_dir", ConfigurationModel::INT);
c->addChild(pool->getComponent("OffshorePipelineDetector::Task"),"offshorePipelineDetector");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Pipeline::Detector");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("PoseAuv::IKFOrientationEstimatorCmp");
c->addEvent("INITIAL_NORTH_SEEKING");
c->addEvent("INITIAL_ALIGNMENT");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("NAN_ERROR");
c->addEvent("ALIGNMENT_ERROR");
c->addEvent("CONFIGURATION_ERROR");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("OrientationEstimator::BaseEstimator"),"estimator");
c->addChild(pool->getComponent("WallOrientationCorrection::OrientationInMap"),"ori_in_map");
c->addChild(pool->getComponent("XsensImu::Task"),"imu");
c->addChild(pool->getComponent("FogKvh::Dsp3000Task"),"fog");
c->addFullfillment("PoseAuv::IKFOrientationEstimatorCmp");
c->addFullfillment("Base::OrientationToCorrectSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::OrientationToCorrectSrv");
c->addFullfillment("Base::OrientationSrv");
}
{
auto c = new Composition("Buoy::DetectorNewCmp");
c->addEvent("buoy_found");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Buoy::Detector"),"main");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"front_camera");
c->addFullfillment("Buoy::DetectorNewCmp");
}
{
auto c = new Composition("Pipeline::Follower");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("speed_x", ConfigurationModel::DOUBLE);
	c->addProperty("turn_dir", ConfigurationModel::INT);
c->addChild(pool->getComponent("Pipeline::Detector"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Pipeline::Detector"),"controller_local");
c->addFullfillment("Pipeline::Follower");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::RelPosControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvRelPosController::Task"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("AuvControl::RelPosControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("ConsWA");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller_v");
c->addFullfillment("ConsWA");
}
{
auto c = new Composition("AuvControl::PositionControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::PositionControlTask"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::PositionControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Wall::DetectorNew");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("max_corners", ConfigurationModel::INT);
c->addChild(pool->getComponent("WallServoing::SingleSonarServoing"),"detector");
c->addChild(pool->getComponent("SonarTritech::Micron"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Wall::DetectorNew");
c->addFullfillment("WallServoing::WallOrientationSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("WallServoing::WallOrientationSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("Wall::Detector");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("WallServoing::SingleSonarServoing"),"detector");
c->addChild(pool->getComponent("SonarTritech::Micron"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Wall::Detector");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("Hbridge::ControlSystem");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Dev::Sensors::Hbridge"),"sensors");
c->addChild(pool->getComponent("Dev::Actuators::Hbridge"),"command");
c->addFullfillment("Hbridge::ControlSystem");
c->addFullfillment("Base::JointsControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
c->addFullfillment("Base::JointsControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
}
{
auto c = new Composition("AuvControl::TrajectoryMove");
c->addEvent("reached_end");
c->addEvent("align_at_end");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("event_on_timeout", ConfigurationModel::STRING);
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"foo");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::TrajectoryMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::SimpleMove");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("delta_timeout", ConfigurationModel::DOUBLE);
	c->addProperty("speed_x", ConfigurationModel::DOUBLE);
	c->addProperty("speed_y", ConfigurationModel::DOUBLE);
	c->addProperty("finish_when_reached", ConfigurationModel::BOOL);
	c->addProperty("event_on_timeout", ConfigurationModel::STRING);
	c->addProperty("delta_z", ConfigurationModel::DOUBLE);
	c->addProperty("delta_yaw", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("AvalonControl::FakeWriter"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"reading");
c->addArgumentForwards("controller", "heading", "heading");
c->addArgumentForwards("controller", "depth", "depth");
c->addArgumentForwards("controller", "speed_x", "speed_x");
c->addArgumentForwards("controller", "speed_y", "speed_y");
c->addFullfillment("AuvControl::SimpleMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Localization::FixMapHack");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarFeatureDetector::Task"),"sonar_detector");
c->addFullfillment("Localization::FixMapHack");
}
{
auto c = new Composition("Localization::HoughDetector");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarWallHough::Task"),"main");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addFullfillment("Localization::HoughDetector");
c->addFullfillment("Localization::HoughSrv");
c->addFullfillment("Localization::HoughSrv");
}
{
auto c = new Composition("AuvControl::DepthFusionCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"z");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("AuvHelper::DepthAndOrientationFusion"),"task");
c->addFullfillment("AuvControl::DepthFusionCmp");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
}
{
auto c = new Composition("Localization::DeadReckoning");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("UwParticleLocalization::MotionModel"),"main");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addChild(pool->getComponent("Base::JointsStatusSrv"),"hb");
c->addFullfillment("Localization::DeadReckoning");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::VelocitySrv");
}
{
auto c = new Composition("AuvControl::JoystickCommandCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::RawCommandControllerSrv"),"rawCommand");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("RawControlCommandConverter::Movement"),"rawCommandConverter");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"dist");
c->addFullfillment("AuvControl::JoystickCommandCmp");
c->addFullfillment("Base::AUVMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::AUVMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("AuvControl::SimplePosMove");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("x", ConfigurationModel::DOUBLE);
	c->addProperty("y", ConfigurationModel::DOUBLE);
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("delta_timeout", ConfigurationModel::DOUBLE);
	c->addProperty("finish_when_reached", ConfigurationModel::BOOL);
	c->addProperty("event_on_timeout", ConfigurationModel::STRING);
	c->addProperty("delta_z", ConfigurationModel::DOUBLE);
	c->addProperty("delta_yaw", ConfigurationModel::DOUBLE);
	c->addProperty("delta_xy", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("AvalonControl::RelFakeWriter"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::SimplePosMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Base::ControlLoop");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("LowLevel::Cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("LowLevelDriver::LowLevelTask"),"ll");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"z");
c->addFullfillment("LowLevel::Cmp");
}
{
auto c = new Composition("Localization::SonarFeatureDetectorCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarFeatureDetector::Task"),"sonar_detector");
c->addFullfillment("Localization::SonarFeatureDetectorCmp");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto c = new Composition("Buoy::DetectorCmp<Base::ControllerSrv>");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("blueview_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::BlueView"),"camera");
c->addFullfillment("blueview_cmp");
}
{
auto c = new Composition("front_camera_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::Cameras::Prosilica"),"camera");
c->addFullfillment("front_camera_cmp");
}
{
auto c = new Composition("bottom_camera_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::Cameras::Prosilica"),"camera");
c->addFullfillment("bottom_camera_cmp");
}
{
auto c = new Composition("AuvCont::WorldXYZPositionCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::BuoyWallCmp");
c->addEvent("aligned");
c->addEvent("aligning");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"main");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::BuoyWallCmp");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("Modem::ModemCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Dev::ASVModem"),"main");
c->addFullfillment("Modem::ModemCmp");
}
{
auto c = new Composition("GPSHelper::GPSWaypointsCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("GpsHelper::WaypointNavigation"),"main");
c->addChild(pool->getComponent("Base::PositionSrv"),"gps");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("GPSHelper::GPSWaypointsCmp");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto c = new Composition("Structure::Alignment");
c->addEvent("aligning");
c->addEvent("aligned");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("StructureServoing::Alignment"),"detector");
c->addChild(pool->getComponent("HsvMosaicing::Task"),"mosaic");
c->addChild(pool->getComponent("ImagePreprocessing::HSVSegmentationAndBlur"),"seg");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addFullfillment("Structure::Alignment");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("Structure::Detector");
c->addEvent("servoing");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("rounds", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("StructureServoing::Task"),"detector");
c->addChild(pool->getComponent("HsvMosaicing::Task"),"mosaic");
c->addChild(pool->getComponent("ImagePreprocessing::HSVSegmentationAndBlur"),"seg");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addFullfillment("Structure::Detector");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("Structure::SonarStructureServoingComp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("SEARCHING_STRUCTURE");
c->addEvent("VALIDATING_STRUCTURE");
c->addEvent("INSPECTING_STRUCTURE");
c->addEvent("SUCCESS");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarStructureServoing::Task"),"detector");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose_blind");
c->addFullfillment("Structure::SonarStructureServoingComp");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("Buoy::DetectorCmp<Base::AUVRelativeMotionControllerSrv>");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("Structure::StructureReconstructionComp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("StructureReconstruction::Task"),"image_saver");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"front_camera");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"bottom_camera");
c->addFullfillment("Structure::StructureReconstructionComp");
}
{
auto c = new Composition("AuvCont::ConstantCommandGroundAvoidanceCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommandGroundAvoidance"),"main");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"altimeter");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("AuvCont::ConstantCommandGroundAvoidanceCmp");
}
{
auto c = new Composition("AuvCont::WorldPositionCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("Base::WorldXYZRollPitchYawControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
{
auto c = new Composition("Buoy::FollowerCmp");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"controller_local");
c->addFullfillment("Buoy::FollowerCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Buoy::DoubleBuoyCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::MapSrv"),"main");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"orange");
c->addChild(pool->getComponent("Buoy::DetectorCmp2"),"white");
c->addFullfillment("Buoy::DoubleBuoyCmp");
}
{
auto c = new Composition("PoseAuv::InitialOrientationEstimatorCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("ESTIMATE_WALL_ORIENTATION");
c->addEvent("VALID_WALL_FIX");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("WallOrientationCorrection::Task"),"wall_estimation");
c->addChild(pool->getComponent("OrientationEstimator::BaseEstimator"),"estimator");
c->addChild(pool->getComponent("XsensImu::Task"),"imu");
c->addChild(pool->getComponent("FogKvh::Dsp3000Task"),"fog");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("PoseAuv::IKFOrientationEstimatorCmp"),"slave");
c->addFullfillment("PoseAuv::InitialOrientationEstimatorCmp");
}
{
auto c = new Composition("Buoy::ControllerNewCmp");
c->addEvent("passive_buoy_searching");
c->addEvent("buoy_servoing");
c->addEvent("aligned");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("Buoy::ServoingOnWall"),"main");
c->addChild(pool->getComponent("WallServoing::WallOrientationSrv"),"wall");
c->addChild(pool->getComponent("Base::OrientationSrv"),"pose");
c->addChild(pool->getComponent("Buoy::DetectorNewCmp"),"detector");
c->addFullfillment("Buoy::ControllerNewCmp");
c->addFullfillment("Base::WorldXYZPositionControllerSrv");
c->addFullfillment("Base::WorldXYZPositionControllerSrv");
}
{
auto c = new Composition("ConstantWorldXYVelocityCommand");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller_w");
c->addChild(pool->getComponent("ConsWA"),"controller_v");
c->addFullfillment("ConstantWorldXYVelocityCommand");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("Wall::Follower");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("max_corners", ConfigurationModel::INT);
c->addChild(pool->getComponent("Wall::Detector"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Wall::Detector"),"controller_local");
c->addFullfillment("Wall::Follower");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvCont::WorldXYVelocityCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::WorldXYPositionCmp");
c->addEvent("detected_corner");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("corners", ConfigurationModel::INT);
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYPositionControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::WorldYPositionXVelocityCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldYPositionXVelocityControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldYPositionXVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::Trajectory");
c->addEvent("reached_end");
c->addEvent("align_at_end");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("reset", ConfigurationModel::BOOL);
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"main");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addFullfillment("AuvCont::Trajectory");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
{
auto c = new Composition("AuvCont::PositionMoveCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("x", ConfigurationModel::DOUBLE);
	c->addProperty("y", ConfigurationModel::DOUBLE);
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("delta_timeout", ConfigurationModel::DOUBLE);
	c->addProperty("finish_when_reached", ConfigurationModel::BOOL);
	c->addProperty("event_on_timeout", ConfigurationModel::STRING);
	c->addProperty("delta_z", ConfigurationModel::DOUBLE);
	c->addProperty("delta_yaw", ConfigurationModel::DOUBLE);
	c->addProperty("delta_xy", ConfigurationModel::DOUBLE);
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"command");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addFullfillment("AuvCont::PositionMoveCmp");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
{
auto c = new Composition("AuvCont::MoveCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
	c->addProperty("depth", ConfigurationModel::DOUBLE);
	c->addProperty("heading", ConfigurationModel::DOUBLE);
	c->addProperty("delta_timeout", ConfigurationModel::DOUBLE);
	c->addProperty("speed_x", ConfigurationModel::DOUBLE);
	c->addProperty("speed_y", ConfigurationModel::DOUBLE);
	c->addProperty("finish_when_reached", ConfigurationModel::BOOL);
	c->addProperty("event_on_timeout", ConfigurationModel::STRING);
	c->addProperty("delta_z", ConfigurationModel::DOUBLE);
	c->addProperty("delta_yaw", ConfigurationModel::DOUBLE);
	c->addProperty("delta_xy", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("ConstantWorldXYVelocityCommand"),"command");
c->addChild(pool->getComponent("ConstantWorldXYVelocityCommand"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::MoveCmp");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::StructureCmp");
c->addEvent("aligned");
c->addEvent("aligning");
c->addEvent("servoing");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
	c->addProperty("timeout", ConfigurationModel::DOUBLE);
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"main");
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::StructureCmp");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
load_constraints();
return "";
}
