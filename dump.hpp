#include "constraints.hpp";
std::string create_model(){
using namespace constrained_based_networks;
auto pool = Pool::getInstance();
new DataService("Base::JointsControlledSystemSrv");
new DataService("Base::JointsControllerSrv");
new DataService("Base::JointsCommandSrv");
new DataService("Base::JointsStatusSrv");
new DataService("Base::JointsCommandConsumerSrv");
new DataService("Base::ControlledSystemSrv");
new DataService("Base::ControllerSrv");
new DataService("Dev::Sensors::DepthReaderAvalon");
new DataService("Dev::Actuators::Dynamixel");
new DataService("Dev::Actuators::PTU");
new DataService("Dev::Sensors::TimestamperDev");
new DataService("Dev::Sensors::Cameras::USB");
new DataService("Dev::Sensors::Cameras::Prosilica");
new DataService("Dev::Sensors::Cameras::Firewire");
new DataService("Dev::Sensors::XsensAHRS");
new DataService("Dev::Sensors::Hokuyo");
new DataService("Base::PointcloudProviderSrv");
new DataService("Dev::Sensors::GPS");
new DataService("Base::SonarScanProviderSrv");
new DataService("Base::LaserRangeFinderSrv");
new DataService("Base::DistanceImageProviderSrv");
new DataService("Base::StereoPairProviderSrv");
new DataService("Base::ImageProviderSrv");
new DataService("Base::CalibratedIMUSensorsSrv");
new DataService("Base::CompensatedIMUSensorsSrv");
new DataService("Base::IMUSensorsSrv");
new DataService("Base::ImageConsumerSrv");
new DataService("Base::TimestampInputSrv");
new DataService("Base::TimestamperSrv");
new DataService("Base::GroundDistanceSrv");
new DataService("Base::DVLSrv");
new DataService("Base::VelocitySrv");
new DataService("Base::PoseDeltaSrv");
new DataService("Base::RelativePoseSrv");
new DataService("Base::GlobalPoseSrv");
new DataService("Base::TransformationSrv");
new DataService("Base::PoseSrv");
new DataService("Base::OrientationWithZSrv");
new DataService("Base::ZProviderSrv");
new DataService("Base::OrientationSrv");
new DataService("Base::PositionSrv");
new DataService("Base::RotationSrv");
new DataService("Base::WorldZRollPitchYawSrv");
new DataService("Base::WorldXYVelocityControllerSrv");
new DataService("Base::WorldYPositionXVelocityControllerSrv");
new DataService("Dev::Sensors::BlueView");
new DataService("Base::WorldXYZPositionControllerSrv");
new DataService("Base::WorldXYPositionControllerSrv");
new DataService("Base::WorldXYZRollPitchYawControllerSrv");
new DataService("Base::WorldXYZRollPitchYawControlledSystemSrv");
new DataService("Base::MapSrv");
new DataService("Base::OrientationToCorrectSrv");
new DataService("Auv::StructuredLightPairSrv");
new DataService("Auv::SoundSourceDirectionSrv");
new DataService("Auv::ModemConnectionSrv");
new DataService("Base::AUVRelativeMotionControlledSystemSrv");
new DataService("Base::AUVRelativeMotionControllerSrv");
new DataService("Base::AUVRelativeMotionCommandConsumerSrv");
new DataService("Dev::ASVModem");
new DataService("Dev::Sensors::Hbridge");
new DataService("Base::AUVMotionControlledSystemSrv");
new DataService("Base::AUVMotionControllerSrv");
new DataService("Dev::Actuators::Hbridge");
new DataService("Base::AUVMotionCommandConsumerSrv");
new DataService("Dev::SystemStatus");
new DataService("Dev::Sensors::KVH::DSP3000");
new DataService("Dev::Sensors::Modem");
new DataService("WallServoing::WallOrientationSrv");
new DataService("Localization::HoughSrv");
new DataService("Dev::Actuators::Lights");
new DataService("Dev::Micron");
new DataService("Dev::Echosounder");
new DataService("Dev::Profiling");
new DataService("Dev::Bus::CAN");
new DataService("Dev::Bus::CAN::BusBaseSrv");
new DataService("Dev::Bus::CAN::BusInSrv");
new DataService("Dev::Bus::CAN::BusOutSrv");
new DataService("Dev::Bus::CAN::BusSrv");
new DataService("Dev::Bus::CAN::ClientInSrv");
new DataService("Dev::Bus::CAN::ClientOutSrv");
new DataService("Dev::Bus::CAN::ClientSrv");
new DataService("Dev::Sensors::Battery");
new DataService("Base::RawCommandCommandConsumerSrv");
new DataService("Base::RawCommandControllerSrv");
new DataService("Base::RawCommandControlledSystemSrv");
new DataService("Dev::Controldev::Joystick");
new DataService("Dev::Controldev::Mouse3D");
{
auto t = new Task("AuvWaypointNavigator::Task");
(void)t;
t->addEvent("dynamic_navigation");
t->addEvent("keep_waypoint");
t->addEvent("no_pose_samples");
t->addEvent("static_navigation");
t->addEvent("wait_for_waypoints");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("PoseEstimation::VehiclePoseEstimator");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("PoseEstimation::UWPoseEstimator");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("PoseEstimation::BaseTask");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("transformation_alignment_failures");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Syskit::RubyTaskContext");
(void)t;
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("exception");
t->addEvent("fatal_error");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvRelPosController::Task");
(void)t;
t->addEvent("invalid_position_command");
t->addEvent("timeout");
t->addEvent("waiting_for_position_command");
t->addEvent("waiting_for_valid_bodystate");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVRelativeMotionControlledSystemSrv");
t->addFullfillment("Base::AUVRelativeMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("DepthReader::Task");
(void)t;
t->addEvent("water_ingress");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::DepthReaderAvalon");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
t->addFullfillment("Base::ZProviderSrv");
}
{
auto t = new Task("RearSonarDistanceEstimator::Task");
(void)t;
t->addEvent("timeout_depth");
t->addEvent("timeout_sonar");
t->addEvent("waiting_for_depth");
t->addEvent("waiting_for_sonar");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("LowLevelDriver::LowLevelTask");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarFeatureEstimator::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("GpsHelper::GPSFaker");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("XsensImu::Task");
(void)t;
t->addEvent("driver_error");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::XsensAHRS");
t->addFullfillment("Base::CalibratedIMUSensorsSrv");
t->addFullfillment("Base::IMUSensorsSrv");
t->addFullfillment("Base::OrientationSrv");
t->addFullfillment("Base::TimestampInputSrv");
}
{
auto t = new Task("GpsHelper::WaypointNavigation");
(void)t;
t->addEvent("last_waypoint_reached");
t->addEvent("validating_gps_fix");
t->addEvent("waiting_for_gps_fix");
t->addEvent("waypoint_reached");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("GpsHelper::MapToGPS");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("OrientationEstimator::IKF");
(void)t;
t->addEvent("alignment_error");
t->addEvent("configuration_error");
t->addEvent("initial_alignment");
t->addEvent("initial_north_seeking");
t->addEvent("missing_transformation");
t->addEvent("nan_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("UwParticleLocalization::FastFusion");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("UwParticleLocalization::MotionModel");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Transformer::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("OrientationEstimator::BaseEstimator");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarWallHough::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Logger::Logger");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("UwParticleLocalization::OrientationCorrection");
(void)t;
t->addEvent("reset");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarBlueview::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::BlueView");
t->addFullfillment("Base::ImageProviderSrv");
}
{
auto t = new Task("UwParticleLocalization::Task");
(void)t;
t->addEvent("above_surface");
t->addEvent("invalid_values");
t->addEvent("localizing");
t->addEvent("no_hough");
t->addEvent("no_joints_no_dvl");
t->addEvent("no_orientation");
t->addEvent("no_sonar");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::OptimalHeadingController");
(void)t;
t->addEvent("wait_for_orientation_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallOrientationCorrection::OrientationInMap");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::MotionCommand2DConverter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Taskmon::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallOrientationCorrection::Task");
(void)t;
t->addEvent("estimate_wall_orientation");
t->addEvent("missing_transformation");
t->addEvent("valid_wall_fix");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::WaypointNavigator");
(void)t;
t->addEvent("following_waypoints");
t->addEvent("keep_waypoint");
t->addEvent("pose_sample_missing");
t->addEvent("wait_for_waypoints");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::ConstantCommandGroundAvoidance");
(void)t;
t->addEvent("invalid_depth_reading");
t->addEvent("invalid_negative_altimeter_reading");
t->addEvent("invalid_target_depth_config");
t->addEvent("no_altimeter_reading");
t->addEvent("no_depth_reading");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::Base");
(void)t;
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::ConstantCommandGroundFollower");
(void)t;
t->addEvent("invalid_depth_reading");
t->addEvent("invalid_negative_altimeter_reading");
t->addEvent("invalid_target_depth_config");
t->addEvent("no_altimeter_reading");
t->addEvent("no_depth_reading");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::ConstantCommand");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto t = new Task("Dynamixel::Task");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Actuators::Dynamixel");
t->addFullfillment("Base::TransformationSrv");
}
{
auto t = new Task("AuvControl::AccelerationController");
(void)t;
t->addEvent("invalid_name_in_limits");
t->addEvent("wrong_size_of_controlmodes");
t->addEvent("wrong_size_of_limits");
t->addEvent("wrong_size_of_names");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Modemdriver::ModemCanbus");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::ASVModem");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
}
{
auto t = new Task("Modemdriver::ModemSerial");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Modemdriver::Modem");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("RTT::TaskContext");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::AlignedToBody");
(void)t;
t->addEvent("orientation_sample_invalid");
t->addEvent("wait_for_orientation_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("StructuredLight::Calibration");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Buoy::ServoingOnWall");
(void)t;
t->addEvent("aligned");
t->addEvent("buoy_servoing");
t->addEvent("passive_buoy_searching");
t->addEvent("wait_for_buoy_sample");
t->addEvent("wait_for_orientation_sample");
t->addEvent("wait_for_wall_sample");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Buoy::Detector2");
(void)t;
t->addEvent("buoy_found");
t->addEvent("no_buoy_found");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::WorldToAligned");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvControl::PIDController");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("unsure_pose_sample");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Buoy::Detector");
(void)t;
t->addEvent("buoy_found");
t->addEvent("no_buoy_found");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Sysmon::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::SystemStatus");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("StructuredLight::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Hbridge::CommandWriter");
(void)t;
t->addEvent("bad_input");
t->addEvent("configuration_failed");
t->addEvent("error");
t->addEvent("io_error");
t->addEvent("mode_change_while_running");
t->addEvent("overheat_board");
t->addEvent("overheat_motor");
t->addEvent("over_current");
t->addEvent("protocol_error");
t->addEvent("sensor_failure");
t->addEvent("timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Actuators::Hbridge");
t->addFullfillment("Dev::Bus::CAN::ClientSrv");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
t->addFullfillment("Base::JointsStatusSrv");
}
{
auto t = new Task("AuvControl::BasePIDController");
(void)t;
t->addEvent("pose_sample_invalid");
t->addEvent("unsure_pose_sample");
t->addEvent("wait_for_pose_sample");
t->addEvent("controlling");
t->addEvent("controlling_unsafe");
t->addEvent("input_colliding");
t->addEvent("input_missing");
t->addEvent("input_unexpected");
t->addEvent("timeout");
t->addEvent("wait_for_connected_input_port");
t->addEvent("wait_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Buoy::Survey");
(void)t;
t->addEvent("angle_arrived");
t->addEvent("buoy_arrived");
t->addEvent("buoy_detected");
t->addEvent("buoy_lost");
t->addEvent("buoy_search");
t->addEvent("cutting");
t->addEvent("cutting_error");
t->addEvent("cutting_success");
t->addEvent("moving_to_cutting_distance");
t->addEvent("re_searching_buoy");
t->addEvent("strafe_error");
t->addEvent("strafe_finished");
t->addEvent("strafe_to_angle");
t->addEvent("strafing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Syskit::ROS::Node");
(void)t;
t->addEvent("start");
t->addEvent("stop");
t->addEvent("interrupt");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("exception");
t->addEvent("fatal_error");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("FogKvh::Dsp3000Task");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::KVH::DSP3000");
t->addFullfillment("Base::RotationSrv");
}
{
auto t = new Task("Hbridge::SensorReader");
(void)t;
t->addEvent("bad_input");
t->addEvent("configuration_failed");
t->addEvent("io_error");
t->addEvent("protocol_error");
t->addEvent("sensor_failure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::Hbridge");
t->addFullfillment("Base::JointsStatusSrv");
t->addFullfillment("Dev::Bus::CAN::ClientSrv");
t->addFullfillment("Dev::Bus::CAN::ClientOutSrv");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("PipelineInspection::ColorFilter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Interfaces::IMU");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Interfaces::LaserRangeFinder");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Interfaces::ActuatorSensorReader");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ModemCan::Task");
(void)t;
t->addEvent("controlling");
t->addEvent("sended_command");
t->addEvent("waiting_for_input");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::Modem");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("PipelineInspection::Inspection");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("PipelineInspection::LaserSimulation");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::PositionControlTask");
(void)t;
t->addEvent("position_variance_to_high");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("waiting_for_valid_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVRelativeMotionControlledSystemSrv");
t->addFullfillment("Base::AUVRelativeMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Interfaces::ActuatorCommandWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("FrameDemultiplexer::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Interfaces::Servo");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::MotionControlTask");
(void)t;
t->addEvent("cutoff_vector_invalid");
t->addEvent("joint_names_invalid");
t->addEvent("timeout");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVMotionControlledSystemSrv");
t->addFullfillment("Base::AUVMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::JointsControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("AvalonControl::FakeWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("AvalonControl::RelFakeWriter");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVRelativeMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("WallServoing::WallDetector");
(void)t;
t->addEvent("wall_found");
t->addEvent("wall_searching");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("CameraUnicap::CameraTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallServoing::WallServoing");
(void)t;
t->addEvent("corner");
t->addEvent("get_initial_wall_search_direction");
t->addEvent("initial_wall_search");
t->addEvent("leaving_corner");
t->addEvent("leaving_get_initial_wall_search_direction");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::TrajectoryFollower");
(void)t;
t->addEvent("align_at_end");
t->addEvent("cannot_find_closed_point");
t->addEvent("reached_end");
t->addEvent("waiting_for_pose");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVRelativeMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
t->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto t = new Task("WallServoing::SonarServoing");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::MotionFeedbackTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ImagePreprocessing::StereoTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallServoing::SingleSonarServoing");
(void)t;
t->addEvent("alignment_complete");
t->addEvent("checking_wall");
t->addEvent("detected_corner");
t->addEvent("lost_wall");
t->addEvent("misconfiguration");
t->addEvent("origin_alignment");
t->addEvent("searching_wall");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarFeatureDetector::Task");
(void)t;
t->addEvent("building_map");
t->addEvent("not_enough_targets");
t->addEvent("reached_target");
t->addEvent("servoing_finished");
t->addEvent("target_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ImagePreprocessing::HSVSegmentationAndBlur");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("WallServoing::DualSonarServoing");
(void)t;
t->addEvent("detected_corner");
t->addEvent("misconfiguration");
t->addEvent("searching_wall");
t->addEvent("wall_servoing");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ImagePreprocessing::MonoTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ImagePreprocessing::DepthImage2Pointcloud");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("ImagePreprocessing::BaseTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AuvHelper::DepthAndOrientationFusion");
(void)t;
t->addEvent("got_invalid_depth");
t->addEvent("got_invalid_orientation");
t->addEvent("waiting_for_depth");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("AvalonControl::MotionControlTask<Base::AUVMotionControllerSrv>");
(void)t;
t->addEvent("cutoff_vector_invalid");
t->addEvent("joint_names_invalid");
t->addEvent("timeout");
t->addEvent("waiting_for_command");
t->addEvent("waiting_for_orientation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::AUVMotionControllerSrv");
t->addFullfillment("Base::ControllerSrv");
t->addFullfillment("Base::AUVMotionControlledSystemSrv");
t->addFullfillment("Base::AUVMotionCommandConsumerSrv");
t->addFullfillment("Base::ControlledSystemSrv");
t->addFullfillment("Base::JointsControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Lights::Lights");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Actuators::Lights");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("OffshorePipelineDetector::Task");
(void)t;
t->addEvent("align_auv");
t->addEvent("check_candidate");
t->addEvent("end_of_pipe");
t->addEvent("follow_pipe");
t->addEvent("found_pipe");
t->addEvent("lost_pipe");
t->addEvent("no_altitude_reading");
t->addEvent("no_orientation_reading");
t->addEvent("search_pipe");
t->addEvent("weak_signal");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("OffshorePipelineDetector::SonarDetector");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarTritech::Micron");
(void)t;
t->addEvent("invalid_configuration");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Micron");
t->addFullfillment("Base::GroundDistanceSrv");
t->addFullfillment("Base::SonarScanProviderSrv");
}
{
auto t = new Task("SonarTritech::Echosounder");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Echosounder");
t->addFullfillment("Base::GroundDistanceSrv");
}
{
auto t = new Task("SonarTritech::Profiling");
(void)t;
t->addEvent("invalid_configuration");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("CameraProsilica::Task");
(void)t;
t->addEvent("cannot_start_grabbing");
t->addEvent("configure_error");
t->addEvent("no_camera");
t->addEvent("no_camera_interface");
t->addEvent("processing_error");
t->addEvent("unkown_parameter");
t->addEvent("unsupported_parameter");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::Cameras::Prosilica");
t->addFullfillment("Base::ImageProviderSrv");
}
{
auto t = new Task("Canbus::Task");
(void)t;
t->addEvent("can_error");
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Bus::CAN");
t->addFullfillment("Dev::Bus::CAN::BusInSrv");
t->addFullfillment("Dev::Bus::CAN::BusBaseSrv");
}
{
auto t = new Task("Canbus::InterfaceTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("CameraBase::Task");
(void)t;
t->addEvent("cannot_start_grabbing");
t->addEvent("configure_error");
t->addEvent("no_camera");
t->addEvent("no_camera_interface");
t->addEvent("processing_error");
t->addEvent("unkown_parameter");
t->addEvent("unsupported_parameter");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Gps::MB500Task");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
}
{
auto t = new Task("Gps::GPSDTask");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
}
{
auto t = new Task("BatteryWatcher::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::Battery");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
}
{
auto t = new Task("Gps::BaseTask");
(void)t;
t->addEvent("io_error");
t->addEvent("io_timeout");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Sensors::GPS");
t->addFullfillment("Base::PositionSrv");
}
{
auto t = new Task("Controldev::GenericTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::JoystickTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Controldev::Joystick");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Controldev::JoyPadTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::Mouse3DTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Controldev::Mouse3D");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("Controldev::SteeringWheelTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("HsvMosaicing::Task");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::SliderboxTask");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::RawJoystickToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::RawWheelToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::GenericRawToMotion2D");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("Controldev::Remote");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Dev::Bus::CAN::ClientInSrv");
t->addFullfillment("Dev::Controldev::Joystick");
t->addFullfillment("Base::RawCommandControllerSrv");
t->addFullfillment("Base::ControllerSrv");
}
{
auto t = new Task("StructureServoing::Alignment");
(void)t;
t->addEvent("aligned");
t->addEvent("aligning");
t->addEvent("no_structure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("StructureReconstruction::Task");
(void)t;
t->addEvent("missing_transformation");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("StructureServoing::Task");
(void)t;
t->addEvent("no_orientation");
t->addEvent("no_structure");
t->addEvent("servoing");
t->addEvent("unsure");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("VideoStreamerVlc::Streamer{1}");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
}
{
auto t = new Task("VideoStreamerVlc::Capturer");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("RawControlCommandConverter::Movement");
(void)t;
t->addEvent("got_pose_without_depth");
t->addEvent("should_do_ground_following_without_ground_distance");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("VideoStreamerVlc::Streamer");
(void)t;
t->addEvent("io_error");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
t->addFullfillment("Base::ImageConsumerSrv");
}
{
auto t = new Task("RawControlCommandConverter::Position");
(void)t;
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("LineScanner::Task");
(void)t;
t->addEvent("empty_image");
t->addEvent("no_laser");
t->addEvent("overexposed");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto t = new Task("SonarStructureServoing::Task");
(void)t;
t->addEvent("inspecting_structure");
t->addEvent("missing_transformation");
t->addEvent("searching_structure");
t->addEvent("validating_structure");
t->addEvent("waiting_for_target_depth");
t->addEvent("init");
t->addEvent("pre_operational");
t->addEvent("fatal_error");
t->addEvent("exception");
t->addEvent("stopped");
t->addEvent("running");
t->addEvent("runtime_error");
t->addEvent("start");
t->addEvent("interrupt");
t->addEvent("stop");
t->addEvent("failed");
t->addEvent("success");
t->addEvent("aborted");
t->addEvent("internal_error");
t->addEvent("updated_data");
t->addEvent("poll_transition");
}
{
auto c = new Composition("AuvControl::MotionControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::MotionControlTask"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"pose");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"dist");
c->addFullfillment("AuvControl::MotionControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Base::ControlLoop");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::JoystickCommandCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::RawCommandControllerSrv"),"rawCommand");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("RawControlCommandConverter::Movement"),"rawCommandConverter");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"dist");
c->addFullfillment("AuvControl::JoystickCommandCmp");
c->addFullfillment("Base::AUVMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::AUVMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("LowLevel::Cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("LowLevelDriver::LowLevelTask"),"ll");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"z");
c->addFullfillment("LowLevel::Cmp");
}
{
auto c = new Composition("AuvControl::DepthFusionCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"z");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("AuvHelper::DepthAndOrientationFusion"),"task");
c->addFullfillment("AuvControl::DepthFusionCmp");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
}
{
auto c = new Composition("AuvControl::SimpleMove");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::FakeWriter"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"reading");
c->addFullfillment("AuvControl::SimpleMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::SimplePosMove");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::RelFakeWriter"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::SimplePosMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("GPSHelper::GPSWaypointsCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("GpsHelper::WaypointNavigation"),"main");
c->addChild(pool->getComponent("Base::PositionSrv"),"gps");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("GPSHelper::GPSWaypointsCmp");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto c = new Composition("ConsWA");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller_v");
c->addFullfillment("ConsWA");
}
{
auto c = new Composition("AuvControl::TrajectoryMove");
c->addEvent("reached_end");
c->addEvent("align_at_end");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"foo");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::TrajectoryMove");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("PoseAuv::PoseEstimatorCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("PoseEstimation::UWPoseEstimator"),"pose_estimator");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("Base::VelocitySrv"),"model");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("PoseAuv::PoseEstimatorCmp");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
}
{
auto c = new Composition("PoseAuv::PoseEstimatorBlindCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("PoseEstimation::UWPoseEstimator"),"pose_estimator");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addChild(pool->getComponent("Base::VelocitySrv"),"model");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("PoseAuv::PoseEstimatorBlindCmp");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
}
{
auto c = new Composition("PoseAuv::IKFOrientationEstimatorCmp");
c->addEvent("INITIAL_NORTH_SEEKING");
c->addEvent("INITIAL_ALIGNMENT");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("NAN_ERROR");
c->addEvent("ALIGNMENT_ERROR");
c->addEvent("CONFIGURATION_ERROR");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("OrientationEstimator::BaseEstimator"),"estimator");
c->addChild(pool->getComponent("WallOrientationCorrection::OrientationInMap"),"ori_in_map");
c->addChild(pool->getComponent("XsensImu::Task"),"imu");
c->addChild(pool->getComponent("FogKvh::Dsp3000Task"),"fog");
c->addFullfillment("PoseAuv::IKFOrientationEstimatorCmp");
c->addFullfillment("Base::OrientationToCorrectSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::OrientationToCorrectSrv");
c->addFullfillment("Base::OrientationSrv");
}
{
auto c = new Composition("Modem::ModemCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Dev::ASVModem"),"main");
c->addFullfillment("Modem::ModemCmp");
}
{
auto c = new Composition("Hbridge::ControlSystem");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Dev::Actuators::Hbridge"),"sensors");
c->addChild(pool->getComponent("Dev::Actuators::Hbridge"),"command");
c->addFullfillment("Hbridge::ControlSystem");
c->addFullfillment("Base::JointsControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
c->addFullfillment("Base::JointsControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
c->addFullfillment("Base::JointsStatusSrv");
c->addFullfillment("Base::JointsCommandConsumerSrv");
c->addFullfillment("Base::ControlledSystemSrv");
}
{
auto c = new Composition("Pipeline::Detector_new");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("OffshorePipelineDetector::Task"),"offshorePipelineDetector");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Pipeline::Detector_new");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("blueview_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::BlueView"),"camera");
c->addFullfillment("blueview_cmp");
}
{
auto c = new Composition("front_camera_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::Cameras::Prosilica"),"camera");
c->addFullfillment("front_camera_cmp");
}
{
auto c = new Composition("bottom_camera_cmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("VideoStreamerVlc::Streamer"),"vlc");
c->addChild(pool->getComponent("Dev::Sensors::Cameras::Prosilica"),"camera");
c->addFullfillment("bottom_camera_cmp");
}
{
auto c = new Composition("Pipeline::Detector");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("OffshorePipelineDetector::Task"),"offshorePipelineDetector");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Pipeline::Detector");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("Localization::ParticleDetector");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("UwParticleLocalization::Task"),"main");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addChild(pool->getComponent("Base::JointsStatusSrv"),"hb");
c->addFullfillment("Localization::ParticleDetector");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::MapSrv");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::PoseSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::OrientationWithZSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::ZProviderSrv");
c->addFullfillment("Base::OrientationSrv");
c->addFullfillment("Base::PositionSrv");
c->addFullfillment("Base::MapSrv");
}
{
auto c = new Composition("Localization::DeadReckoning");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("UwParticleLocalization::MotionModel"),"main");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addChild(pool->getComponent("Base::JointsStatusSrv"),"hb");
c->addFullfillment("Localization::DeadReckoning");
c->addFullfillment("Base::VelocitySrv");
c->addFullfillment("Base::VelocitySrv");
}
{
auto c = new Composition("Pipeline::Follower");
c->addEvent("check_candidate");
c->addEvent("follow_pipe");
c->addEvent("found_pipe");
c->addEvent("align_auv");
c->addEvent("lost_pipe");
c->addEvent("search_pipe");
c->addEvent("end_of_pipe");
c->addEvent("weak_signal");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Pipeline::Detector"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Pipeline::Detector"),"controller_local");
c->addFullfillment("Pipeline::Follower");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Localization::HoughDetector");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarWallHough::Task"),"main");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("Base::OrientationSrv"),"ori");
c->addFullfillment("Localization::HoughDetector");
c->addFullfillment("Localization::HoughSrv");
c->addFullfillment("Localization::HoughSrv");
}
{
auto c = new Composition("Localization::FixMapHack");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarFeatureDetector::Task"),"sonar_detector");
c->addFullfillment("Localization::FixMapHack");
}
{
auto c = new Composition("Localization::SonarFeatureDetectorCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarFeatureDetector::Task"),"sonar_detector");
c->addFullfillment("Localization::SonarFeatureDetectorCmp");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControllerSrv");
}
{
auto c = new Composition("AuvCont::BuoyWallCmp");
c->addEvent("aligned");
c->addEvent("aligning");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"main");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::BuoyWallCmp");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("Buoy::DetectorCmp<Base::AUVRelativeMotionControllerSrv>");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("Wall::Detector");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("WallServoing::SingleSonarServoing"),"detector");
c->addChild(pool->getComponent("SonarTritech::Micron"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Wall::Detector");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("Wall::DetectorNew");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("WallServoing::SingleSonarServoing"),"detector");
c->addChild(pool->getComponent("SonarTritech::Micron"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("Wall::DetectorNew");
c->addFullfillment("WallServoing::WallOrientationSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("WallServoing::WallOrientationSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("AuvCont::WorldXYZPositionCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYZPositionControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYZPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("Wall::Follower");
c->addEvent("wall_servoing");
c->addEvent("searching_wall");
c->addEvent("checking_wall");
c->addEvent("detected_corner");
c->addEvent("lost_all");
c->addEvent("origin_alignment");
c->addEvent("alignment_complete");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Wall::Detector"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Wall::Detector"),"controller_local");
c->addFullfillment("Wall::Follower");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Buoy::DetectorNewCmp");
c->addEvent("buoy_found");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Buoy::Detector"),"main");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"front_camera");
c->addFullfillment("Buoy::DetectorNewCmp");
}
{
auto c = new Composition("Buoy::ControllerNewCmp");
c->addEvent("passive_buoy_searching");
c->addEvent("buoy_servoing");
c->addEvent("aligned");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Buoy::ServoingOnWall"),"main");
c->addChild(pool->getComponent("WallServoing::WallOrientationSrv"),"wall");
c->addChild(pool->getComponent("Base::OrientationSrv"),"pose");
c->addChild(pool->getComponent("Buoy::DetectorNewCmp"),"detector");
c->addFullfillment("Buoy::ControllerNewCmp");
c->addFullfillment("Base::WorldXYZPositionControllerSrv");
c->addFullfillment("Base::WorldXYZPositionControllerSrv");
}
{
auto c = new Composition("AuvCont::ConstantCommandGroundAvoidanceCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommandGroundAvoidance"),"main");
c->addChild(pool->getComponent("Base::GroundDistanceSrv"),"altimeter");
c->addChild(pool->getComponent("Base::ZProviderSrv"),"depth");
c->addFullfillment("AuvCont::ConstantCommandGroundAvoidanceCmp");
}
{
auto c = new Composition("Buoy::DetectorCmp");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
}
{
auto c = new Composition("Structure::StructureReconstructionComp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("StructureReconstruction::Task"),"image_saver");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"front_camera");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"bottom_camera");
c->addFullfillment("Structure::StructureReconstructionComp");
}
{
auto c = new Composition("Buoy::DetectorCmp2");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector2"),"detector");
c->addFullfillment("Buoy::DetectorCmp2");
}
{
auto c = new Composition("Structure::SonarStructureServoingComp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("SEARCHING_STRUCTURE");
c->addEvent("VALIDATING_STRUCTURE");
c->addEvent("INSPECTING_STRUCTURE");
c->addEvent("SUCCESS");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("SonarStructureServoing::Task"),"detector");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose_blind");
c->addFullfillment("Structure::SonarStructureServoingComp");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
c->addFullfillment("Base::AUVRelativeMotionControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::ControllerSrv");
c->addFullfillment("Base::WorldXYPositionControllerSrv");
}
{
auto c = new Composition("Structure::Detector");
c->addEvent("servoing");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("StructureServoing::Task"),"detector");
c->addChild(pool->getComponent("HsvMosaicing::Task"),"mosaic");
c->addChild(pool->getComponent("ImagePreprocessing::HSVSegmentationAndBlur"),"seg");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"ori");
c->addFullfillment("Structure::Detector");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("Buoy::DoubleBuoyCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::MapSrv"),"main");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"orange");
c->addChild(pool->getComponent("Buoy::DetectorCmp2"),"white");
c->addFullfillment("Buoy::DoubleBuoyCmp");
}
{
auto c = new Composition("Structure::Alignment");
c->addEvent("aligning");
c->addEvent("aligned");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("StructureServoing::Alignment"),"detector");
c->addChild(pool->getComponent("HsvMosaicing::Task"),"mosaic");
c->addChild(pool->getComponent("ImagePreprocessing::HSVSegmentationAndBlur"),"seg");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addFullfillment("Structure::Alignment");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("Buoy::FollowerCmp");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Buoy::DetectorCmp"),"controller_local");
c->addFullfillment("Buoy::FollowerCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::PositionControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::PositionControlTask"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addFullfillment("AuvControl::PositionControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("AuvControl::RelPosControlCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvRelPosController::Task"),"controller");
c->addChild(pool->getComponent("Base::ControlledSystemSrv"),"controlled_system");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addFullfillment("AuvControl::RelPosControlCmp");
c->addFullfillment("Base::ControlLoop");
c->addFullfillment("Base::ControlLoop");
}
{
auto c = new Composition("Buoy::DetectorCmp<Base::ControllerSrv>");
c->addEvent("buoy_search");
c->addEvent("buoy_detected");
c->addEvent("buoy_arrived");
c->addEvent("buoy_lost");
c->addEvent("strafing");
c->addEvent("strafe_finished");
c->addEvent("strafe_to_angle");
c->addEvent("angle_arrived");
c->addEvent("timeout");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::ImageProviderSrv"),"camera");
c->addChild(pool->getComponent("Base::OrientationWithZSrv"),"orientation_with_z");
c->addChild(pool->getComponent("Buoy::Detector"),"detector");
c->addFullfillment("Buoy::DetectorCmp");
c->addFullfillment("Base::ControllerSrv");
}
{
auto c = new Composition("ConstantWorldXYVelocityCommand");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller_w");
c->addChild(pool->getComponent("ConsWA"),"controller_v");
c->addFullfillment("ConstantWorldXYVelocityCommand");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
c->addFullfillment("Base::WorldXYVelocityControllerSrv");
}
{
auto c = new Composition("PoseAuv::InitialOrientationEstimatorCmp");
c->addEvent("MISSING_TRANSFORMATION");
c->addEvent("ESTIMATE_WALL_ORIENTATION");
c->addEvent("VALID_WALL_FIX");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("WallOrientationCorrection::Task"),"wall_estimation");
c->addChild(pool->getComponent("OrientationEstimator::BaseEstimator"),"estimator");
c->addChild(pool->getComponent("XsensImu::Task"),"imu");
c->addChild(pool->getComponent("FogKvh::Dsp3000Task"),"fog");
c->addChild(pool->getComponent("Base::SonarScanProviderSrv"),"sonar");
c->addChild(pool->getComponent("SonarFeatureEstimator::Task"),"sonar_estimator");
c->addChild(pool->getComponent("PoseAuv::IKFOrientationEstimatorCmp"),"slave");
c->addFullfillment("PoseAuv::InitialOrientationEstimatorCmp");
}
{
auto c = new Composition("AuvCont::StructureCmp");
c->addEvent("aligned");
c->addEvent("aligning");
c->addEvent("servoing");
c->addEvent("no_structure");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"main");
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::StructureCmp");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::MoveCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("ConstantWorldXYVelocityCommand"),"command");
c->addChild(pool->getComponent("ConstantWorldXYVelocityCommand"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addFullfillment("AuvCont::MoveCmp");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::PositionMoveCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"command");
c->addChild(pool->getComponent("AuvControl::ConstantCommand"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addFullfillment("AuvCont::PositionMoveCmp");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
{
auto c = new Composition("AuvCont::Trajectory");
c->addEvent("reached_end");
c->addEvent("align_at_end");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"main");
c->addChild(pool->getComponent("AvalonControl::TrajectoryFollower"),"controller");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addFullfillment("AuvCont::Trajectory");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
{
auto c = new Composition("AuvCont::WorldYPositionXVelocityCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldYPositionXVelocityControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldYPositionXVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::WorldXYPositionCmp");
c->addEvent("detected_corner");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYPositionControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::WorldXYVelocityCmp");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("Base::WorldXYVelocityControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldXYVelocityCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::JointsCommandSrv");
}
{
auto c = new Composition("AuvCont::WorldPositionCmp");
c->addEvent("reached_target");
c->addEvent("servoing_finished");
c->addEvent("not_enough_targets");
c->addEvent("failed");
c->addEvent("stop");
c->addEvent("start");
c->addEvent("success");
c->addEvent("aborted");
c->addEvent("internal_error");
c->addEvent("updated_data");
c->addEvent("poll_transition");
c->addChild(pool->getComponent("Base::JointsControlledSystemSrv"),"joint");
c->addChild(pool->getComponent("Base::PoseSrv"),"pose");
c->addChild(pool->getComponent("AuvCont::ConstantCommandGroundAvoidanceCmp"),"avoid");
c->addChild(pool->getComponent("AuvControl::WorldToAligned"),"world_to_aligned");
c->addChild(pool->getComponent("AuvControl::OptimalHeadingController"),"optimal_heading_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_position_controller");
c->addChild(pool->getComponent("AuvControl::PIDController"),"aligned_velocity_controller");
c->addChild(pool->getComponent("AuvControl::AlignedToBody"),"aligned_to_body");
c->addChild(pool->getComponent("AuvControl::AccelerationController"),"acceleration_controller");
c->addChild(pool->getComponent("Base::WorldXYZRollPitchYawControllerSrv"),"controller");
c->addFullfillment("AuvCont::WorldPositionCmp");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
c->addFullfillment("Base::JointsCommandSrv");
c->addFullfillment("Base::WorldXYZRollPitchYawControlledSystemSrv");
}
load_constraints();
return "";
}
