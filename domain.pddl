(define (domain network)
  (:types task input_port output_port)
  (:requirements :strips :equality :typing :conditional-effects)
  (:predicates
	 (depends ?x - task ?y - task)
	 (is-running ?x - task)
	 (has-output ?x - task ?y - output_port)
	 (has-input ?x - task ?y - input_port)
	 (is-connected ?x - output_port ?y - input_port)
	 (should-connected ?x - task ?y - input_port ?z - output_port)
)
(:action start :parameters (?r - task ?t - task)
 :effect (and    (is-running ?t) (depends ?r ?t) )
)
(:action stop :parameters (?t - task)
 :precondition (not (depends _ ?t))
 :effect (not    (is-running ?t))
)
)
